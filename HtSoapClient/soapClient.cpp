/* soapClient.cpp
   Generated by gSOAP 2.8.108 for HTSAPServer.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.108 2020-11-13 08:47:59 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__syncWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__syncWriteVehicleInfo *ns1__syncWriteVehicleInfo_, ns1__syncWriteVehicleInfoResponse &ns1__syncWriteVehicleInfoResponse_)
{	if (soap_send___ns1__syncWriteVehicleInfo(soap, soap_endpoint, soap_action, ns1__syncWriteVehicleInfo_) || soap_recv___ns1__syncWriteVehicleInfo(soap, ns1__syncWriteVehicleInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__syncWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__syncWriteVehicleInfo *ns1__syncWriteVehicleInfo_)
{	struct __ns1__syncWriteVehicleInfo soap_tmp___ns1__syncWriteVehicleInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__syncWriteVehicleInfo.ns1__syncWriteVehicleInfo_ = ns1__syncWriteVehicleInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__syncWriteVehicleInfo(soap, &soap_tmp___ns1__syncWriteVehicleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__syncWriteVehicleInfo(soap, &soap_tmp___ns1__syncWriteVehicleInfo, "-ns1:syncWriteVehicleInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__syncWriteVehicleInfo(soap, &soap_tmp___ns1__syncWriteVehicleInfo, "-ns1:syncWriteVehicleInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__syncWriteVehicleInfo(struct soap *soap, ns1__syncWriteVehicleInfoResponse &ns1__syncWriteVehicleInfoResponse_)
{
	ns1__syncWriteVehicleInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__syncWriteVehicleInfoResponse_.soap_get(soap, "ns1:syncWriteVehicleInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__writeVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__writeVehicleInfo *ns1__writeVehicleInfo_, ns1__writeVehicleInfoResponse &ns1__writeVehicleInfoResponse_)
{	if (soap_send___ns1__writeVehicleInfo(soap, soap_endpoint, soap_action, ns1__writeVehicleInfo_) || soap_recv___ns1__writeVehicleInfo(soap, ns1__writeVehicleInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__writeVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__writeVehicleInfo *ns1__writeVehicleInfo_)
{	struct __ns1__writeVehicleInfo soap_tmp___ns1__writeVehicleInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__writeVehicleInfo.ns1__writeVehicleInfo_ = ns1__writeVehicleInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__writeVehicleInfo(soap, &soap_tmp___ns1__writeVehicleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__writeVehicleInfo(soap, &soap_tmp___ns1__writeVehicleInfo, "-ns1:writeVehicleInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__writeVehicleInfo(soap, &soap_tmp___ns1__writeVehicleInfo, "-ns1:writeVehicleInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__writeVehicleInfo(struct soap *soap, ns1__writeVehicleInfoResponse &ns1__writeVehicleInfoResponse_)
{
	ns1__writeVehicleInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__writeVehicleInfoResponse_.soap_get(soap, "ns1:writeVehicleInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__login(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__login *ns1__login_, ns1__loginResponse &ns1__loginResponse_)
{	if (soap_send___ns1__login(soap, soap_endpoint, soap_action, ns1__login_) || soap_recv___ns1__login(soap, ns1__loginResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__login(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__login *ns1__login_)
{	struct __ns1__login soap_tmp___ns1__login;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__login.ns1__login_ = ns1__login_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__login(soap, &soap_tmp___ns1__login);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__login(struct soap *soap, ns1__loginResponse &ns1__loginResponse_)
{
	ns1__loginResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__loginResponse_.soap_get(soap, "ns1:loginResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__queryLimitSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__queryLimitSpeed *ns1__queryLimitSpeed_, ns1__queryLimitSpeedResponse &ns1__queryLimitSpeedResponse_)
{	if (soap_send___ns1__queryLimitSpeed(soap, soap_endpoint, soap_action, ns1__queryLimitSpeed_) || soap_recv___ns1__queryLimitSpeed(soap, ns1__queryLimitSpeedResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__queryLimitSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__queryLimitSpeed *ns1__queryLimitSpeed_)
{	struct __ns1__queryLimitSpeed soap_tmp___ns1__queryLimitSpeed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__queryLimitSpeed.ns1__queryLimitSpeed_ = ns1__queryLimitSpeed_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__queryLimitSpeed(soap, &soap_tmp___ns1__queryLimitSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__queryLimitSpeed(soap, &soap_tmp___ns1__queryLimitSpeed, "-ns1:queryLimitSpeed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__queryLimitSpeed(soap, &soap_tmp___ns1__queryLimitSpeed, "-ns1:queryLimitSpeed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__queryLimitSpeed(struct soap *soap, ns1__queryLimitSpeedResponse &ns1__queryLimitSpeedResponse_)
{
	ns1__queryLimitSpeedResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__queryLimitSpeedResponse_.soap_get(soap, "ns1:queryLimitSpeedResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__queryViolateSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__queryViolateSpeed *ns1__queryViolateSpeed_, ns1__queryViolateSpeedResponse &ns1__queryViolateSpeedResponse_)
{	if (soap_send___ns1__queryViolateSpeed(soap, soap_endpoint, soap_action, ns1__queryViolateSpeed_) || soap_recv___ns1__queryViolateSpeed(soap, ns1__queryViolateSpeedResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__queryViolateSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__queryViolateSpeed *ns1__queryViolateSpeed_)
{	struct __ns1__queryViolateSpeed soap_tmp___ns1__queryViolateSpeed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__queryViolateSpeed.ns1__queryViolateSpeed_ = ns1__queryViolateSpeed_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__queryViolateSpeed(soap, &soap_tmp___ns1__queryViolateSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__queryViolateSpeed(soap, &soap_tmp___ns1__queryViolateSpeed, "-ns1:queryViolateSpeed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__queryViolateSpeed(soap, &soap_tmp___ns1__queryViolateSpeed, "-ns1:queryViolateSpeed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__queryViolateSpeed(struct soap *soap, ns1__queryViolateSpeedResponse &ns1__queryViolateSpeedResponse_)
{
	ns1__queryViolateSpeedResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__queryViolateSpeedResponse_.soap_get(soap, "ns1:queryViolateSpeedResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__logout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__logout *ns1__logout_, ns1__logoutResponse &ns1__logoutResponse_)
{	if (soap_send___ns1__logout(soap, soap_endpoint, soap_action, ns1__logout_) || soap_recv___ns1__logout(soap, ns1__logoutResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__logout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__logout *ns1__logout_)
{	struct __ns1__logout soap_tmp___ns1__logout;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__logout.ns1__logout_ = ns1__logout_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__logout(soap, &soap_tmp___ns1__logout);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__logout(struct soap *soap, ns1__logoutResponse &ns1__logoutResponse_)
{
	ns1__logoutResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__logoutResponse_.soap_get(soap, "ns1:logoutResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__querySyncTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__querySyncTime *ns1__querySyncTime_, ns1__querySyncTimeResponse &ns1__querySyncTimeResponse_)
{	if (soap_send___ns1__querySyncTime(soap, soap_endpoint, soap_action, ns1__querySyncTime_) || soap_recv___ns1__querySyncTime(soap, ns1__querySyncTimeResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__querySyncTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__querySyncTime *ns1__querySyncTime_)
{	struct __ns1__querySyncTime soap_tmp___ns1__querySyncTime;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__querySyncTime.ns1__querySyncTime_ = ns1__querySyncTime_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__querySyncTime(soap, &soap_tmp___ns1__querySyncTime);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__querySyncTime(soap, &soap_tmp___ns1__querySyncTime, "-ns1:querySyncTime", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__querySyncTime(soap, &soap_tmp___ns1__querySyncTime, "-ns1:querySyncTime", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__querySyncTime(struct soap *soap, ns1__querySyncTimeResponse &ns1__querySyncTimeResponse_)
{
	ns1__querySyncTimeResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__querySyncTimeResponse_.soap_get(soap, "ns1:querySyncTimeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__writeAlarmInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__writeAlarmInfo *ns1__writeAlarmInfo_, ns1__writeAlarmInfoResponse &ns1__writeAlarmInfoResponse_)
{	if (soap_send___ns1__writeAlarmInfo(soap, soap_endpoint, soap_action, ns1__writeAlarmInfo_) || soap_recv___ns1__writeAlarmInfo(soap, ns1__writeAlarmInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__writeAlarmInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__writeAlarmInfo *ns1__writeAlarmInfo_)
{	struct __ns1__writeAlarmInfo soap_tmp___ns1__writeAlarmInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__writeAlarmInfo.ns1__writeAlarmInfo_ = ns1__writeAlarmInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__writeAlarmInfo(soap, &soap_tmp___ns1__writeAlarmInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__writeAlarmInfo(soap, &soap_tmp___ns1__writeAlarmInfo, "-ns1:writeAlarmInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__writeAlarmInfo(soap, &soap_tmp___ns1__writeAlarmInfo, "-ns1:writeAlarmInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__writeAlarmInfo(struct soap *soap, ns1__writeAlarmInfoResponse &ns1__writeAlarmInfoResponse_)
{
	ns1__writeAlarmInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__writeAlarmInfoResponse_.soap_get(soap, "ns1:writeAlarmInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteVehicleInfo *ns1__NWriteVehicleInfo_, ns1__NWriteVehicleInfoResponse &ns1__NWriteVehicleInfoResponse_)
{	if (soap_send___ns1__NWriteVehicleInfo(soap, soap_endpoint, soap_action, ns1__NWriteVehicleInfo_) || soap_recv___ns1__NWriteVehicleInfo(soap, ns1__NWriteVehicleInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteVehicleInfo *ns1__NWriteVehicleInfo_)
{	struct __ns1__NWriteVehicleInfo soap_tmp___ns1__NWriteVehicleInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NWriteVehicleInfo.ns1__NWriteVehicleInfo_ = ns1__NWriteVehicleInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NWriteVehicleInfo(soap, &soap_tmp___ns1__NWriteVehicleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NWriteVehicleInfo(soap, &soap_tmp___ns1__NWriteVehicleInfo, "-ns1:NWriteVehicleInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NWriteVehicleInfo(soap, &soap_tmp___ns1__NWriteVehicleInfo, "-ns1:NWriteVehicleInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NWriteVehicleInfo(struct soap *soap, ns1__NWriteVehicleInfoResponse &ns1__NWriteVehicleInfoResponse_)
{
	ns1__NWriteVehicleInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NWriteVehicleInfoResponse_.soap_get(soap, "ns1:NWriteVehicleInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteVehicleInfoEx *ns1__NWriteVehicleInfoEx_, ns1__NWriteVehicleInfoExResponse &ns1__NWriteVehicleInfoExResponse_)
{	if (soap_send___ns1__NWriteVehicleInfoEx(soap, soap_endpoint, soap_action, ns1__NWriteVehicleInfoEx_) || soap_recv___ns1__NWriteVehicleInfoEx(soap, ns1__NWriteVehicleInfoExResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteVehicleInfoEx *ns1__NWriteVehicleInfoEx_)
{	struct __ns1__NWriteVehicleInfoEx soap_tmp___ns1__NWriteVehicleInfoEx;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NWriteVehicleInfoEx.ns1__NWriteVehicleInfoEx_ = ns1__NWriteVehicleInfoEx_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NWriteVehicleInfoEx(soap, &soap_tmp___ns1__NWriteVehicleInfoEx);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NWriteVehicleInfoEx(soap, &soap_tmp___ns1__NWriteVehicleInfoEx, "-ns1:NWriteVehicleInfoEx", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NWriteVehicleInfoEx(soap, &soap_tmp___ns1__NWriteVehicleInfoEx, "-ns1:NWriteVehicleInfoEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NWriteVehicleInfoEx(struct soap *soap, ns1__NWriteVehicleInfoExResponse &ns1__NWriteVehicleInfoExResponse_)
{
	ns1__NWriteVehicleInfoExResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NWriteVehicleInfoExResponse_.soap_get(soap, "ns1:NWriteVehicleInfoExResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteVehicleInfo *ns1__NSyncWriteVehicleInfo_, ns1__NSyncWriteVehicleInfoResponse &ns1__NSyncWriteVehicleInfoResponse_)
{	if (soap_send___ns1__NSyncWriteVehicleInfo(soap, soap_endpoint, soap_action, ns1__NSyncWriteVehicleInfo_) || soap_recv___ns1__NSyncWriteVehicleInfo(soap, ns1__NSyncWriteVehicleInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteVehicleInfo *ns1__NSyncWriteVehicleInfo_)
{	struct __ns1__NSyncWriteVehicleInfo soap_tmp___ns1__NSyncWriteVehicleInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NSyncWriteVehicleInfo.ns1__NSyncWriteVehicleInfo_ = ns1__NSyncWriteVehicleInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NSyncWriteVehicleInfo(soap, &soap_tmp___ns1__NSyncWriteVehicleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NSyncWriteVehicleInfo(soap, &soap_tmp___ns1__NSyncWriteVehicleInfo, "-ns1:NSyncWriteVehicleInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NSyncWriteVehicleInfo(soap, &soap_tmp___ns1__NSyncWriteVehicleInfo, "-ns1:NSyncWriteVehicleInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NSyncWriteVehicleInfo(struct soap *soap, ns1__NSyncWriteVehicleInfoResponse &ns1__NSyncWriteVehicleInfoResponse_)
{
	ns1__NSyncWriteVehicleInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NSyncWriteVehicleInfoResponse_.soap_get(soap, "ns1:NSyncWriteVehicleInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteFlux(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteFlux *ns1__WriteFlux_, ns1__WriteFluxResponse &ns1__WriteFluxResponse_)
{	if (soap_send___ns1__WriteFlux(soap, soap_endpoint, soap_action, ns1__WriteFlux_) || soap_recv___ns1__WriteFlux(soap, ns1__WriteFluxResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__WriteFlux(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteFlux *ns1__WriteFlux_)
{	struct __ns1__WriteFlux soap_tmp___ns1__WriteFlux;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__WriteFlux.ns1__WriteFlux_ = ns1__WriteFlux_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__WriteFlux(soap, &soap_tmp___ns1__WriteFlux);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WriteFlux(soap, &soap_tmp___ns1__WriteFlux, "-ns1:WriteFlux", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WriteFlux(soap, &soap_tmp___ns1__WriteFlux, "-ns1:WriteFlux", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__WriteFlux(struct soap *soap, ns1__WriteFluxResponse &ns1__WriteFluxResponse_)
{
	ns1__WriteFluxResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WriteFluxResponse_.soap_get(soap, "ns1:WriteFluxResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NWriteDeviceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteDeviceStatus *ns1__NWriteDeviceStatus_, ns1__NWriteDeviceStatusResponse &ns1__NWriteDeviceStatusResponse_)
{	if (soap_send___ns1__NWriteDeviceStatus(soap, soap_endpoint, soap_action, ns1__NWriteDeviceStatus_) || soap_recv___ns1__NWriteDeviceStatus(soap, ns1__NWriteDeviceStatusResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NWriteDeviceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWriteDeviceStatus *ns1__NWriteDeviceStatus_)
{	struct __ns1__NWriteDeviceStatus soap_tmp___ns1__NWriteDeviceStatus;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NWriteDeviceStatus.ns1__NWriteDeviceStatus_ = ns1__NWriteDeviceStatus_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NWriteDeviceStatus(soap, &soap_tmp___ns1__NWriteDeviceStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NWriteDeviceStatus(soap, &soap_tmp___ns1__NWriteDeviceStatus, "-ns1:NWriteDeviceStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NWriteDeviceStatus(soap, &soap_tmp___ns1__NWriteDeviceStatus, "-ns1:NWriteDeviceStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NWriteDeviceStatus(struct soap *soap, ns1__NWriteDeviceStatusResponse &ns1__NWriteDeviceStatusResponse_)
{
	ns1__NWriteDeviceStatusResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NWriteDeviceStatusResponse_.soap_get(soap, "ns1:NWriteDeviceStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteMobileEPVInfo *ns1__NSyncWriteMobileEPVInfo_, ns1__NSyncWriteMobileEPVInfoResponse &ns1__NSyncWriteMobileEPVInfoResponse_)
{	if (soap_send___ns1__NSyncWriteMobileEPVInfo(soap, soap_endpoint, soap_action, ns1__NSyncWriteMobileEPVInfo_) || soap_recv___ns1__NSyncWriteMobileEPVInfo(soap, ns1__NSyncWriteMobileEPVInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteMobileEPVInfo *ns1__NSyncWriteMobileEPVInfo_)
{	struct __ns1__NSyncWriteMobileEPVInfo soap_tmp___ns1__NSyncWriteMobileEPVInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NSyncWriteMobileEPVInfo.ns1__NSyncWriteMobileEPVInfo_ = ns1__NSyncWriteMobileEPVInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NSyncWriteMobileEPVInfo(soap, &soap_tmp___ns1__NSyncWriteMobileEPVInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NSyncWriteMobileEPVInfo(soap, &soap_tmp___ns1__NSyncWriteMobileEPVInfo, "-ns1:NSyncWriteMobileEPVInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NSyncWriteMobileEPVInfo(soap, &soap_tmp___ns1__NSyncWriteMobileEPVInfo, "-ns1:NSyncWriteMobileEPVInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, ns1__NSyncWriteMobileEPVInfoResponse &ns1__NSyncWriteMobileEPVInfoResponse_)
{
	ns1__NSyncWriteMobileEPVInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NSyncWriteMobileEPVInfoResponse_.soap_get(soap, "ns1:NSyncWriteMobileEPVInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NSyncWriteVioInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteVioInfo *ns1__NSyncWriteVioInfo_, ns1__NSyncWriteVioInfoResponse &ns1__NSyncWriteVioInfoResponse_)
{	if (soap_send___ns1__NSyncWriteVioInfo(soap, soap_endpoint, soap_action, ns1__NSyncWriteVioInfo_) || soap_recv___ns1__NSyncWriteVioInfo(soap, ns1__NSyncWriteVioInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NSyncWriteVioInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NSyncWriteVioInfo *ns1__NSyncWriteVioInfo_)
{	struct __ns1__NSyncWriteVioInfo soap_tmp___ns1__NSyncWriteVioInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NSyncWriteVioInfo.ns1__NSyncWriteVioInfo_ = ns1__NSyncWriteVioInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NSyncWriteVioInfo(soap, &soap_tmp___ns1__NSyncWriteVioInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NSyncWriteVioInfo(soap, &soap_tmp___ns1__NSyncWriteVioInfo, "-ns1:NSyncWriteVioInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NSyncWriteVioInfo(soap, &soap_tmp___ns1__NSyncWriteVioInfo, "-ns1:NSyncWriteVioInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NSyncWriteVioInfo(struct soap *soap, ns1__NSyncWriteVioInfoResponse &ns1__NSyncWriteVioInfoResponse_)
{
	ns1__NSyncWriteVioInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NSyncWriteVioInfoResponse_.soap_get(soap, "ns1:NSyncWriteVioInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__NWritePassStat(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWritePassStat *ns1__NWritePassStat_, ns1__NWritePassStatResponse &ns1__NWritePassStatResponse_)
{	if (soap_send___ns1__NWritePassStat(soap, soap_endpoint, soap_action, ns1__NWritePassStat_) || soap_recv___ns1__NWritePassStat(soap, ns1__NWritePassStatResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__NWritePassStat(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__NWritePassStat *ns1__NWritePassStat_)
{	struct __ns1__NWritePassStat soap_tmp___ns1__NWritePassStat;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__NWritePassStat.ns1__NWritePassStat_ = ns1__NWritePassStat_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__NWritePassStat(soap, &soap_tmp___ns1__NWritePassStat);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__NWritePassStat(soap, &soap_tmp___ns1__NWritePassStat, "-ns1:NWritePassStat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__NWritePassStat(soap, &soap_tmp___ns1__NWritePassStat, "-ns1:NWritePassStat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__NWritePassStat(struct soap *soap, ns1__NWritePassStatResponse &ns1__NWritePassStatResponse_)
{
	ns1__NWritePassStatResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__NWritePassStatResponse_.soap_get(soap, "ns1:NWritePassStatResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SyncWriteVehPassInfo *ns1__SyncWriteVehPassInfo_, ns1__SyncWriteVehPassInfoResponse &ns1__SyncWriteVehPassInfoResponse_)
{	if (soap_send___ns1__SyncWriteVehPassInfo(soap, soap_endpoint, soap_action, ns1__SyncWriteVehPassInfo_) || soap_recv___ns1__SyncWriteVehPassInfo(soap, ns1__SyncWriteVehPassInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SyncWriteVehPassInfo *ns1__SyncWriteVehPassInfo_)
{	struct __ns1__SyncWriteVehPassInfo soap_tmp___ns1__SyncWriteVehPassInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__SyncWriteVehPassInfo.ns1__SyncWriteVehPassInfo_ = ns1__SyncWriteVehPassInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__SyncWriteVehPassInfo(soap, &soap_tmp___ns1__SyncWriteVehPassInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SyncWriteVehPassInfo(soap, &soap_tmp___ns1__SyncWriteVehPassInfo, "-ns1:SyncWriteVehPassInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SyncWriteVehPassInfo(soap, &soap_tmp___ns1__SyncWriteVehPassInfo, "-ns1:SyncWriteVehPassInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__SyncWriteVehPassInfo(struct soap *soap, ns1__SyncWriteVehPassInfoResponse &ns1__SyncWriteVehPassInfoResponse_)
{
	ns1__SyncWriteVehPassInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SyncWriteVehPassInfoResponse_.soap_get(soap, "ns1:SyncWriteVehPassInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteVehPassInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteVehPassInfo *ns1__WriteVehPassInfo_, ns1__WriteVehPassInfoResponse &ns1__WriteVehPassInfoResponse_)
{	if (soap_send___ns1__WriteVehPassInfo(soap, soap_endpoint, soap_action, ns1__WriteVehPassInfo_) || soap_recv___ns1__WriteVehPassInfo(soap, ns1__WriteVehPassInfoResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__WriteVehPassInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteVehPassInfo *ns1__WriteVehPassInfo_)
{	struct __ns1__WriteVehPassInfo soap_tmp___ns1__WriteVehPassInfo;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__WriteVehPassInfo.ns1__WriteVehPassInfo_ = ns1__WriteVehPassInfo_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__WriteVehPassInfo(soap, &soap_tmp___ns1__WriteVehPassInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WriteVehPassInfo(soap, &soap_tmp___ns1__WriteVehPassInfo, "-ns1:WriteVehPassInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WriteVehPassInfo(soap, &soap_tmp___ns1__WriteVehPassInfo, "-ns1:WriteVehPassInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__WriteVehPassInfo(struct soap *soap, ns1__WriteVehPassInfoResponse &ns1__WriteVehPassInfoResponse_)
{
	ns1__WriteVehPassInfoResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WriteVehPassInfoResponse_.soap_get(soap, "ns1:WriteVehPassInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SyncWriteAreaSpeed *ns1__SyncWriteAreaSpeed_, ns1__SyncWriteAreaSpeedResponse &ns1__SyncWriteAreaSpeedResponse_)
{	if (soap_send___ns1__SyncWriteAreaSpeed(soap, soap_endpoint, soap_action, ns1__SyncWriteAreaSpeed_) || soap_recv___ns1__SyncWriteAreaSpeed(soap, ns1__SyncWriteAreaSpeedResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SyncWriteAreaSpeed *ns1__SyncWriteAreaSpeed_)
{	struct __ns1__SyncWriteAreaSpeed soap_tmp___ns1__SyncWriteAreaSpeed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__SyncWriteAreaSpeed.ns1__SyncWriteAreaSpeed_ = ns1__SyncWriteAreaSpeed_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__SyncWriteAreaSpeed(soap, &soap_tmp___ns1__SyncWriteAreaSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SyncWriteAreaSpeed(soap, &soap_tmp___ns1__SyncWriteAreaSpeed, "-ns1:SyncWriteAreaSpeed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SyncWriteAreaSpeed(soap, &soap_tmp___ns1__SyncWriteAreaSpeed, "-ns1:SyncWriteAreaSpeed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__SyncWriteAreaSpeed(struct soap *soap, ns1__SyncWriteAreaSpeedResponse &ns1__SyncWriteAreaSpeedResponse_)
{
	ns1__SyncWriteAreaSpeedResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SyncWriteAreaSpeedResponse_.soap_get(soap, "ns1:SyncWriteAreaSpeedResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WriteAreaSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteAreaSpeed *ns1__WriteAreaSpeed_, ns1__WriteAreaSpeedResponse &ns1__WriteAreaSpeedResponse_)
{	if (soap_send___ns1__WriteAreaSpeed(soap, soap_endpoint, soap_action, ns1__WriteAreaSpeed_) || soap_recv___ns1__WriteAreaSpeed(soap, ns1__WriteAreaSpeedResponse_))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__WriteAreaSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WriteAreaSpeed *ns1__WriteAreaSpeed_)
{	struct __ns1__WriteAreaSpeed soap_tmp___ns1__WriteAreaSpeed;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.21:7081/HTServer/services/HTSAPServer";
	if (soap_action == NULL)
		soap_action = "action";
	soap_tmp___ns1__WriteAreaSpeed.ns1__WriteAreaSpeed_ = ns1__WriteAreaSpeed_;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__WriteAreaSpeed(soap, &soap_tmp___ns1__WriteAreaSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WriteAreaSpeed(soap, &soap_tmp___ns1__WriteAreaSpeed, "-ns1:WriteAreaSpeed", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WriteAreaSpeed(soap, &soap_tmp___ns1__WriteAreaSpeed, "-ns1:WriteAreaSpeed", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__WriteAreaSpeed(struct soap *soap, ns1__WriteAreaSpeedResponse &ns1__WriteAreaSpeedResponse_)
{
	ns1__WriteAreaSpeedResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WriteAreaSpeedResponse_.soap_get(soap, "ns1:WriteAreaSpeedResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */

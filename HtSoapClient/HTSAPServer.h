/* HTSAPServer.h
   Generated by wsdl2h 2.8.108 from HTSAPServer.wsdl and typemap.dat
   2020-11-13 08:41:52 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on HTSAPServer.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://server.cdt.com                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://server.cdt.com"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://server.cdt.com"
//gsoap ns1   schema namespace:	http://server.cdt.com
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns1__Exception;

class ns1__syncWriteVehicleInfo;

class ns1__syncWriteVehicleInfoResponse;

class ns1__writeVehicleInfo;

class ns1__writeVehicleInfoResponse;

class ns1__login;

class ns1__loginResponse;

class ns1__queryLimitSpeed;

class ns1__queryLimitSpeedResponse;

class ns1__queryViolateSpeed;

class ns1__queryViolateSpeedResponse;

class ns1__logout;

class ns1__logoutResponse;

class ns1__querySyncTime;

class ns1__querySyncTimeResponse;

class ns1__writeAlarmInfo;

class ns1__writeAlarmInfoResponse;

class ns1__NWriteVehicleInfo;

class ns1__NWriteVehicleInfoResponse;

class ns1__NWriteVehicleInfoEx;

class ns1__NWriteVehicleInfoExResponse;

class ns1__NSyncWriteVehicleInfo;

class ns1__NSyncWriteVehicleInfoResponse;

class ns1__WriteFlux;

class ns1__WriteFluxResponse;

class ns1__NWriteDeviceStatus;

class ns1__NWriteDeviceStatusResponse;

class ns1__NSyncWriteMobileEPVInfo;

class ns1__NSyncWriteMobileEPVInfoResponse;

class ns1__NSyncWriteVioInfo;

class ns1__NSyncWriteVioInfoResponse;

class ns1__NWritePassStat;

class ns1__NWritePassStatResponse;

class ns1__SyncWriteVehPassInfo;

class ns1__SyncWriteVehPassInfoResponse;

class ns1__WriteVehPassInfo;

class ns1__WriteVehPassInfoResponse;

class ns1__SyncWriteAreaSpeed;

class ns1__SyncWriteAreaSpeedResponse;

class ns1__WriteAreaSpeed;

class ns1__WriteAreaSpeedResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://server.cdt.com                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://server.cdt.com                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://server.cdt.com":Exception is a complexType.
///
/// @note class ns1__Exception operations:
/// - ns1__Exception* soap_new_ns1__Exception(soap*) allocate and default initialize
/// - ns1__Exception* soap_new_ns1__Exception(soap*, int num) allocate and default initialize an array
/// - ns1__Exception* soap_new_req_ns1__Exception(soap*, ...) allocate, set required members
/// - ns1__Exception* soap_new_set_ns1__Exception(soap*, ...) allocate, set all public members
/// - ns1__Exception::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Exception(soap*, ns1__Exception*) deserialize from a stream
/// - int soap_write_ns1__Exception(soap*, ns1__Exception*) serialize to a stream
/// - ns1__Exception* ns1__Exception::soap_dup(soap*) returns deep copy of ns1__Exception, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Exception::soap_del() deep deletes ns1__Exception data members, use only after ns1__Exception::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Exception::soap_type() returns SOAP_TYPE_ns1__Exception or derived type identifier
class ns1__Exception
{ public:
/// Element "message" of type xs:string.
    std::string*                         message                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":syncWriteVehicleInfo is a complexType.
///
/// @note class ns1__syncWriteVehicleInfo operations:
/// - ns1__syncWriteVehicleInfo* soap_new_ns1__syncWriteVehicleInfo(soap*) allocate and default initialize
/// - ns1__syncWriteVehicleInfo* soap_new_ns1__syncWriteVehicleInfo(soap*, int num) allocate and default initialize an array
/// - ns1__syncWriteVehicleInfo* soap_new_req_ns1__syncWriteVehicleInfo(soap*, ...) allocate, set required members
/// - ns1__syncWriteVehicleInfo* soap_new_set_ns1__syncWriteVehicleInfo(soap*, ...) allocate, set all public members
/// - ns1__syncWriteVehicleInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__syncWriteVehicleInfo(soap*, ns1__syncWriteVehicleInfo*) deserialize from a stream
/// - int soap_write_ns1__syncWriteVehicleInfo(soap*, ns1__syncWriteVehicleInfo*) serialize to a stream
/// - ns1__syncWriteVehicleInfo* ns1__syncWriteVehicleInfo::soap_dup(soap*) returns deep copy of ns1__syncWriteVehicleInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__syncWriteVehicleInfo::soap_del() deep deletes ns1__syncWriteVehicleInfo data members, use only after ns1__syncWriteVehicleInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__syncWriteVehicleInfo::soap_type() returns SOAP_TYPE_ns1__syncWriteVehicleInfo or derived type identifier
class ns1__syncWriteVehicleInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":syncWriteVehicleInfoResponse is a complexType.
///
/// @note class ns1__syncWriteVehicleInfoResponse operations:
/// - ns1__syncWriteVehicleInfoResponse* soap_new_ns1__syncWriteVehicleInfoResponse(soap*) allocate and default initialize
/// - ns1__syncWriteVehicleInfoResponse* soap_new_ns1__syncWriteVehicleInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__syncWriteVehicleInfoResponse* soap_new_req_ns1__syncWriteVehicleInfoResponse(soap*, ...) allocate, set required members
/// - ns1__syncWriteVehicleInfoResponse* soap_new_set_ns1__syncWriteVehicleInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__syncWriteVehicleInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__syncWriteVehicleInfoResponse(soap*, ns1__syncWriteVehicleInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__syncWriteVehicleInfoResponse(soap*, ns1__syncWriteVehicleInfoResponse*) serialize to a stream
/// - ns1__syncWriteVehicleInfoResponse* ns1__syncWriteVehicleInfoResponse::soap_dup(soap*) returns deep copy of ns1__syncWriteVehicleInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__syncWriteVehicleInfoResponse::soap_del() deep deletes ns1__syncWriteVehicleInfoResponse data members, use only after ns1__syncWriteVehicleInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__syncWriteVehicleInfoResponse::soap_type() returns SOAP_TYPE_ns1__syncWriteVehicleInfoResponse or derived type identifier
class ns1__syncWriteVehicleInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":writeVehicleInfo is a complexType.
///
/// @note class ns1__writeVehicleInfo operations:
/// - ns1__writeVehicleInfo* soap_new_ns1__writeVehicleInfo(soap*) allocate and default initialize
/// - ns1__writeVehicleInfo* soap_new_ns1__writeVehicleInfo(soap*, int num) allocate and default initialize an array
/// - ns1__writeVehicleInfo* soap_new_req_ns1__writeVehicleInfo(soap*, ...) allocate, set required members
/// - ns1__writeVehicleInfo* soap_new_set_ns1__writeVehicleInfo(soap*, ...) allocate, set all public members
/// - ns1__writeVehicleInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__writeVehicleInfo(soap*, ns1__writeVehicleInfo*) deserialize from a stream
/// - int soap_write_ns1__writeVehicleInfo(soap*, ns1__writeVehicleInfo*) serialize to a stream
/// - ns1__writeVehicleInfo* ns1__writeVehicleInfo::soap_dup(soap*) returns deep copy of ns1__writeVehicleInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__writeVehicleInfo::soap_del() deep deletes ns1__writeVehicleInfo data members, use only after ns1__writeVehicleInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__writeVehicleInfo::soap_type() returns SOAP_TYPE_ns1__writeVehicleInfo or derived type identifier
class ns1__writeVehicleInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:string.
    std::string                          strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:string.
    std::string                          strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:string.
    std::string                          strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:string.
    std::string                          strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:string.
    std::string                          strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:string.
    std::string                          strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:string.
    std::string                          strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":writeVehicleInfoResponse is a complexType.
///
/// @note class ns1__writeVehicleInfoResponse operations:
/// - ns1__writeVehicleInfoResponse* soap_new_ns1__writeVehicleInfoResponse(soap*) allocate and default initialize
/// - ns1__writeVehicleInfoResponse* soap_new_ns1__writeVehicleInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__writeVehicleInfoResponse* soap_new_req_ns1__writeVehicleInfoResponse(soap*, ...) allocate, set required members
/// - ns1__writeVehicleInfoResponse* soap_new_set_ns1__writeVehicleInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__writeVehicleInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__writeVehicleInfoResponse(soap*, ns1__writeVehicleInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__writeVehicleInfoResponse(soap*, ns1__writeVehicleInfoResponse*) serialize to a stream
/// - ns1__writeVehicleInfoResponse* ns1__writeVehicleInfoResponse::soap_dup(soap*) returns deep copy of ns1__writeVehicleInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__writeVehicleInfoResponse::soap_del() deep deletes ns1__writeVehicleInfoResponse data members, use only after ns1__writeVehicleInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__writeVehicleInfoResponse::soap_type() returns SOAP_TYPE_ns1__writeVehicleInfoResponse or derived type identifier
class ns1__writeVehicleInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":login is a complexType.
///
/// @note class ns1__login operations:
/// - ns1__login* soap_new_ns1__login(soap*) allocate and default initialize
/// - ns1__login* soap_new_ns1__login(soap*, int num) allocate and default initialize an array
/// - ns1__login* soap_new_req_ns1__login(soap*, ...) allocate, set required members
/// - ns1__login* soap_new_set_ns1__login(soap*, ...) allocate, set all public members
/// - ns1__login::soap_default(soap*) default initialize members
/// - int soap_read_ns1__login(soap*, ns1__login*) deserialize from a stream
/// - int soap_write_ns1__login(soap*, ns1__login*) serialize to a stream
/// - ns1__login* ns1__login::soap_dup(soap*) returns deep copy of ns1__login, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__login::soap_del() deep deletes ns1__login data members, use only after ns1__login::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__login::soap_type() returns SOAP_TYPE_ns1__login or derived type identifier
class ns1__login
{ public:
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strDeviceKey" of type xs:string.
    std::string                          strDeviceKey                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":loginResponse is a complexType.
///
/// @note class ns1__loginResponse operations:
/// - ns1__loginResponse* soap_new_ns1__loginResponse(soap*) allocate and default initialize
/// - ns1__loginResponse* soap_new_ns1__loginResponse(soap*, int num) allocate and default initialize an array
/// - ns1__loginResponse* soap_new_req_ns1__loginResponse(soap*, ...) allocate, set required members
/// - ns1__loginResponse* soap_new_set_ns1__loginResponse(soap*, ...) allocate, set all public members
/// - ns1__loginResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__loginResponse(soap*, ns1__loginResponse*) deserialize from a stream
/// - int soap_write_ns1__loginResponse(soap*, ns1__loginResponse*) serialize to a stream
/// - ns1__loginResponse* ns1__loginResponse::soap_dup(soap*) returns deep copy of ns1__loginResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__loginResponse::soap_del() deep deletes ns1__loginResponse data members, use only after ns1__loginResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__loginResponse::soap_type() returns SOAP_TYPE_ns1__loginResponse or derived type identifier
class ns1__loginResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":queryLimitSpeed is a complexType.
///
/// @note class ns1__queryLimitSpeed operations:
/// - ns1__queryLimitSpeed* soap_new_ns1__queryLimitSpeed(soap*) allocate and default initialize
/// - ns1__queryLimitSpeed* soap_new_ns1__queryLimitSpeed(soap*, int num) allocate and default initialize an array
/// - ns1__queryLimitSpeed* soap_new_req_ns1__queryLimitSpeed(soap*, ...) allocate, set required members
/// - ns1__queryLimitSpeed* soap_new_set_ns1__queryLimitSpeed(soap*, ...) allocate, set all public members
/// - ns1__queryLimitSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns1__queryLimitSpeed(soap*, ns1__queryLimitSpeed*) deserialize from a stream
/// - int soap_write_ns1__queryLimitSpeed(soap*, ns1__queryLimitSpeed*) serialize to a stream
/// - ns1__queryLimitSpeed* ns1__queryLimitSpeed::soap_dup(soap*) returns deep copy of ns1__queryLimitSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__queryLimitSpeed::soap_del() deep deletes ns1__queryLimitSpeed data members, use only after ns1__queryLimitSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__queryLimitSpeed::soap_type() returns SOAP_TYPE_ns1__queryLimitSpeed or derived type identifier
class ns1__queryLimitSpeed
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strDirectId" of type xs:string.
    std::string                          strDirectId                    1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":queryLimitSpeedResponse is a complexType.
///
/// @note class ns1__queryLimitSpeedResponse operations:
/// - ns1__queryLimitSpeedResponse* soap_new_ns1__queryLimitSpeedResponse(soap*) allocate and default initialize
/// - ns1__queryLimitSpeedResponse* soap_new_ns1__queryLimitSpeedResponse(soap*, int num) allocate and default initialize an array
/// - ns1__queryLimitSpeedResponse* soap_new_req_ns1__queryLimitSpeedResponse(soap*, ...) allocate, set required members
/// - ns1__queryLimitSpeedResponse* soap_new_set_ns1__queryLimitSpeedResponse(soap*, ...) allocate, set all public members
/// - ns1__queryLimitSpeedResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__queryLimitSpeedResponse(soap*, ns1__queryLimitSpeedResponse*) deserialize from a stream
/// - int soap_write_ns1__queryLimitSpeedResponse(soap*, ns1__queryLimitSpeedResponse*) serialize to a stream
/// - ns1__queryLimitSpeedResponse* ns1__queryLimitSpeedResponse::soap_dup(soap*) returns deep copy of ns1__queryLimitSpeedResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__queryLimitSpeedResponse::soap_del() deep deletes ns1__queryLimitSpeedResponse data members, use only after ns1__queryLimitSpeedResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__queryLimitSpeedResponse::soap_type() returns SOAP_TYPE_ns1__queryLimitSpeedResponse or derived type identifier
class ns1__queryLimitSpeedResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":queryViolateSpeed is a complexType.
///
/// @note class ns1__queryViolateSpeed operations:
/// - ns1__queryViolateSpeed* soap_new_ns1__queryViolateSpeed(soap*) allocate and default initialize
/// - ns1__queryViolateSpeed* soap_new_ns1__queryViolateSpeed(soap*, int num) allocate and default initialize an array
/// - ns1__queryViolateSpeed* soap_new_req_ns1__queryViolateSpeed(soap*, ...) allocate, set required members
/// - ns1__queryViolateSpeed* soap_new_set_ns1__queryViolateSpeed(soap*, ...) allocate, set all public members
/// - ns1__queryViolateSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns1__queryViolateSpeed(soap*, ns1__queryViolateSpeed*) deserialize from a stream
/// - int soap_write_ns1__queryViolateSpeed(soap*, ns1__queryViolateSpeed*) serialize to a stream
/// - ns1__queryViolateSpeed* ns1__queryViolateSpeed::soap_dup(soap*) returns deep copy of ns1__queryViolateSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__queryViolateSpeed::soap_del() deep deletes ns1__queryViolateSpeed data members, use only after ns1__queryViolateSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__queryViolateSpeed::soap_type() returns SOAP_TYPE_ns1__queryViolateSpeed or derived type identifier
class ns1__queryViolateSpeed
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strDirectId" of type xs:string.
    std::string                          strDirectId                    1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":queryViolateSpeedResponse is a complexType.
///
/// @note class ns1__queryViolateSpeedResponse operations:
/// - ns1__queryViolateSpeedResponse* soap_new_ns1__queryViolateSpeedResponse(soap*) allocate and default initialize
/// - ns1__queryViolateSpeedResponse* soap_new_ns1__queryViolateSpeedResponse(soap*, int num) allocate and default initialize an array
/// - ns1__queryViolateSpeedResponse* soap_new_req_ns1__queryViolateSpeedResponse(soap*, ...) allocate, set required members
/// - ns1__queryViolateSpeedResponse* soap_new_set_ns1__queryViolateSpeedResponse(soap*, ...) allocate, set all public members
/// - ns1__queryViolateSpeedResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__queryViolateSpeedResponse(soap*, ns1__queryViolateSpeedResponse*) deserialize from a stream
/// - int soap_write_ns1__queryViolateSpeedResponse(soap*, ns1__queryViolateSpeedResponse*) serialize to a stream
/// - ns1__queryViolateSpeedResponse* ns1__queryViolateSpeedResponse::soap_dup(soap*) returns deep copy of ns1__queryViolateSpeedResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__queryViolateSpeedResponse::soap_del() deep deletes ns1__queryViolateSpeedResponse data members, use only after ns1__queryViolateSpeedResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__queryViolateSpeedResponse::soap_type() returns SOAP_TYPE_ns1__queryViolateSpeedResponse or derived type identifier
class ns1__queryViolateSpeedResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":logout is a complexType.
///
/// @note class ns1__logout operations:
/// - ns1__logout* soap_new_ns1__logout(soap*) allocate and default initialize
/// - ns1__logout* soap_new_ns1__logout(soap*, int num) allocate and default initialize an array
/// - ns1__logout* soap_new_req_ns1__logout(soap*, ...) allocate, set required members
/// - ns1__logout* soap_new_set_ns1__logout(soap*, ...) allocate, set all public members
/// - ns1__logout::soap_default(soap*) default initialize members
/// - int soap_read_ns1__logout(soap*, ns1__logout*) deserialize from a stream
/// - int soap_write_ns1__logout(soap*, ns1__logout*) serialize to a stream
/// - ns1__logout* ns1__logout::soap_dup(soap*) returns deep copy of ns1__logout, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__logout::soap_del() deep deletes ns1__logout data members, use only after ns1__logout::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__logout::soap_type() returns SOAP_TYPE_ns1__logout or derived type identifier
class ns1__logout
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":logoutResponse is a complexType.
///
/// @note class ns1__logoutResponse operations:
/// - ns1__logoutResponse* soap_new_ns1__logoutResponse(soap*) allocate and default initialize
/// - ns1__logoutResponse* soap_new_ns1__logoutResponse(soap*, int num) allocate and default initialize an array
/// - ns1__logoutResponse* soap_new_req_ns1__logoutResponse(soap*, ...) allocate, set required members
/// - ns1__logoutResponse* soap_new_set_ns1__logoutResponse(soap*, ...) allocate, set all public members
/// - ns1__logoutResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__logoutResponse(soap*, ns1__logoutResponse*) deserialize from a stream
/// - int soap_write_ns1__logoutResponse(soap*, ns1__logoutResponse*) serialize to a stream
/// - ns1__logoutResponse* ns1__logoutResponse::soap_dup(soap*) returns deep copy of ns1__logoutResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__logoutResponse::soap_del() deep deletes ns1__logoutResponse data members, use only after ns1__logoutResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__logoutResponse::soap_type() returns SOAP_TYPE_ns1__logoutResponse or derived type identifier
class ns1__logoutResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":querySyncTime is a complexType.
///
/// @note class ns1__querySyncTime operations:
/// - ns1__querySyncTime* soap_new_ns1__querySyncTime(soap*) allocate and default initialize
/// - ns1__querySyncTime* soap_new_ns1__querySyncTime(soap*, int num) allocate and default initialize an array
/// - ns1__querySyncTime* soap_new_req_ns1__querySyncTime(soap*, ...) allocate, set required members
/// - ns1__querySyncTime* soap_new_set_ns1__querySyncTime(soap*, ...) allocate, set all public members
/// - ns1__querySyncTime::soap_default(soap*) default initialize members
/// - int soap_read_ns1__querySyncTime(soap*, ns1__querySyncTime*) deserialize from a stream
/// - int soap_write_ns1__querySyncTime(soap*, ns1__querySyncTime*) serialize to a stream
/// - ns1__querySyncTime* ns1__querySyncTime::soap_dup(soap*) returns deep copy of ns1__querySyncTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__querySyncTime::soap_del() deep deletes ns1__querySyncTime data members, use only after ns1__querySyncTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__querySyncTime::soap_type() returns SOAP_TYPE_ns1__querySyncTime or derived type identifier
class ns1__querySyncTime
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":querySyncTimeResponse is a complexType.
///
/// @note class ns1__querySyncTimeResponse operations:
/// - ns1__querySyncTimeResponse* soap_new_ns1__querySyncTimeResponse(soap*) allocate and default initialize
/// - ns1__querySyncTimeResponse* soap_new_ns1__querySyncTimeResponse(soap*, int num) allocate and default initialize an array
/// - ns1__querySyncTimeResponse* soap_new_req_ns1__querySyncTimeResponse(soap*, ...) allocate, set required members
/// - ns1__querySyncTimeResponse* soap_new_set_ns1__querySyncTimeResponse(soap*, ...) allocate, set all public members
/// - ns1__querySyncTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__querySyncTimeResponse(soap*, ns1__querySyncTimeResponse*) deserialize from a stream
/// - int soap_write_ns1__querySyncTimeResponse(soap*, ns1__querySyncTimeResponse*) serialize to a stream
/// - ns1__querySyncTimeResponse* ns1__querySyncTimeResponse::soap_dup(soap*) returns deep copy of ns1__querySyncTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__querySyncTimeResponse::soap_del() deep deletes ns1__querySyncTimeResponse data members, use only after ns1__querySyncTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__querySyncTimeResponse::soap_type() returns SOAP_TYPE_ns1__querySyncTimeResponse or derived type identifier
class ns1__querySyncTimeResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":writeAlarmInfo is a complexType.
///
/// @note class ns1__writeAlarmInfo operations:
/// - ns1__writeAlarmInfo* soap_new_ns1__writeAlarmInfo(soap*) allocate and default initialize
/// - ns1__writeAlarmInfo* soap_new_ns1__writeAlarmInfo(soap*, int num) allocate and default initialize an array
/// - ns1__writeAlarmInfo* soap_new_req_ns1__writeAlarmInfo(soap*, ...) allocate, set required members
/// - ns1__writeAlarmInfo* soap_new_set_ns1__writeAlarmInfo(soap*, ...) allocate, set all public members
/// - ns1__writeAlarmInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__writeAlarmInfo(soap*, ns1__writeAlarmInfo*) deserialize from a stream
/// - int soap_write_ns1__writeAlarmInfo(soap*, ns1__writeAlarmInfo*) serialize to a stream
/// - ns1__writeAlarmInfo* ns1__writeAlarmInfo::soap_dup(soap*) returns deep copy of ns1__writeAlarmInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__writeAlarmInfo::soap_del() deep deletes ns1__writeAlarmInfo data members, use only after ns1__writeAlarmInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__writeAlarmInfo::soap_type() returns SOAP_TYPE_ns1__writeAlarmInfo or derived type identifier
class ns1__writeAlarmInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDircName" of type xs:string.
    std::string                          strDircName                    1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:string.
    std::string                          strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:string.
    std::string                          strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:string.
    std::string                          strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:string.
    std::string                          strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:string.
    std::string                          strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:string.
    std::string                          strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:string.
    std::string                          strPicLocalPath7               1;	///< Required element.
/// Element "strAlarmDateTime" of type xs:string.
    std::string                          strAlarmDateTime               1;	///< Required element.
/// Element "strBriefCaseDescript" of type xs:string.
    std::string                          strBriefCaseDescript           1;	///< Required element.
/// Element "strSuspType" of type xs:string.
    std::string                          strSuspType                    1;	///< Required element.
/// Element "strSuspNo" of type xs:string.
    std::string                          strSuspNo                      1;	///< Required element.
/// Element "strAlarmLevel" of type xs:string.
    std::string                          strAlarmLevel                  1;	///< Required element.
/// Element "strPlaceId" of type xs:string.
    std::string                          strPlaceId                     1;	///< Required element.
/// Element "strPlaceName" of type xs:string.
    std::string                          strPlaceName                   1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":writeAlarmInfoResponse is a complexType.
///
/// @note class ns1__writeAlarmInfoResponse operations:
/// - ns1__writeAlarmInfoResponse* soap_new_ns1__writeAlarmInfoResponse(soap*) allocate and default initialize
/// - ns1__writeAlarmInfoResponse* soap_new_ns1__writeAlarmInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__writeAlarmInfoResponse* soap_new_req_ns1__writeAlarmInfoResponse(soap*, ...) allocate, set required members
/// - ns1__writeAlarmInfoResponse* soap_new_set_ns1__writeAlarmInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__writeAlarmInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__writeAlarmInfoResponse(soap*, ns1__writeAlarmInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__writeAlarmInfoResponse(soap*, ns1__writeAlarmInfoResponse*) serialize to a stream
/// - ns1__writeAlarmInfoResponse* ns1__writeAlarmInfoResponse::soap_dup(soap*) returns deep copy of ns1__writeAlarmInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__writeAlarmInfoResponse::soap_del() deep deletes ns1__writeAlarmInfoResponse data members, use only after ns1__writeAlarmInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__writeAlarmInfoResponse::soap_type() returns SOAP_TYPE_ns1__writeAlarmInfoResponse or derived type identifier
class ns1__writeAlarmInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteVehicleInfo is a complexType.
///
/// @note class ns1__NWriteVehicleInfo operations:
/// - ns1__NWriteVehicleInfo* soap_new_ns1__NWriteVehicleInfo(soap*) allocate and default initialize
/// - ns1__NWriteVehicleInfo* soap_new_ns1__NWriteVehicleInfo(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteVehicleInfo* soap_new_req_ns1__NWriteVehicleInfo(soap*, ...) allocate, set required members
/// - ns1__NWriteVehicleInfo* soap_new_set_ns1__NWriteVehicleInfo(soap*, ...) allocate, set all public members
/// - ns1__NWriteVehicleInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteVehicleInfo(soap*, ns1__NWriteVehicleInfo*) deserialize from a stream
/// - int soap_write_ns1__NWriteVehicleInfo(soap*, ns1__NWriteVehicleInfo*) serialize to a stream
/// - ns1__NWriteVehicleInfo* ns1__NWriteVehicleInfo::soap_dup(soap*) returns deep copy of ns1__NWriteVehicleInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteVehicleInfo::soap_del() deep deletes ns1__NWriteVehicleInfo data members, use only after ns1__NWriteVehicleInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteVehicleInfo::soap_type() returns SOAP_TYPE_ns1__NWriteVehicleInfo or derived type identifier
class ns1__NWriteVehicleInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:string.
    std::string                          strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:string.
    std::string                          strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:string.
    std::string                          strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:string.
    std::string                          strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:string.
    std::string                          strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:string.
    std::string                          strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:string.
    std::string                          strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Element "strCarColor" of type xs:string.
    std::string                          strCarColor                    1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteVehicleInfoResponse is a complexType.
///
/// @note class ns1__NWriteVehicleInfoResponse operations:
/// - ns1__NWriteVehicleInfoResponse* soap_new_ns1__NWriteVehicleInfoResponse(soap*) allocate and default initialize
/// - ns1__NWriteVehicleInfoResponse* soap_new_ns1__NWriteVehicleInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteVehicleInfoResponse* soap_new_req_ns1__NWriteVehicleInfoResponse(soap*, ...) allocate, set required members
/// - ns1__NWriteVehicleInfoResponse* soap_new_set_ns1__NWriteVehicleInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__NWriteVehicleInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteVehicleInfoResponse(soap*, ns1__NWriteVehicleInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__NWriteVehicleInfoResponse(soap*, ns1__NWriteVehicleInfoResponse*) serialize to a stream
/// - ns1__NWriteVehicleInfoResponse* ns1__NWriteVehicleInfoResponse::soap_dup(soap*) returns deep copy of ns1__NWriteVehicleInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteVehicleInfoResponse::soap_del() deep deletes ns1__NWriteVehicleInfoResponse data members, use only after ns1__NWriteVehicleInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteVehicleInfoResponse::soap_type() returns SOAP_TYPE_ns1__NWriteVehicleInfoResponse or derived type identifier
class ns1__NWriteVehicleInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteVehicleInfoEx is a complexType.
///
/// @note class ns1__NWriteVehicleInfoEx operations:
/// - ns1__NWriteVehicleInfoEx* soap_new_ns1__NWriteVehicleInfoEx(soap*) allocate and default initialize
/// - ns1__NWriteVehicleInfoEx* soap_new_ns1__NWriteVehicleInfoEx(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteVehicleInfoEx* soap_new_req_ns1__NWriteVehicleInfoEx(soap*, ...) allocate, set required members
/// - ns1__NWriteVehicleInfoEx* soap_new_set_ns1__NWriteVehicleInfoEx(soap*, ...) allocate, set all public members
/// - ns1__NWriteVehicleInfoEx::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteVehicleInfoEx(soap*, ns1__NWriteVehicleInfoEx*) deserialize from a stream
/// - int soap_write_ns1__NWriteVehicleInfoEx(soap*, ns1__NWriteVehicleInfoEx*) serialize to a stream
/// - ns1__NWriteVehicleInfoEx* ns1__NWriteVehicleInfoEx::soap_dup(soap*) returns deep copy of ns1__NWriteVehicleInfoEx, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteVehicleInfoEx::soap_del() deep deletes ns1__NWriteVehicleInfoEx data members, use only after ns1__NWriteVehicleInfoEx::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteVehicleInfoEx::soap_type() returns SOAP_TYPE_ns1__NWriteVehicleInfoEx or derived type identifier
class ns1__NWriteVehicleInfoEx
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:string.
    std::string                          strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:string.
    std::string                          strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:string.
    std::string                          strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:string.
    std::string                          strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:string.
    std::string                          strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:string.
    std::string                          strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Element "strCarColor" of type xs:string.
    std::string                          strCarColor                    1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteVehicleInfoExResponse is a complexType.
///
/// @note class ns1__NWriteVehicleInfoExResponse operations:
/// - ns1__NWriteVehicleInfoExResponse* soap_new_ns1__NWriteVehicleInfoExResponse(soap*) allocate and default initialize
/// - ns1__NWriteVehicleInfoExResponse* soap_new_ns1__NWriteVehicleInfoExResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteVehicleInfoExResponse* soap_new_req_ns1__NWriteVehicleInfoExResponse(soap*, ...) allocate, set required members
/// - ns1__NWriteVehicleInfoExResponse* soap_new_set_ns1__NWriteVehicleInfoExResponse(soap*, ...) allocate, set all public members
/// - ns1__NWriteVehicleInfoExResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteVehicleInfoExResponse(soap*, ns1__NWriteVehicleInfoExResponse*) deserialize from a stream
/// - int soap_write_ns1__NWriteVehicleInfoExResponse(soap*, ns1__NWriteVehicleInfoExResponse*) serialize to a stream
/// - ns1__NWriteVehicleInfoExResponse* ns1__NWriteVehicleInfoExResponse::soap_dup(soap*) returns deep copy of ns1__NWriteVehicleInfoExResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteVehicleInfoExResponse::soap_del() deep deletes ns1__NWriteVehicleInfoExResponse data members, use only after ns1__NWriteVehicleInfoExResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteVehicleInfoExResponse::soap_type() returns SOAP_TYPE_ns1__NWriteVehicleInfoExResponse or derived type identifier
class ns1__NWriteVehicleInfoExResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteVehicleInfo is a complexType.
///
/// @note class ns1__NSyncWriteVehicleInfo operations:
/// - ns1__NSyncWriteVehicleInfo* soap_new_ns1__NSyncWriteVehicleInfo(soap*) allocate and default initialize
/// - ns1__NSyncWriteVehicleInfo* soap_new_ns1__NSyncWriteVehicleInfo(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteVehicleInfo* soap_new_req_ns1__NSyncWriteVehicleInfo(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteVehicleInfo* soap_new_set_ns1__NSyncWriteVehicleInfo(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteVehicleInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteVehicleInfo(soap*, ns1__NSyncWriteVehicleInfo*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteVehicleInfo(soap*, ns1__NSyncWriteVehicleInfo*) serialize to a stream
/// - ns1__NSyncWriteVehicleInfo* ns1__NSyncWriteVehicleInfo::soap_dup(soap*) returns deep copy of ns1__NSyncWriteVehicleInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteVehicleInfo::soap_del() deep deletes ns1__NSyncWriteVehicleInfo data members, use only after ns1__NSyncWriteVehicleInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteVehicleInfo::soap_type() returns SOAP_TYPE_ns1__NSyncWriteVehicleInfo or derived type identifier
class ns1__NSyncWriteVehicleInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Element "strCarColor" of type xs:string.
    std::string                          strCarColor                    1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteVehicleInfoResponse is a complexType.
///
/// @note class ns1__NSyncWriteVehicleInfoResponse operations:
/// - ns1__NSyncWriteVehicleInfoResponse* soap_new_ns1__NSyncWriteVehicleInfoResponse(soap*) allocate and default initialize
/// - ns1__NSyncWriteVehicleInfoResponse* soap_new_ns1__NSyncWriteVehicleInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteVehicleInfoResponse* soap_new_req_ns1__NSyncWriteVehicleInfoResponse(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteVehicleInfoResponse* soap_new_set_ns1__NSyncWriteVehicleInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteVehicleInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteVehicleInfoResponse(soap*, ns1__NSyncWriteVehicleInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteVehicleInfoResponse(soap*, ns1__NSyncWriteVehicleInfoResponse*) serialize to a stream
/// - ns1__NSyncWriteVehicleInfoResponse* ns1__NSyncWriteVehicleInfoResponse::soap_dup(soap*) returns deep copy of ns1__NSyncWriteVehicleInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteVehicleInfoResponse::soap_del() deep deletes ns1__NSyncWriteVehicleInfoResponse data members, use only after ns1__NSyncWriteVehicleInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteVehicleInfoResponse::soap_type() returns SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse or derived type identifier
class ns1__NSyncWriteVehicleInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteFlux is a complexType.
///
/// @note class ns1__WriteFlux operations:
/// - ns1__WriteFlux* soap_new_ns1__WriteFlux(soap*) allocate and default initialize
/// - ns1__WriteFlux* soap_new_ns1__WriteFlux(soap*, int num) allocate and default initialize an array
/// - ns1__WriteFlux* soap_new_req_ns1__WriteFlux(soap*, ...) allocate, set required members
/// - ns1__WriteFlux* soap_new_set_ns1__WriteFlux(soap*, ...) allocate, set all public members
/// - ns1__WriteFlux::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteFlux(soap*, ns1__WriteFlux*) deserialize from a stream
/// - int soap_write_ns1__WriteFlux(soap*, ns1__WriteFlux*) serialize to a stream
/// - ns1__WriteFlux* ns1__WriteFlux::soap_dup(soap*) returns deep copy of ns1__WriteFlux, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteFlux::soap_del() deep deletes ns1__WriteFlux data members, use only after ns1__WriteFlux::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteFlux::soap_type() returns SOAP_TYPE_ns1__WriteFlux or derived type identifier
class ns1__WriteFlux
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "lpszDeviceId" of type xs:string.
    std::string                          lpszDeviceId                   1;	///< Required element.
/// Element "lpszDiretId" of type xs:string.
    std::string                          lpszDiretId                    1;	///< Required element.
/// Element "lpszDriveWay" of type xs:string.
    std::string                          lpszDriveWay                   1;	///< Required element.
/// Element "lpszPeriodBegin" of type xs:string.
    std::string                          lpszPeriodBegin                1;	///< Required element.
/// Element "lpszPeriodEnd" of type xs:string.
    std::string                          lpszPeriodEnd                  1;	///< Required element.
/// Element "lFlux" of type xs:long.
    LONG64                               lFlux                          1;	///< Required element.
/// Element "lpszReserve1" of type xs:string.
    std::string                          lpszReserve1                   1;	///< Required element.
/// Element "lpszReserve2" of type xs:string.
    std::string                          lpszReserve2                   1;	///< Required element.
/// Element "lpszReserve3" of type xs:string.
    std::string                          lpszReserve3                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteFluxResponse is a complexType.
///
/// @note class ns1__WriteFluxResponse operations:
/// - ns1__WriteFluxResponse* soap_new_ns1__WriteFluxResponse(soap*) allocate and default initialize
/// - ns1__WriteFluxResponse* soap_new_ns1__WriteFluxResponse(soap*, int num) allocate and default initialize an array
/// - ns1__WriteFluxResponse* soap_new_req_ns1__WriteFluxResponse(soap*, ...) allocate, set required members
/// - ns1__WriteFluxResponse* soap_new_set_ns1__WriteFluxResponse(soap*, ...) allocate, set all public members
/// - ns1__WriteFluxResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteFluxResponse(soap*, ns1__WriteFluxResponse*) deserialize from a stream
/// - int soap_write_ns1__WriteFluxResponse(soap*, ns1__WriteFluxResponse*) serialize to a stream
/// - ns1__WriteFluxResponse* ns1__WriteFluxResponse::soap_dup(soap*) returns deep copy of ns1__WriteFluxResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteFluxResponse::soap_del() deep deletes ns1__WriteFluxResponse data members, use only after ns1__WriteFluxResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteFluxResponse::soap_type() returns SOAP_TYPE_ns1__WriteFluxResponse or derived type identifier
class ns1__WriteFluxResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteDeviceStatus is a complexType.
///
/// @note class ns1__NWriteDeviceStatus operations:
/// - ns1__NWriteDeviceStatus* soap_new_ns1__NWriteDeviceStatus(soap*) allocate and default initialize
/// - ns1__NWriteDeviceStatus* soap_new_ns1__NWriteDeviceStatus(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteDeviceStatus* soap_new_req_ns1__NWriteDeviceStatus(soap*, ...) allocate, set required members
/// - ns1__NWriteDeviceStatus* soap_new_set_ns1__NWriteDeviceStatus(soap*, ...) allocate, set all public members
/// - ns1__NWriteDeviceStatus::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteDeviceStatus(soap*, ns1__NWriteDeviceStatus*) deserialize from a stream
/// - int soap_write_ns1__NWriteDeviceStatus(soap*, ns1__NWriteDeviceStatus*) serialize to a stream
/// - ns1__NWriteDeviceStatus* ns1__NWriteDeviceStatus::soap_dup(soap*) returns deep copy of ns1__NWriteDeviceStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteDeviceStatus::soap_del() deep deletes ns1__NWriteDeviceStatus data members, use only after ns1__NWriteDeviceStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteDeviceStatus::soap_type() returns SOAP_TYPE_ns1__NWriteDeviceStatus or derived type identifier
class ns1__NWriteDeviceStatus
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehDetectorStatus" of type xs:string.
    std::string                          strVehDetectorStatus           1;	///< Required element.
/// Element "strVideoDeviceStatus" of type xs:string.
    std::string                          strVideoDeviceStatus           1;	///< Required element.
/// Element "strGatherCardStatus" of type xs:string.
    std::string                          strGatherCardStatus            1;	///< Required element.
/// Element "strTemperature" of type xs:string.
    std::string                          strTemperature                 1;	///< Required element.
/// Element "strReserveOne" of type xs:string.
    std::string                          strReserveOne                  1;	///< Required element.
/// Element "strReserveTwo" of type xs:string.
    std::string                          strReserveTwo                  1;	///< Required element.
/// Element "strReserveThree" of type xs:string.
    std::string                          strReserveThree                1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWriteDeviceStatusResponse is a complexType.
///
/// @note class ns1__NWriteDeviceStatusResponse operations:
/// - ns1__NWriteDeviceStatusResponse* soap_new_ns1__NWriteDeviceStatusResponse(soap*) allocate and default initialize
/// - ns1__NWriteDeviceStatusResponse* soap_new_ns1__NWriteDeviceStatusResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NWriteDeviceStatusResponse* soap_new_req_ns1__NWriteDeviceStatusResponse(soap*, ...) allocate, set required members
/// - ns1__NWriteDeviceStatusResponse* soap_new_set_ns1__NWriteDeviceStatusResponse(soap*, ...) allocate, set all public members
/// - ns1__NWriteDeviceStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWriteDeviceStatusResponse(soap*, ns1__NWriteDeviceStatusResponse*) deserialize from a stream
/// - int soap_write_ns1__NWriteDeviceStatusResponse(soap*, ns1__NWriteDeviceStatusResponse*) serialize to a stream
/// - ns1__NWriteDeviceStatusResponse* ns1__NWriteDeviceStatusResponse::soap_dup(soap*) returns deep copy of ns1__NWriteDeviceStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWriteDeviceStatusResponse::soap_del() deep deletes ns1__NWriteDeviceStatusResponse data members, use only after ns1__NWriteDeviceStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWriteDeviceStatusResponse::soap_type() returns SOAP_TYPE_ns1__NWriteDeviceStatusResponse or derived type identifier
class ns1__NWriteDeviceStatusResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteMobileEPVInfo is a complexType.
///
/// @note class ns1__NSyncWriteMobileEPVInfo operations:
/// - ns1__NSyncWriteMobileEPVInfo* soap_new_ns1__NSyncWriteMobileEPVInfo(soap*) allocate and default initialize
/// - ns1__NSyncWriteMobileEPVInfo* soap_new_ns1__NSyncWriteMobileEPVInfo(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteMobileEPVInfo* soap_new_req_ns1__NSyncWriteMobileEPVInfo(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteMobileEPVInfo* soap_new_set_ns1__NSyncWriteMobileEPVInfo(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteMobileEPVInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteMobileEPVInfo(soap*, ns1__NSyncWriteMobileEPVInfo*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteMobileEPVInfo(soap*, ns1__NSyncWriteMobileEPVInfo*) serialize to a stream
/// - ns1__NSyncWriteMobileEPVInfo* ns1__NSyncWriteMobileEPVInfo::soap_dup(soap*) returns deep copy of ns1__NSyncWriteMobileEPVInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteMobileEPVInfo::soap_del() deep deletes ns1__NSyncWriteMobileEPVInfo data members, use only after ns1__NSyncWriteMobileEPVInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteMobileEPVInfo::soap_type() returns SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo or derived type identifier
class ns1__NSyncWriteMobileEPVInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Element "strVioPlaceId" of type xs:string.
    std::string                          strVioPlaceId                  1;	///< Required element.
/// Element "strVioPlaceName" of type xs:string.
    std::string                          strVioPlaceName                1;	///< Required element.
/// Element "strCollectDept" of type xs:string.
    std::string                          strCollectDept                 1;	///< Required element.
/// Element "strDataSrc" of type xs:string.
    std::string                          strDataSrc                     1;	///< Required element.
/// Element "lRoadKLMS" of type xs:long.
    LONG64                               lRoadKLMS                      1;	///< Required element.
/// Element "lRoadMs" of type xs:long.
    LONG64                               lRoadMs                        1;	///< Required element.
/// Element "strCarColor" of type xs:string.
    std::string                          strCarColor                    1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteMobileEPVInfoResponse is a complexType.
///
/// @note class ns1__NSyncWriteMobileEPVInfoResponse operations:
/// - ns1__NSyncWriteMobileEPVInfoResponse* soap_new_ns1__NSyncWriteMobileEPVInfoResponse(soap*) allocate and default initialize
/// - ns1__NSyncWriteMobileEPVInfoResponse* soap_new_ns1__NSyncWriteMobileEPVInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteMobileEPVInfoResponse* soap_new_req_ns1__NSyncWriteMobileEPVInfoResponse(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteMobileEPVInfoResponse* soap_new_set_ns1__NSyncWriteMobileEPVInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteMobileEPVInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteMobileEPVInfoResponse(soap*, ns1__NSyncWriteMobileEPVInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteMobileEPVInfoResponse(soap*, ns1__NSyncWriteMobileEPVInfoResponse*) serialize to a stream
/// - ns1__NSyncWriteMobileEPVInfoResponse* ns1__NSyncWriteMobileEPVInfoResponse::soap_dup(soap*) returns deep copy of ns1__NSyncWriteMobileEPVInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteMobileEPVInfoResponse::soap_del() deep deletes ns1__NSyncWriteMobileEPVInfoResponse data members, use only after ns1__NSyncWriteMobileEPVInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteMobileEPVInfoResponse::soap_type() returns SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse or derived type identifier
class ns1__NSyncWriteMobileEPVInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteVioInfo is a complexType.
///
/// @note class ns1__NSyncWriteVioInfo operations:
/// - ns1__NSyncWriteVioInfo* soap_new_ns1__NSyncWriteVioInfo(soap*) allocate and default initialize
/// - ns1__NSyncWriteVioInfo* soap_new_ns1__NSyncWriteVioInfo(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteVioInfo* soap_new_req_ns1__NSyncWriteVioInfo(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteVioInfo* soap_new_set_ns1__NSyncWriteVioInfo(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteVioInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteVioInfo(soap*, ns1__NSyncWriteVioInfo*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteVioInfo(soap*, ns1__NSyncWriteVioInfo*) serialize to a stream
/// - ns1__NSyncWriteVioInfo* ns1__NSyncWriteVioInfo::soap_dup(soap*) returns deep copy of ns1__NSyncWriteVioInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteVioInfo::soap_del() deep deletes ns1__NSyncWriteVioInfo data members, use only after ns1__NSyncWriteVioInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteVioInfo::soap_type() returns SOAP_TYPE_ns1__NSyncWriteVioInfo or derived type identifier
class ns1__NSyncWriteVioInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strVehicleId" of type xs:string.
    std::string                          strVehicleId                   1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strLicense" of type xs:string.
    std::string                          strLicense                     1;	///< Required element.
/// Element "strLicenseType" of type xs:string.
    std::string                          strLicenseType                 1;	///< Required element.
/// Element "strPassDateTime" of type xs:string.
    std::string                          strPassDateTime                1;	///< Required element.
/// Element "strRedLightBeginTime" of type xs:string.
    std::string                          strRedLightBeginTime           1;	///< Required element.
/// Element "strRedLightLast" of type xs:string.
    std::string                          strRedLightLast                1;	///< Required element.
/// Element "lSpeed" of type xs:long.
    LONG64                               lSpeed                         1;	///< Required element.
/// Element "lLargeLimitSpeed" of type xs:long.
    LONG64                               lLargeLimitSpeed               1;	///< Required element.
/// Element "lMiniLimitSpeed" of type xs:long.
    LONG64                               lMiniLimitSpeed                1;	///< Required element.
/// Element "strViolationType" of type xs:string.
    std::string                          strViolationType               1;	///< Required element.
/// Element "strViolationType2" of type xs:string.
    std::string                          strViolationType2              1;	///< Required element.
/// Element "lCarLength" of type xs:long.
    LONG64                               lCarLength                     1;	///< Required element.
/// Element "strLicenseColor" of type xs:string.
    std::string                          strLicenseColor                1;	///< Required element.
/// Element "strCarType" of type xs:string.
    std::string                          strCarType                     1;	///< Required element.
/// Element "strPicLocalPath1" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath1               1;	///< Required element.
/// Element "strPicLocalPath2" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath2               1;	///< Required element.
/// Element "strPicLocalPath3" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath3               1;	///< Required element.
/// Element "strPicLocalPath4" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath4               1;	///< Required element.
/// Element "strPicLocalPath5" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath5               1;	///< Required element.
/// Element "strPicLocalPath6" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath6               1;	///< Required element.
/// Element "strPicLocalPath7" of type xs:base64Binary.
    xsd__base64Binary                    strPicLocalPath7               1;	///< Required element.
/// Element "strPicRemotePath" of type xs:string.
    std::string                          strPicRemotePath               1;	///< Required element.
/// Element "strViolate" of type xs:string.
    std::string                          strViolate                     1;	///< Required element.
/// Element "strSendType" of type xs:string.
    std::string                          strSendType                    1;	///< Required element.
/// Element "strVioPlaceId" of type xs:string.
    std::string                          strVioPlaceId                  1;	///< Required element.
/// Element "strVioPlaceName" of type xs:string.
    std::string                          strVioPlaceName                1;	///< Required element.
/// Element "strCollectDept" of type xs:string.
    std::string                          strCollectDept                 1;	///< Required element.
/// Element "strDataSrc" of type xs:string.
    std::string                          strDataSrc                     1;	///< Required element.
/// Element "lRoadKLMS" of type xs:long.
    LONG64                               lRoadKLMS                      1;	///< Required element.
/// Element "lRoadMs" of type xs:long.
    LONG64                               lRoadMs                        1;	///< Required element.
/// Element "strCarColor" of type xs:string.
    std::string                          strCarColor                    1;	///< Required element.
/// Element "strPassDateTime2" of type xs:string.
    std::string                          strPassDateTime2               1;	///< Required element.
/// Element "strVioPlaceId2" of type xs:string.
    std::string                          strVioPlaceId2                 1;	///< Required element.
/// Element "strVioPlaceName2" of type xs:string.
    std::string                          strVioPlaceName2               1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NSyncWriteVioInfoResponse is a complexType.
///
/// @note class ns1__NSyncWriteVioInfoResponse operations:
/// - ns1__NSyncWriteVioInfoResponse* soap_new_ns1__NSyncWriteVioInfoResponse(soap*) allocate and default initialize
/// - ns1__NSyncWriteVioInfoResponse* soap_new_ns1__NSyncWriteVioInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NSyncWriteVioInfoResponse* soap_new_req_ns1__NSyncWriteVioInfoResponse(soap*, ...) allocate, set required members
/// - ns1__NSyncWriteVioInfoResponse* soap_new_set_ns1__NSyncWriteVioInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__NSyncWriteVioInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NSyncWriteVioInfoResponse(soap*, ns1__NSyncWriteVioInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__NSyncWriteVioInfoResponse(soap*, ns1__NSyncWriteVioInfoResponse*) serialize to a stream
/// - ns1__NSyncWriteVioInfoResponse* ns1__NSyncWriteVioInfoResponse::soap_dup(soap*) returns deep copy of ns1__NSyncWriteVioInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NSyncWriteVioInfoResponse::soap_del() deep deletes ns1__NSyncWriteVioInfoResponse data members, use only after ns1__NSyncWriteVioInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NSyncWriteVioInfoResponse::soap_type() returns SOAP_TYPE_ns1__NSyncWriteVioInfoResponse or derived type identifier
class ns1__NSyncWriteVioInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWritePassStat is a complexType.
///
/// @note class ns1__NWritePassStat operations:
/// - ns1__NWritePassStat* soap_new_ns1__NWritePassStat(soap*) allocate and default initialize
/// - ns1__NWritePassStat* soap_new_ns1__NWritePassStat(soap*, int num) allocate and default initialize an array
/// - ns1__NWritePassStat* soap_new_req_ns1__NWritePassStat(soap*, ...) allocate, set required members
/// - ns1__NWritePassStat* soap_new_set_ns1__NWritePassStat(soap*, ...) allocate, set all public members
/// - ns1__NWritePassStat::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWritePassStat(soap*, ns1__NWritePassStat*) deserialize from a stream
/// - int soap_write_ns1__NWritePassStat(soap*, ns1__NWritePassStat*) serialize to a stream
/// - ns1__NWritePassStat* ns1__NWritePassStat::soap_dup(soap*) returns deep copy of ns1__NWritePassStat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWritePassStat::soap_del() deep deletes ns1__NWritePassStat data members, use only after ns1__NWritePassStat::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWritePassStat::soap_type() returns SOAP_TYPE_ns1__NWritePassStat or derived type identifier
class ns1__NWritePassStat
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "strDeviceId" of type xs:string.
    std::string                          strDeviceId                    1;	///< Required element.
/// Element "strDeviceType" of type xs:string.
    std::string                          strDeviceType                  1;	///< Required element.
/// Element "strDirectionId" of type xs:string.
    std::string                          strDirectionId                 1;	///< Required element.
/// Element "strDriveWayId" of type xs:string.
    std::string                          strDriveWayId                  1;	///< Required element.
/// Element "strPassStatTime" of type xs:string.
    std::string                          strPassStatTime                1;	///< Required element.
/// Element "lPassCount" of type xs:long.
    LONG64                               lPassCount                     1;	///< Required element.
/// Element "lSuccessCount" of type xs:long.
    LONG64                               lSuccessCount                  1;	///< Required element.
/// Element "lTimelyCount" of type xs:long.
    LONG64                               lTimelyCount                   1;	///< Required element.
/// Element "strReserve1" of type xs:string.
    std::string                          strReserve1                    1;	///< Required element.
/// Element "strReserve2" of type xs:string.
    std::string                          strReserve2                    1;	///< Required element.
/// Element "strReserve3" of type xs:string.
    std::string                          strReserve3                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":NWritePassStatResponse is a complexType.
///
/// @note class ns1__NWritePassStatResponse operations:
/// - ns1__NWritePassStatResponse* soap_new_ns1__NWritePassStatResponse(soap*) allocate and default initialize
/// - ns1__NWritePassStatResponse* soap_new_ns1__NWritePassStatResponse(soap*, int num) allocate and default initialize an array
/// - ns1__NWritePassStatResponse* soap_new_req_ns1__NWritePassStatResponse(soap*, ...) allocate, set required members
/// - ns1__NWritePassStatResponse* soap_new_set_ns1__NWritePassStatResponse(soap*, ...) allocate, set all public members
/// - ns1__NWritePassStatResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NWritePassStatResponse(soap*, ns1__NWritePassStatResponse*) deserialize from a stream
/// - int soap_write_ns1__NWritePassStatResponse(soap*, ns1__NWritePassStatResponse*) serialize to a stream
/// - ns1__NWritePassStatResponse* ns1__NWritePassStatResponse::soap_dup(soap*) returns deep copy of ns1__NWritePassStatResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NWritePassStatResponse::soap_del() deep deletes ns1__NWritePassStatResponse data members, use only after ns1__NWritePassStatResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NWritePassStatResponse::soap_type() returns SOAP_TYPE_ns1__NWritePassStatResponse or derived type identifier
class ns1__NWritePassStatResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":SyncWriteVehPassInfo is a complexType.
///
/// @note class ns1__SyncWriteVehPassInfo operations:
/// - ns1__SyncWriteVehPassInfo* soap_new_ns1__SyncWriteVehPassInfo(soap*) allocate and default initialize
/// - ns1__SyncWriteVehPassInfo* soap_new_ns1__SyncWriteVehPassInfo(soap*, int num) allocate and default initialize an array
/// - ns1__SyncWriteVehPassInfo* soap_new_req_ns1__SyncWriteVehPassInfo(soap*, ...) allocate, set required members
/// - ns1__SyncWriteVehPassInfo* soap_new_set_ns1__SyncWriteVehPassInfo(soap*, ...) allocate, set all public members
/// - ns1__SyncWriteVehPassInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SyncWriteVehPassInfo(soap*, ns1__SyncWriteVehPassInfo*) deserialize from a stream
/// - int soap_write_ns1__SyncWriteVehPassInfo(soap*, ns1__SyncWriteVehPassInfo*) serialize to a stream
/// - ns1__SyncWriteVehPassInfo* ns1__SyncWriteVehPassInfo::soap_dup(soap*) returns deep copy of ns1__SyncWriteVehPassInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SyncWriteVehPassInfo::soap_del() deep deletes ns1__SyncWriteVehPassInfo data members, use only after ns1__SyncWriteVehPassInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SyncWriteVehPassInfo::soap_type() returns SOAP_TYPE_ns1__SyncWriteVehPassInfo or derived type identifier
class ns1__SyncWriteVehPassInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "xmlParam" of type xs:string.
    std::string                          xmlParam                       1;	///< Required element.
/// Element "pic1" of type xs:base64Binary.
    xsd__base64Binary                    pic1                           1;	///< Required element.
/// Element "pic2" of type xs:base64Binary.
    xsd__base64Binary                    pic2                           1;	///< Required element.
/// Element "pic3" of type xs:base64Binary.
    xsd__base64Binary                    pic3                           1;	///< Required element.
/// Element "pic4" of type xs:base64Binary.
    xsd__base64Binary                    pic4                           1;	///< Required element.
/// Element "pic5" of type xs:base64Binary.
    xsd__base64Binary                    pic5                           1;	///< Required element.
/// Element "pic6" of type xs:base64Binary.
    xsd__base64Binary                    pic6                           1;	///< Required element.
/// Element "video" of type xs:base64Binary.
    xsd__base64Binary                    video                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":SyncWriteVehPassInfoResponse is a complexType.
///
/// @note class ns1__SyncWriteVehPassInfoResponse operations:
/// - ns1__SyncWriteVehPassInfoResponse* soap_new_ns1__SyncWriteVehPassInfoResponse(soap*) allocate and default initialize
/// - ns1__SyncWriteVehPassInfoResponse* soap_new_ns1__SyncWriteVehPassInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__SyncWriteVehPassInfoResponse* soap_new_req_ns1__SyncWriteVehPassInfoResponse(soap*, ...) allocate, set required members
/// - ns1__SyncWriteVehPassInfoResponse* soap_new_set_ns1__SyncWriteVehPassInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__SyncWriteVehPassInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SyncWriteVehPassInfoResponse(soap*, ns1__SyncWriteVehPassInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__SyncWriteVehPassInfoResponse(soap*, ns1__SyncWriteVehPassInfoResponse*) serialize to a stream
/// - ns1__SyncWriteVehPassInfoResponse* ns1__SyncWriteVehPassInfoResponse::soap_dup(soap*) returns deep copy of ns1__SyncWriteVehPassInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SyncWriteVehPassInfoResponse::soap_del() deep deletes ns1__SyncWriteVehPassInfoResponse data members, use only after ns1__SyncWriteVehPassInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SyncWriteVehPassInfoResponse::soap_type() returns SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse or derived type identifier
class ns1__SyncWriteVehPassInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteVehPassInfo is a complexType.
///
/// @note class ns1__WriteVehPassInfo operations:
/// - ns1__WriteVehPassInfo* soap_new_ns1__WriteVehPassInfo(soap*) allocate and default initialize
/// - ns1__WriteVehPassInfo* soap_new_ns1__WriteVehPassInfo(soap*, int num) allocate and default initialize an array
/// - ns1__WriteVehPassInfo* soap_new_req_ns1__WriteVehPassInfo(soap*, ...) allocate, set required members
/// - ns1__WriteVehPassInfo* soap_new_set_ns1__WriteVehPassInfo(soap*, ...) allocate, set all public members
/// - ns1__WriteVehPassInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteVehPassInfo(soap*, ns1__WriteVehPassInfo*) deserialize from a stream
/// - int soap_write_ns1__WriteVehPassInfo(soap*, ns1__WriteVehPassInfo*) serialize to a stream
/// - ns1__WriteVehPassInfo* ns1__WriteVehPassInfo::soap_dup(soap*) returns deep copy of ns1__WriteVehPassInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteVehPassInfo::soap_del() deep deletes ns1__WriteVehPassInfo data members, use only after ns1__WriteVehPassInfo::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteVehPassInfo::soap_type() returns SOAP_TYPE_ns1__WriteVehPassInfo or derived type identifier
class ns1__WriteVehPassInfo
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "xmlParam" of type xs:string.
    std::string                          xmlParam                       1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteVehPassInfoResponse is a complexType.
///
/// @note class ns1__WriteVehPassInfoResponse operations:
/// - ns1__WriteVehPassInfoResponse* soap_new_ns1__WriteVehPassInfoResponse(soap*) allocate and default initialize
/// - ns1__WriteVehPassInfoResponse* soap_new_ns1__WriteVehPassInfoResponse(soap*, int num) allocate and default initialize an array
/// - ns1__WriteVehPassInfoResponse* soap_new_req_ns1__WriteVehPassInfoResponse(soap*, ...) allocate, set required members
/// - ns1__WriteVehPassInfoResponse* soap_new_set_ns1__WriteVehPassInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__WriteVehPassInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteVehPassInfoResponse(soap*, ns1__WriteVehPassInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__WriteVehPassInfoResponse(soap*, ns1__WriteVehPassInfoResponse*) serialize to a stream
/// - ns1__WriteVehPassInfoResponse* ns1__WriteVehPassInfoResponse::soap_dup(soap*) returns deep copy of ns1__WriteVehPassInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteVehPassInfoResponse::soap_del() deep deletes ns1__WriteVehPassInfoResponse data members, use only after ns1__WriteVehPassInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteVehPassInfoResponse::soap_type() returns SOAP_TYPE_ns1__WriteVehPassInfoResponse or derived type identifier
class ns1__WriteVehPassInfoResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":SyncWriteAreaSpeed is a complexType.
///
/// @note class ns1__SyncWriteAreaSpeed operations:
/// - ns1__SyncWriteAreaSpeed* soap_new_ns1__SyncWriteAreaSpeed(soap*) allocate and default initialize
/// - ns1__SyncWriteAreaSpeed* soap_new_ns1__SyncWriteAreaSpeed(soap*, int num) allocate and default initialize an array
/// - ns1__SyncWriteAreaSpeed* soap_new_req_ns1__SyncWriteAreaSpeed(soap*, ...) allocate, set required members
/// - ns1__SyncWriteAreaSpeed* soap_new_set_ns1__SyncWriteAreaSpeed(soap*, ...) allocate, set all public members
/// - ns1__SyncWriteAreaSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SyncWriteAreaSpeed(soap*, ns1__SyncWriteAreaSpeed*) deserialize from a stream
/// - int soap_write_ns1__SyncWriteAreaSpeed(soap*, ns1__SyncWriteAreaSpeed*) serialize to a stream
/// - ns1__SyncWriteAreaSpeed* ns1__SyncWriteAreaSpeed::soap_dup(soap*) returns deep copy of ns1__SyncWriteAreaSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SyncWriteAreaSpeed::soap_del() deep deletes ns1__SyncWriteAreaSpeed data members, use only after ns1__SyncWriteAreaSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SyncWriteAreaSpeed::soap_type() returns SOAP_TYPE_ns1__SyncWriteAreaSpeed or derived type identifier
class ns1__SyncWriteAreaSpeed
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "xmlParam" of type xs:string.
    std::string                          xmlParam                       1;	///< Required element.
/// Element "pic1" of type xs:base64Binary.
    xsd__base64Binary                    pic1                           1;	///< Required element.
/// Element "pic2" of type xs:base64Binary.
    xsd__base64Binary                    pic2                           1;	///< Required element.
/// Element "pic3" of type xs:base64Binary.
    xsd__base64Binary                    pic3                           1;	///< Required element.
/// Element "pic4" of type xs:base64Binary.
    xsd__base64Binary                    pic4                           1;	///< Required element.
/// Element "pic5" of type xs:base64Binary.
    xsd__base64Binary                    pic5                           1;	///< Required element.
/// Element "pic6" of type xs:base64Binary.
    xsd__base64Binary                    pic6                           1;	///< Required element.
/// Element "video" of type xs:base64Binary.
    xsd__base64Binary                    video                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":SyncWriteAreaSpeedResponse is a complexType.
///
/// @note class ns1__SyncWriteAreaSpeedResponse operations:
/// - ns1__SyncWriteAreaSpeedResponse* soap_new_ns1__SyncWriteAreaSpeedResponse(soap*) allocate and default initialize
/// - ns1__SyncWriteAreaSpeedResponse* soap_new_ns1__SyncWriteAreaSpeedResponse(soap*, int num) allocate and default initialize an array
/// - ns1__SyncWriteAreaSpeedResponse* soap_new_req_ns1__SyncWriteAreaSpeedResponse(soap*, ...) allocate, set required members
/// - ns1__SyncWriteAreaSpeedResponse* soap_new_set_ns1__SyncWriteAreaSpeedResponse(soap*, ...) allocate, set all public members
/// - ns1__SyncWriteAreaSpeedResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SyncWriteAreaSpeedResponse(soap*, ns1__SyncWriteAreaSpeedResponse*) deserialize from a stream
/// - int soap_write_ns1__SyncWriteAreaSpeedResponse(soap*, ns1__SyncWriteAreaSpeedResponse*) serialize to a stream
/// - ns1__SyncWriteAreaSpeedResponse* ns1__SyncWriteAreaSpeedResponse::soap_dup(soap*) returns deep copy of ns1__SyncWriteAreaSpeedResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SyncWriteAreaSpeedResponse::soap_del() deep deletes ns1__SyncWriteAreaSpeedResponse data members, use only after ns1__SyncWriteAreaSpeedResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SyncWriteAreaSpeedResponse::soap_type() returns SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse or derived type identifier
class ns1__SyncWriteAreaSpeedResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteAreaSpeed is a complexType.
///
/// @note class ns1__WriteAreaSpeed operations:
/// - ns1__WriteAreaSpeed* soap_new_ns1__WriteAreaSpeed(soap*) allocate and default initialize
/// - ns1__WriteAreaSpeed* soap_new_ns1__WriteAreaSpeed(soap*, int num) allocate and default initialize an array
/// - ns1__WriteAreaSpeed* soap_new_req_ns1__WriteAreaSpeed(soap*, ...) allocate, set required members
/// - ns1__WriteAreaSpeed* soap_new_set_ns1__WriteAreaSpeed(soap*, ...) allocate, set all public members
/// - ns1__WriteAreaSpeed::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteAreaSpeed(soap*, ns1__WriteAreaSpeed*) deserialize from a stream
/// - int soap_write_ns1__WriteAreaSpeed(soap*, ns1__WriteAreaSpeed*) serialize to a stream
/// - ns1__WriteAreaSpeed* ns1__WriteAreaSpeed::soap_dup(soap*) returns deep copy of ns1__WriteAreaSpeed, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteAreaSpeed::soap_del() deep deletes ns1__WriteAreaSpeed data members, use only after ns1__WriteAreaSpeed::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteAreaSpeed::soap_type() returns SOAP_TYPE_ns1__WriteAreaSpeed or derived type identifier
class ns1__WriteAreaSpeed
{ public:
/// Element "sid" of type xs:string.
    std::string                          sid                            1;	///< Required element.
/// Element "xmlParam" of type xs:string.
    std::string                          xmlParam                       1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://server.cdt.com":WriteAreaSpeedResponse is a complexType.
///
/// @note class ns1__WriteAreaSpeedResponse operations:
/// - ns1__WriteAreaSpeedResponse* soap_new_ns1__WriteAreaSpeedResponse(soap*) allocate and default initialize
/// - ns1__WriteAreaSpeedResponse* soap_new_ns1__WriteAreaSpeedResponse(soap*, int num) allocate and default initialize an array
/// - ns1__WriteAreaSpeedResponse* soap_new_req_ns1__WriteAreaSpeedResponse(soap*, ...) allocate, set required members
/// - ns1__WriteAreaSpeedResponse* soap_new_set_ns1__WriteAreaSpeedResponse(soap*, ...) allocate, set all public members
/// - ns1__WriteAreaSpeedResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WriteAreaSpeedResponse(soap*, ns1__WriteAreaSpeedResponse*) deserialize from a stream
/// - int soap_write_ns1__WriteAreaSpeedResponse(soap*, ns1__WriteAreaSpeedResponse*) serialize to a stream
/// - ns1__WriteAreaSpeedResponse* ns1__WriteAreaSpeedResponse::soap_dup(soap*) returns deep copy of ns1__WriteAreaSpeedResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WriteAreaSpeedResponse::soap_del() deep deletes ns1__WriteAreaSpeedResponse data members, use only after ns1__WriteAreaSpeedResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WriteAreaSpeedResponse::soap_type() returns SOAP_TYPE_ns1__WriteAreaSpeedResponse or derived type identifier
class ns1__WriteAreaSpeedResponse
{ public:
/// Element "return" of type xs:string.
    std::string*                         return_                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://server.cdt.com                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://server.cdt.com":Exception of type "http://server.cdt.com":Exception.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":syncWriteVehicleInfo of type "http://server.cdt.com":syncWriteVehicleInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":syncWriteVehicleInfoResponse of type "http://server.cdt.com":syncWriteVehicleInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":writeVehicleInfo of type "http://server.cdt.com":writeVehicleInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":writeVehicleInfoResponse of type "http://server.cdt.com":writeVehicleInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":login of type "http://server.cdt.com":login.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":loginResponse of type "http://server.cdt.com":loginResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":queryLimitSpeed of type "http://server.cdt.com":queryLimitSpeed.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":queryLimitSpeedResponse of type "http://server.cdt.com":queryLimitSpeedResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":queryViolateSpeed of type "http://server.cdt.com":queryViolateSpeed.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":queryViolateSpeedResponse of type "http://server.cdt.com":queryViolateSpeedResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":logout of type "http://server.cdt.com":logout.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":logoutResponse of type "http://server.cdt.com":logoutResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":querySyncTime of type "http://server.cdt.com":querySyncTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":querySyncTimeResponse of type "http://server.cdt.com":querySyncTimeResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":writeAlarmInfo of type "http://server.cdt.com":writeAlarmInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":writeAlarmInfoResponse of type "http://server.cdt.com":writeAlarmInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteVehicleInfo of type "http://server.cdt.com":NWriteVehicleInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteVehicleInfoEx of type "http://server.cdt.com":NWriteVehicleInfoEx.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteVehicleInfoExResponse of type "http://server.cdt.com":NWriteVehicleInfoExResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteVehicleInfoResponse of type "http://server.cdt.com":NWriteVehicleInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteVehicleInfo of type "http://server.cdt.com":NSyncWriteVehicleInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteVehicleInfoResponse of type "http://server.cdt.com":NSyncWriteVehicleInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteFlux of type "http://server.cdt.com":WriteFlux.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteFluxResponse of type "http://server.cdt.com":WriteFluxResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteDeviceStatus of type "http://server.cdt.com":NWriteDeviceStatus.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWriteDeviceStatusResponse of type "http://server.cdt.com":NWriteDeviceStatusResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteMobileEPVInfo of type "http://server.cdt.com":NSyncWriteMobileEPVInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteMobileEPVInfoResponse of type "http://server.cdt.com":NSyncWriteMobileEPVInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteVioInfo of type "http://server.cdt.com":NSyncWriteVioInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NSyncWriteVioInfoResponse of type "http://server.cdt.com":NSyncWriteVioInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWritePassStat of type "http://server.cdt.com":NWritePassStat.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":NWritePassStatResponse of type "http://server.cdt.com":NWritePassStatResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":SyncWriteVehPassInfo of type "http://server.cdt.com":SyncWriteVehPassInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":SyncWriteVehPassInfoResponse of type "http://server.cdt.com":SyncWriteVehPassInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteVehPassInfo of type "http://server.cdt.com":WriteVehPassInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteVehPassInfoResponse of type "http://server.cdt.com":WriteVehPassInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":SyncWriteAreaSpeed of type "http://server.cdt.com":SyncWriteAreaSpeed.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":SyncWriteAreaSpeedResponse of type "http://server.cdt.com":SyncWriteAreaSpeedResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteAreaSpeed of type "http://server.cdt.com":WriteAreaSpeed.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://server.cdt.com":WriteAreaSpeedResponse of type "http://server.cdt.com":WriteAreaSpeedResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://server.cdt.com                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	HTSAPServerSoapBinding 
//gsoap ns1  service type:	HTSAPServer 
//gsoap ns1  service port:	http://192.168.0.21:7081/HTServer/services/HTSAPServer 
//gsoap ns1  service namespace:	http://server.cdt.com 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref HTSAPServerSoapBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page HTSAPServerSoapBinding Binding "HTSAPServerSoapBinding"

@section HTSAPServerSoapBinding_operations Operations of Binding "HTSAPServerSoapBinding"

  - @ref __ns1__syncWriteVehicleInfo

  - @ref __ns1__writeVehicleInfo

  - @ref __ns1__login

  - @ref __ns1__queryLimitSpeed

  - @ref __ns1__queryViolateSpeed

  - @ref __ns1__logout

  - @ref __ns1__querySyncTime

  - @ref __ns1__writeAlarmInfo

  - @ref __ns1__NWriteVehicleInfo

  - @ref __ns1__NWriteVehicleInfoEx

  - @ref __ns1__NSyncWriteVehicleInfo

  - @ref __ns1__WriteFlux

  - @ref __ns1__NWriteDeviceStatus

  - @ref __ns1__NSyncWriteMobileEPVInfo

  - @ref __ns1__NSyncWriteVioInfo

  - @ref __ns1__NWritePassStat

  - @ref __ns1__SyncWriteVehPassInfo

  - @ref __ns1__WriteVehPassInfo

  - @ref __ns1__SyncWriteAreaSpeed

  - @ref __ns1__WriteAreaSpeed

@section HTSAPServerSoapBinding_ports Default endpoints of Binding "HTSAPServerSoapBinding"

  - http://192.168.0.21:7081/HTServer/services/HTSAPServer

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   HTSAPServerSoapBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__syncWriteVehicleInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__syncWriteVehicleInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__syncWriteVehicleInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__syncWriteVehicleInfo*          ns1__syncWriteVehicleInfo_,
    // output parameters:
    ns1__syncWriteVehicleInfoResponse  &ns1__syncWriteVehicleInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__syncWriteVehicleInfo(
    struct soap *soap,
    // input parameters:
    ns1__syncWriteVehicleInfo*          ns1__syncWriteVehicleInfo_,
    // output parameters:
    ns1__syncWriteVehicleInfoResponse  &ns1__syncWriteVehicleInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	syncWriteVehicleInfo SOAP
//gsoap ns1  service method-style:	syncWriteVehicleInfo document
//gsoap ns1  service method-encoding:	syncWriteVehicleInfo literal
//gsoap ns1  service method-input-action:	syncWriteVehicleInfo action
//gsoap ns1  service method-output-action:	syncWriteVehicleInfo actionResponse
int __ns1__syncWriteVehicleInfo(
    ns1__syncWriteVehicleInfo*          ns1__syncWriteVehicleInfo_,	///< Input parameter
    ns1__syncWriteVehicleInfoResponse  &ns1__syncWriteVehicleInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__writeVehicleInfo                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__writeVehicleInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__writeVehicleInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__writeVehicleInfo*              ns1__writeVehicleInfo_,
    // output parameters:
    ns1__writeVehicleInfoResponse      &ns1__writeVehicleInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__writeVehicleInfo(
    struct soap *soap,
    // input parameters:
    ns1__writeVehicleInfo*              ns1__writeVehicleInfo_,
    // output parameters:
    ns1__writeVehicleInfoResponse      &ns1__writeVehicleInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	writeVehicleInfo SOAP
//gsoap ns1  service method-style:	writeVehicleInfo document
//gsoap ns1  service method-encoding:	writeVehicleInfo literal
//gsoap ns1  service method-input-action:	writeVehicleInfo action
//gsoap ns1  service method-output-action:	writeVehicleInfo actionResponse
int __ns1__writeVehicleInfo(
    ns1__writeVehicleInfo*              ns1__writeVehicleInfo_,	///< Input parameter
    ns1__writeVehicleInfoResponse      &ns1__writeVehicleInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__login                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__login" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__login*                         ns1__login_,
    // output parameters:
    ns1__loginResponse                 &ns1__loginResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__login(
    struct soap *soap,
    // input parameters:
    ns1__login*                         ns1__login_,
    // output parameters:
    ns1__loginResponse                 &ns1__loginResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	login SOAP
//gsoap ns1  service method-style:	login document
//gsoap ns1  service method-encoding:	login literal
//gsoap ns1  service method-input-action:	login action
//gsoap ns1  service method-output-action:	login actionResponse
int __ns1__login(
    ns1__login*                         ns1__login_,	///< Input parameter
    ns1__loginResponse                 &ns1__loginResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__queryLimitSpeed                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__queryLimitSpeed" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__queryLimitSpeed(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__queryLimitSpeed*               ns1__queryLimitSpeed_,
    // output parameters:
    ns1__queryLimitSpeedResponse       &ns1__queryLimitSpeedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__queryLimitSpeed(
    struct soap *soap,
    // input parameters:
    ns1__queryLimitSpeed*               ns1__queryLimitSpeed_,
    // output parameters:
    ns1__queryLimitSpeedResponse       &ns1__queryLimitSpeedResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	queryLimitSpeed SOAP
//gsoap ns1  service method-style:	queryLimitSpeed document
//gsoap ns1  service method-encoding:	queryLimitSpeed literal
//gsoap ns1  service method-input-action:	queryLimitSpeed action
//gsoap ns1  service method-output-action:	queryLimitSpeed actionResponse
int __ns1__queryLimitSpeed(
    ns1__queryLimitSpeed*               ns1__queryLimitSpeed_,	///< Input parameter
    ns1__queryLimitSpeedResponse       &ns1__queryLimitSpeedResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__queryViolateSpeed                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__queryViolateSpeed" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__queryViolateSpeed(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__queryViolateSpeed*             ns1__queryViolateSpeed_,
    // output parameters:
    ns1__queryViolateSpeedResponse     &ns1__queryViolateSpeedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__queryViolateSpeed(
    struct soap *soap,
    // input parameters:
    ns1__queryViolateSpeed*             ns1__queryViolateSpeed_,
    // output parameters:
    ns1__queryViolateSpeedResponse     &ns1__queryViolateSpeedResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	queryViolateSpeed SOAP
//gsoap ns1  service method-style:	queryViolateSpeed document
//gsoap ns1  service method-encoding:	queryViolateSpeed literal
//gsoap ns1  service method-input-action:	queryViolateSpeed action
//gsoap ns1  service method-output-action:	queryViolateSpeed actionResponse
int __ns1__queryViolateSpeed(
    ns1__queryViolateSpeed*             ns1__queryViolateSpeed_,	///< Input parameter
    ns1__queryViolateSpeedResponse     &ns1__queryViolateSpeedResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logout                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__logout" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__logout*                        ns1__logout_,
    // output parameters:
    ns1__logoutResponse                &ns1__logoutResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logout(
    struct soap *soap,
    // input parameters:
    ns1__logout*                        ns1__logout_,
    // output parameters:
    ns1__logoutResponse                &ns1__logoutResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	logout SOAP
//gsoap ns1  service method-style:	logout document
//gsoap ns1  service method-encoding:	logout literal
//gsoap ns1  service method-input-action:	logout action
//gsoap ns1  service method-output-action:	logout actionResponse
int __ns1__logout(
    ns1__logout*                        ns1__logout_,	///< Input parameter
    ns1__logoutResponse                &ns1__logoutResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__querySyncTime                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__querySyncTime" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__querySyncTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__querySyncTime*                 ns1__querySyncTime_,
    // output parameters:
    ns1__querySyncTimeResponse         &ns1__querySyncTimeResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__querySyncTime(
    struct soap *soap,
    // input parameters:
    ns1__querySyncTime*                 ns1__querySyncTime_,
    // output parameters:
    ns1__querySyncTimeResponse         &ns1__querySyncTimeResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	querySyncTime SOAP
//gsoap ns1  service method-style:	querySyncTime document
//gsoap ns1  service method-encoding:	querySyncTime literal
//gsoap ns1  service method-input-action:	querySyncTime action
//gsoap ns1  service method-output-action:	querySyncTime actionResponse
int __ns1__querySyncTime(
    ns1__querySyncTime*                 ns1__querySyncTime_,	///< Input parameter
    ns1__querySyncTimeResponse         &ns1__querySyncTimeResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__writeAlarmInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__writeAlarmInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__writeAlarmInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__writeAlarmInfo*                ns1__writeAlarmInfo_,
    // output parameters:
    ns1__writeAlarmInfoResponse        &ns1__writeAlarmInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__writeAlarmInfo(
    struct soap *soap,
    // input parameters:
    ns1__writeAlarmInfo*                ns1__writeAlarmInfo_,
    // output parameters:
    ns1__writeAlarmInfoResponse        &ns1__writeAlarmInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	writeAlarmInfo SOAP
//gsoap ns1  service method-style:	writeAlarmInfo document
//gsoap ns1  service method-encoding:	writeAlarmInfo literal
//gsoap ns1  service method-input-action:	writeAlarmInfo action
//gsoap ns1  service method-output-action:	writeAlarmInfo actionResponse
int __ns1__writeAlarmInfo(
    ns1__writeAlarmInfo*                ns1__writeAlarmInfo_,	///< Input parameter
    ns1__writeAlarmInfoResponse        &ns1__writeAlarmInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NWriteVehicleInfo                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NWriteVehicleInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NWriteVehicleInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NWriteVehicleInfo*             ns1__NWriteVehicleInfo_,
    // output parameters:
    ns1__NWriteVehicleInfoResponse     &ns1__NWriteVehicleInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NWriteVehicleInfo(
    struct soap *soap,
    // input parameters:
    ns1__NWriteVehicleInfo*             ns1__NWriteVehicleInfo_,
    // output parameters:
    ns1__NWriteVehicleInfoResponse     &ns1__NWriteVehicleInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NWriteVehicleInfo SOAP
//gsoap ns1  service method-style:	NWriteVehicleInfo document
//gsoap ns1  service method-encoding:	NWriteVehicleInfo literal
//gsoap ns1  service method-input-action:	NWriteVehicleInfo action
//gsoap ns1  service method-output-action:	NWriteVehicleInfo actionResponse
int __ns1__NWriteVehicleInfo(
    ns1__NWriteVehicleInfo*             ns1__NWriteVehicleInfo_,	///< Input parameter
    ns1__NWriteVehicleInfoResponse     &ns1__NWriteVehicleInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NWriteVehicleInfoEx                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NWriteVehicleInfoEx" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NWriteVehicleInfoEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NWriteVehicleInfoEx*           ns1__NWriteVehicleInfoEx_,
    // output parameters:
    ns1__NWriteVehicleInfoExResponse   &ns1__NWriteVehicleInfoExResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NWriteVehicleInfoEx(
    struct soap *soap,
    // input parameters:
    ns1__NWriteVehicleInfoEx*           ns1__NWriteVehicleInfoEx_,
    // output parameters:
    ns1__NWriteVehicleInfoExResponse   &ns1__NWriteVehicleInfoExResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NWriteVehicleInfoEx SOAP
//gsoap ns1  service method-style:	NWriteVehicleInfoEx document
//gsoap ns1  service method-encoding:	NWriteVehicleInfoEx literal
//gsoap ns1  service method-input-action:	NWriteVehicleInfoEx action
//gsoap ns1  service method-output-action:	NWriteVehicleInfoEx actionResponse
int __ns1__NWriteVehicleInfoEx(
    ns1__NWriteVehicleInfoEx*           ns1__NWriteVehicleInfoEx_,	///< Input parameter
    ns1__NWriteVehicleInfoExResponse   &ns1__NWriteVehicleInfoExResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NSyncWriteVehicleInfo                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NSyncWriteVehicleInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NSyncWriteVehicleInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NSyncWriteVehicleInfo*         ns1__NSyncWriteVehicleInfo_,
    // output parameters:
    ns1__NSyncWriteVehicleInfoResponse &ns1__NSyncWriteVehicleInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NSyncWriteVehicleInfo(
    struct soap *soap,
    // input parameters:
    ns1__NSyncWriteVehicleInfo*         ns1__NSyncWriteVehicleInfo_,
    // output parameters:
    ns1__NSyncWriteVehicleInfoResponse &ns1__NSyncWriteVehicleInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NSyncWriteVehicleInfo SOAP
//gsoap ns1  service method-style:	NSyncWriteVehicleInfo document
//gsoap ns1  service method-encoding:	NSyncWriteVehicleInfo literal
//gsoap ns1  service method-input-action:	NSyncWriteVehicleInfo action
//gsoap ns1  service method-output-action:	NSyncWriteVehicleInfo actionResponse
int __ns1__NSyncWriteVehicleInfo(
    ns1__NSyncWriteVehicleInfo*         ns1__NSyncWriteVehicleInfo_,	///< Input parameter
    ns1__NSyncWriteVehicleInfoResponse &ns1__NSyncWriteVehicleInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteFlux                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteFlux" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteFlux(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WriteFlux*                     ns1__WriteFlux_,
    // output parameters:
    ns1__WriteFluxResponse             &ns1__WriteFluxResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteFlux(
    struct soap *soap,
    // input parameters:
    ns1__WriteFlux*                     ns1__WriteFlux_,
    // output parameters:
    ns1__WriteFluxResponse             &ns1__WriteFluxResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteFlux SOAP
//gsoap ns1  service method-style:	WriteFlux document
//gsoap ns1  service method-encoding:	WriteFlux literal
//gsoap ns1  service method-input-action:	WriteFlux action
//gsoap ns1  service method-output-action:	WriteFlux actionResponse
int __ns1__WriteFlux(
    ns1__WriteFlux*                     ns1__WriteFlux_,	///< Input parameter
    ns1__WriteFluxResponse             &ns1__WriteFluxResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NWriteDeviceStatus                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NWriteDeviceStatus" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NWriteDeviceStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NWriteDeviceStatus*            ns1__NWriteDeviceStatus_,
    // output parameters:
    ns1__NWriteDeviceStatusResponse    &ns1__NWriteDeviceStatusResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NWriteDeviceStatus(
    struct soap *soap,
    // input parameters:
    ns1__NWriteDeviceStatus*            ns1__NWriteDeviceStatus_,
    // output parameters:
    ns1__NWriteDeviceStatusResponse    &ns1__NWriteDeviceStatusResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NWriteDeviceStatus SOAP
//gsoap ns1  service method-style:	NWriteDeviceStatus document
//gsoap ns1  service method-encoding:	NWriteDeviceStatus literal
//gsoap ns1  service method-input-action:	NWriteDeviceStatus action
//gsoap ns1  service method-output-action:	NWriteDeviceStatus actionResponse
int __ns1__NWriteDeviceStatus(
    ns1__NWriteDeviceStatus*            ns1__NWriteDeviceStatus_,	///< Input parameter
    ns1__NWriteDeviceStatusResponse    &ns1__NWriteDeviceStatusResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NSyncWriteMobileEPVInfo                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NSyncWriteMobileEPVInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NSyncWriteMobileEPVInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NSyncWriteMobileEPVInfo*       ns1__NSyncWriteMobileEPVInfo_,
    // output parameters:
    ns1__NSyncWriteMobileEPVInfoResponse&ns1__NSyncWriteMobileEPVInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NSyncWriteMobileEPVInfo(
    struct soap *soap,
    // input parameters:
    ns1__NSyncWriteMobileEPVInfo*       ns1__NSyncWriteMobileEPVInfo_,
    // output parameters:
    ns1__NSyncWriteMobileEPVInfoResponse&ns1__NSyncWriteMobileEPVInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NSyncWriteMobileEPVInfo SOAP
//gsoap ns1  service method-style:	NSyncWriteMobileEPVInfo document
//gsoap ns1  service method-encoding:	NSyncWriteMobileEPVInfo literal
//gsoap ns1  service method-input-action:	NSyncWriteMobileEPVInfo action
//gsoap ns1  service method-output-action:	NSyncWriteMobileEPVInfo actionResponse
int __ns1__NSyncWriteMobileEPVInfo(
    ns1__NSyncWriteMobileEPVInfo*       ns1__NSyncWriteMobileEPVInfo_,	///< Input parameter
    ns1__NSyncWriteMobileEPVInfoResponse&ns1__NSyncWriteMobileEPVInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NSyncWriteVioInfo                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NSyncWriteVioInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NSyncWriteVioInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NSyncWriteVioInfo*             ns1__NSyncWriteVioInfo_,
    // output parameters:
    ns1__NSyncWriteVioInfoResponse     &ns1__NSyncWriteVioInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NSyncWriteVioInfo(
    struct soap *soap,
    // input parameters:
    ns1__NSyncWriteVioInfo*             ns1__NSyncWriteVioInfo_,
    // output parameters:
    ns1__NSyncWriteVioInfoResponse     &ns1__NSyncWriteVioInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NSyncWriteVioInfo SOAP
//gsoap ns1  service method-style:	NSyncWriteVioInfo document
//gsoap ns1  service method-encoding:	NSyncWriteVioInfo literal
//gsoap ns1  service method-input-action:	NSyncWriteVioInfo action
//gsoap ns1  service method-output-action:	NSyncWriteVioInfo actionResponse
int __ns1__NSyncWriteVioInfo(
    ns1__NSyncWriteVioInfo*             ns1__NSyncWriteVioInfo_,	///< Input parameter
    ns1__NSyncWriteVioInfoResponse     &ns1__NSyncWriteVioInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NWritePassStat                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NWritePassStat" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NWritePassStat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__NWritePassStat*                ns1__NWritePassStat_,
    // output parameters:
    ns1__NWritePassStatResponse        &ns1__NWritePassStatResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NWritePassStat(
    struct soap *soap,
    // input parameters:
    ns1__NWritePassStat*                ns1__NWritePassStat_,
    // output parameters:
    ns1__NWritePassStatResponse        &ns1__NWritePassStatResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NWritePassStat SOAP
//gsoap ns1  service method-style:	NWritePassStat document
//gsoap ns1  service method-encoding:	NWritePassStat literal
//gsoap ns1  service method-input-action:	NWritePassStat action
//gsoap ns1  service method-output-action:	NWritePassStat actionResponse
int __ns1__NWritePassStat(
    ns1__NWritePassStat*                ns1__NWritePassStat_,	///< Input parameter
    ns1__NWritePassStatResponse        &ns1__NWritePassStatResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncWriteVehPassInfo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncWriteVehPassInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncWriteVehPassInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SyncWriteVehPassInfo*          ns1__SyncWriteVehPassInfo_,
    // output parameters:
    ns1__SyncWriteVehPassInfoResponse  &ns1__SyncWriteVehPassInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncWriteVehPassInfo(
    struct soap *soap,
    // input parameters:
    ns1__SyncWriteVehPassInfo*          ns1__SyncWriteVehPassInfo_,
    // output parameters:
    ns1__SyncWriteVehPassInfoResponse  &ns1__SyncWriteVehPassInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncWriteVehPassInfo SOAP
//gsoap ns1  service method-style:	SyncWriteVehPassInfo document
//gsoap ns1  service method-encoding:	SyncWriteVehPassInfo literal
//gsoap ns1  service method-input-action:	SyncWriteVehPassInfo action
//gsoap ns1  service method-output-action:	SyncWriteVehPassInfo actionResponse
int __ns1__SyncWriteVehPassInfo(
    ns1__SyncWriteVehPassInfo*          ns1__SyncWriteVehPassInfo_,	///< Input parameter
    ns1__SyncWriteVehPassInfoResponse  &ns1__SyncWriteVehPassInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteVehPassInfo                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteVehPassInfo" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteVehPassInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WriteVehPassInfo*              ns1__WriteVehPassInfo_,
    // output parameters:
    ns1__WriteVehPassInfoResponse      &ns1__WriteVehPassInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteVehPassInfo(
    struct soap *soap,
    // input parameters:
    ns1__WriteVehPassInfo*              ns1__WriteVehPassInfo_,
    // output parameters:
    ns1__WriteVehPassInfoResponse      &ns1__WriteVehPassInfoResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteVehPassInfo SOAP
//gsoap ns1  service method-style:	WriteVehPassInfo document
//gsoap ns1  service method-encoding:	WriteVehPassInfo literal
//gsoap ns1  service method-input-action:	WriteVehPassInfo action
//gsoap ns1  service method-output-action:	WriteVehPassInfo actionResponse
int __ns1__WriteVehPassInfo(
    ns1__WriteVehPassInfo*              ns1__WriteVehPassInfo_,	///< Input parameter
    ns1__WriteVehPassInfoResponse      &ns1__WriteVehPassInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncWriteAreaSpeed                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncWriteAreaSpeed" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncWriteAreaSpeed(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SyncWriteAreaSpeed*            ns1__SyncWriteAreaSpeed_,
    // output parameters:
    ns1__SyncWriteAreaSpeedResponse    &ns1__SyncWriteAreaSpeedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncWriteAreaSpeed(
    struct soap *soap,
    // input parameters:
    ns1__SyncWriteAreaSpeed*            ns1__SyncWriteAreaSpeed_,
    // output parameters:
    ns1__SyncWriteAreaSpeedResponse    &ns1__SyncWriteAreaSpeedResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncWriteAreaSpeed SOAP
//gsoap ns1  service method-style:	SyncWriteAreaSpeed document
//gsoap ns1  service method-encoding:	SyncWriteAreaSpeed literal
//gsoap ns1  service method-input-action:	SyncWriteAreaSpeed action
//gsoap ns1  service method-output-action:	SyncWriteAreaSpeed actionResponse
int __ns1__SyncWriteAreaSpeed(
    ns1__SyncWriteAreaSpeed*            ns1__SyncWriteAreaSpeed_,	///< Input parameter
    ns1__SyncWriteAreaSpeedResponse    &ns1__SyncWriteAreaSpeedResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteAreaSpeed                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteAreaSpeed" of service binding "HTSAPServerSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.0.21:7081/HTServer/services/HTSAPServer

  - Default SOAP action or REST location path:
    - "action"

  - Addressing input action: "action"

  - Addressing output action: "actionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteAreaSpeed(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__WriteAreaSpeed*                ns1__WriteAreaSpeed_,
    // output parameters:
    ns1__WriteAreaSpeedResponse        &ns1__WriteAreaSpeedResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteAreaSpeed(
    struct soap *soap,
    // input parameters:
    ns1__WriteAreaSpeed*                ns1__WriteAreaSpeed_,
    // output parameters:
    ns1__WriteAreaSpeedResponse        &ns1__WriteAreaSpeedResponse_
  );
@endcode

C++ proxy class (defined in soapHTSAPServerSoapBindingProxy.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapHTSAPServerSoapBindingService.h generated with soapcpp2):
@code
  class HTSAPServerSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteAreaSpeed SOAP
//gsoap ns1  service method-style:	WriteAreaSpeed document
//gsoap ns1  service method-encoding:	WriteAreaSpeed literal
//gsoap ns1  service method-input-action:	WriteAreaSpeed action
//gsoap ns1  service method-output-action:	WriteAreaSpeed actionResponse
int __ns1__WriteAreaSpeed(
    ns1__WriteAreaSpeed*                ns1__WriteAreaSpeed_,	///< Input parameter
    ns1__WriteAreaSpeedResponse        &ns1__WriteAreaSpeedResponse_	///< Output parameter
);

/** @page HTSAPServerSoapBinding Binding "HTSAPServerSoapBinding"

@section HTSAPServerSoapBinding_policy_enablers Policy Enablers of Binding "HTSAPServerSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://server.cdt.com"

  - <ns1:Exception> (use wsdl2h option -g to auto-generate type _ns1__Exception)

  - <ns1:syncWriteVehicleInfo> (use wsdl2h option -g to auto-generate type _ns1__syncWriteVehicleInfo)

  - <ns1:syncWriteVehicleInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__syncWriteVehicleInfoResponse)

  - <ns1:writeVehicleInfo> (use wsdl2h option -g to auto-generate type _ns1__writeVehicleInfo)

  - <ns1:writeVehicleInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__writeVehicleInfoResponse)

  - <ns1:login> (use wsdl2h option -g to auto-generate type _ns1__login)

  - <ns1:loginResponse> (use wsdl2h option -g to auto-generate type _ns1__loginResponse)

  - <ns1:queryLimitSpeed> (use wsdl2h option -g to auto-generate type _ns1__queryLimitSpeed)

  - <ns1:queryLimitSpeedResponse> (use wsdl2h option -g to auto-generate type _ns1__queryLimitSpeedResponse)

  - <ns1:queryViolateSpeed> (use wsdl2h option -g to auto-generate type _ns1__queryViolateSpeed)

  - <ns1:queryViolateSpeedResponse> (use wsdl2h option -g to auto-generate type _ns1__queryViolateSpeedResponse)

  - <ns1:logout> (use wsdl2h option -g to auto-generate type _ns1__logout)

  - <ns1:logoutResponse> (use wsdl2h option -g to auto-generate type _ns1__logoutResponse)

  - <ns1:querySyncTime> (use wsdl2h option -g to auto-generate type _ns1__querySyncTime)

  - <ns1:querySyncTimeResponse> (use wsdl2h option -g to auto-generate type _ns1__querySyncTimeResponse)

  - <ns1:writeAlarmInfo> (use wsdl2h option -g to auto-generate type _ns1__writeAlarmInfo)

  - <ns1:writeAlarmInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__writeAlarmInfoResponse)

  - <ns1:NWriteVehicleInfo> (use wsdl2h option -g to auto-generate type _ns1__NWriteVehicleInfo)

  - <ns1:NWriteVehicleInfoEx> (use wsdl2h option -g to auto-generate type _ns1__NWriteVehicleInfoEx)

  - <ns1:NWriteVehicleInfoExResponse> (use wsdl2h option -g to auto-generate type _ns1__NWriteVehicleInfoExResponse)

  - <ns1:NWriteVehicleInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__NWriteVehicleInfoResponse)

  - <ns1:NSyncWriteVehicleInfo> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteVehicleInfo)

  - <ns1:NSyncWriteVehicleInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteVehicleInfoResponse)

  - <ns1:WriteFlux> (use wsdl2h option -g to auto-generate type _ns1__WriteFlux)

  - <ns1:WriteFluxResponse> (use wsdl2h option -g to auto-generate type _ns1__WriteFluxResponse)

  - <ns1:NWriteDeviceStatus> (use wsdl2h option -g to auto-generate type _ns1__NWriteDeviceStatus)

  - <ns1:NWriteDeviceStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__NWriteDeviceStatusResponse)

  - <ns1:NSyncWriteMobileEPVInfo> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteMobileEPVInfo)

  - <ns1:NSyncWriteMobileEPVInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteMobileEPVInfoResponse)

  - <ns1:NSyncWriteVioInfo> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteVioInfo)

  - <ns1:NSyncWriteVioInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__NSyncWriteVioInfoResponse)

  - <ns1:NWritePassStat> (use wsdl2h option -g to auto-generate type _ns1__NWritePassStat)

  - <ns1:NWritePassStatResponse> (use wsdl2h option -g to auto-generate type _ns1__NWritePassStatResponse)

  - <ns1:SyncWriteVehPassInfo> (use wsdl2h option -g to auto-generate type _ns1__SyncWriteVehPassInfo)

  - <ns1:SyncWriteVehPassInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__SyncWriteVehPassInfoResponse)

  - <ns1:WriteVehPassInfo> (use wsdl2h option -g to auto-generate type _ns1__WriteVehPassInfo)

  - <ns1:WriteVehPassInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__WriteVehPassInfoResponse)

  - <ns1:SyncWriteAreaSpeed> (use wsdl2h option -g to auto-generate type _ns1__SyncWriteAreaSpeed)

  - <ns1:SyncWriteAreaSpeedResponse> (use wsdl2h option -g to auto-generate type _ns1__SyncWriteAreaSpeedResponse)

  - <ns1:WriteAreaSpeed> (use wsdl2h option -g to auto-generate type _ns1__WriteAreaSpeed)

  - <ns1:WriteAreaSpeedResponse> (use wsdl2h option -g to auto-generate type _ns1__WriteAreaSpeedResponse)

*/

/* End of HTSAPServer.h */

/* soapH.h
   Generated by gSOAP 2.8.105 for ns.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteAreaSpeedResponse_DEFINED
#define SOAP_TYPE_ns1__WriteAreaSpeedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteAreaSpeedResponse(struct soap*, const char*, int, const ns1__WriteAreaSpeedResponse *, const char*);
SOAP_FMAC3 ns1__WriteAreaSpeedResponse * SOAP_FMAC4 soap_in_ns1__WriteAreaSpeedResponse(struct soap*, const char*, ns1__WriteAreaSpeedResponse *, const char*);
SOAP_FMAC1 ns1__WriteAreaSpeedResponse * SOAP_FMAC2 soap_instantiate_ns1__WriteAreaSpeedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteAreaSpeedResponse * soap_new_ns1__WriteAreaSpeedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteAreaSpeedResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteAreaSpeedResponse * soap_new_req_ns1__WriteAreaSpeedResponse(
	struct soap *soap)
{
	ns1__WriteAreaSpeedResponse *_p = ::soap_new_ns1__WriteAreaSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__WriteAreaSpeedResponse * soap_new_set_ns1__WriteAreaSpeedResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__WriteAreaSpeedResponse *_p = ::soap_new_ns1__WriteAreaSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteAreaSpeedResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__WriteAreaSpeedResponse(struct soap *soap, ns1__WriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__WriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__WriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__WriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteAreaSpeedResponse * SOAP_FMAC4 soap_get_ns1__WriteAreaSpeedResponse(struct soap*, ns1__WriteAreaSpeedResponse *, const char*, const char*);

inline int soap_read_ns1__WriteAreaSpeedResponse(struct soap *soap, ns1__WriteAreaSpeedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteAreaSpeedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__WriteAreaSpeedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteAreaSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteAreaSpeedResponse(struct soap *soap, ns1__WriteAreaSpeedResponse *p)
{
	if (::soap_read_ns1__WriteAreaSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteAreaSpeed_DEFINED
#define SOAP_TYPE_ns1__WriteAreaSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteAreaSpeed(struct soap*, const char*, int, const ns1__WriteAreaSpeed *, const char*);
SOAP_FMAC3 ns1__WriteAreaSpeed * SOAP_FMAC4 soap_in_ns1__WriteAreaSpeed(struct soap*, const char*, ns1__WriteAreaSpeed *, const char*);
SOAP_FMAC1 ns1__WriteAreaSpeed * SOAP_FMAC2 soap_instantiate_ns1__WriteAreaSpeed(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteAreaSpeed * soap_new_ns1__WriteAreaSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteAreaSpeed(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteAreaSpeed * soap_new_req_ns1__WriteAreaSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam)
{
	ns1__WriteAreaSpeed *_p = ::soap_new_ns1__WriteAreaSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteAreaSpeed::sid = sid;
		_p->ns1__WriteAreaSpeed::xmlParam = xmlParam;
	}
	return _p;
}

inline ns1__WriteAreaSpeed * soap_new_set_ns1__WriteAreaSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam)
{
	ns1__WriteAreaSpeed *_p = ::soap_new_ns1__WriteAreaSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteAreaSpeed::sid = sid;
		_p->ns1__WriteAreaSpeed::xmlParam = xmlParam;
	}
	return _p;
}

inline int soap_write_ns1__WriteAreaSpeed(struct soap *soap, ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteAreaSpeed(struct soap *soap, const char *URL, ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteAreaSpeed(struct soap *soap, const char *URL, ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteAreaSpeed(struct soap *soap, const char *URL, ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__WriteAreaSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteAreaSpeed * SOAP_FMAC4 soap_get_ns1__WriteAreaSpeed(struct soap*, ns1__WriteAreaSpeed *, const char*, const char*);

inline int soap_read_ns1__WriteAreaSpeed(struct soap *soap, ns1__WriteAreaSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteAreaSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteAreaSpeed(struct soap *soap, const char *URL, ns1__WriteAreaSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteAreaSpeed(struct soap *soap, ns1__WriteAreaSpeed *p)
{
	if (::soap_read_ns1__WriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse_DEFINED
#define SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SyncWriteAreaSpeedResponse(struct soap*, const char*, int, const ns1__SyncWriteAreaSpeedResponse *, const char*);
SOAP_FMAC3 ns1__SyncWriteAreaSpeedResponse * SOAP_FMAC4 soap_in_ns1__SyncWriteAreaSpeedResponse(struct soap*, const char*, ns1__SyncWriteAreaSpeedResponse *, const char*);
SOAP_FMAC1 ns1__SyncWriteAreaSpeedResponse * SOAP_FMAC2 soap_instantiate_ns1__SyncWriteAreaSpeedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SyncWriteAreaSpeedResponse * soap_new_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SyncWriteAreaSpeedResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SyncWriteAreaSpeedResponse * soap_new_req_ns1__SyncWriteAreaSpeedResponse(
	struct soap *soap)
{
	ns1__SyncWriteAreaSpeedResponse *_p = ::soap_new_ns1__SyncWriteAreaSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SyncWriteAreaSpeedResponse * soap_new_set_ns1__SyncWriteAreaSpeedResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__SyncWriteAreaSpeedResponse *_p = ::soap_new_ns1__SyncWriteAreaSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteAreaSpeedResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, ns1__SyncWriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SyncWriteAreaSpeedResponse * SOAP_FMAC4 soap_get_ns1__SyncWriteAreaSpeedResponse(struct soap*, ns1__SyncWriteAreaSpeedResponse *, const char*, const char*);

inline int soap_read_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, ns1__SyncWriteAreaSpeedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SyncWriteAreaSpeedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SyncWriteAreaSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SyncWriteAreaSpeedResponse(struct soap *soap, ns1__SyncWriteAreaSpeedResponse *p)
{
	if (::soap_read_ns1__SyncWriteAreaSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SyncWriteAreaSpeed_DEFINED
#define SOAP_TYPE_ns1__SyncWriteAreaSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SyncWriteAreaSpeed(struct soap*, const char*, int, const ns1__SyncWriteAreaSpeed *, const char*);
SOAP_FMAC3 ns1__SyncWriteAreaSpeed * SOAP_FMAC4 soap_in_ns1__SyncWriteAreaSpeed(struct soap*, const char*, ns1__SyncWriteAreaSpeed *, const char*);
SOAP_FMAC1 ns1__SyncWriteAreaSpeed * SOAP_FMAC2 soap_instantiate_ns1__SyncWriteAreaSpeed(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SyncWriteAreaSpeed * soap_new_ns1__SyncWriteAreaSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SyncWriteAreaSpeed(soap, n, NULL, NULL, NULL);
}

inline ns1__SyncWriteAreaSpeed * soap_new_req_ns1__SyncWriteAreaSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam,
	const xsd__base64Binary& pic1,
	const xsd__base64Binary& pic2,
	const xsd__base64Binary& pic3,
	const xsd__base64Binary& pic4,
	const xsd__base64Binary& pic5,
	const xsd__base64Binary& pic6,
	const xsd__base64Binary& video)
{
	ns1__SyncWriteAreaSpeed *_p = ::soap_new_ns1__SyncWriteAreaSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteAreaSpeed::sid = sid;
		_p->ns1__SyncWriteAreaSpeed::xmlParam = xmlParam;
		_p->ns1__SyncWriteAreaSpeed::pic1 = pic1;
		_p->ns1__SyncWriteAreaSpeed::pic2 = pic2;
		_p->ns1__SyncWriteAreaSpeed::pic3 = pic3;
		_p->ns1__SyncWriteAreaSpeed::pic4 = pic4;
		_p->ns1__SyncWriteAreaSpeed::pic5 = pic5;
		_p->ns1__SyncWriteAreaSpeed::pic6 = pic6;
		_p->ns1__SyncWriteAreaSpeed::video = video;
	}
	return _p;
}

inline ns1__SyncWriteAreaSpeed * soap_new_set_ns1__SyncWriteAreaSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam,
	const xsd__base64Binary& pic1,
	const xsd__base64Binary& pic2,
	const xsd__base64Binary& pic3,
	const xsd__base64Binary& pic4,
	const xsd__base64Binary& pic5,
	const xsd__base64Binary& pic6,
	const xsd__base64Binary& video)
{
	ns1__SyncWriteAreaSpeed *_p = ::soap_new_ns1__SyncWriteAreaSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteAreaSpeed::sid = sid;
		_p->ns1__SyncWriteAreaSpeed::xmlParam = xmlParam;
		_p->ns1__SyncWriteAreaSpeed::pic1 = pic1;
		_p->ns1__SyncWriteAreaSpeed::pic2 = pic2;
		_p->ns1__SyncWriteAreaSpeed::pic3 = pic3;
		_p->ns1__SyncWriteAreaSpeed::pic4 = pic4;
		_p->ns1__SyncWriteAreaSpeed::pic5 = pic5;
		_p->ns1__SyncWriteAreaSpeed::pic6 = pic6;
		_p->ns1__SyncWriteAreaSpeed::video = video;
	}
	return _p;
}

inline int soap_write_ns1__SyncWriteAreaSpeed(struct soap *soap, ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteAreaSpeed", p->soap_type() == SOAP_TYPE_ns1__SyncWriteAreaSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SyncWriteAreaSpeed * SOAP_FMAC4 soap_get_ns1__SyncWriteAreaSpeed(struct soap*, ns1__SyncWriteAreaSpeed *, const char*, const char*);

inline int soap_read_ns1__SyncWriteAreaSpeed(struct soap *soap, ns1__SyncWriteAreaSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SyncWriteAreaSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, ns1__SyncWriteAreaSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SyncWriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SyncWriteAreaSpeed(struct soap *soap, ns1__SyncWriteAreaSpeed *p)
{
	if (::soap_read_ns1__SyncWriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteVehPassInfoResponse_DEFINED
#define SOAP_TYPE_ns1__WriteVehPassInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteVehPassInfoResponse(struct soap*, const char*, int, const ns1__WriteVehPassInfoResponse *, const char*);
SOAP_FMAC3 ns1__WriteVehPassInfoResponse * SOAP_FMAC4 soap_in_ns1__WriteVehPassInfoResponse(struct soap*, const char*, ns1__WriteVehPassInfoResponse *, const char*);
SOAP_FMAC1 ns1__WriteVehPassInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__WriteVehPassInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteVehPassInfoResponse * soap_new_ns1__WriteVehPassInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteVehPassInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteVehPassInfoResponse * soap_new_req_ns1__WriteVehPassInfoResponse(
	struct soap *soap)
{
	ns1__WriteVehPassInfoResponse *_p = ::soap_new_ns1__WriteVehPassInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__WriteVehPassInfoResponse * soap_new_set_ns1__WriteVehPassInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__WriteVehPassInfoResponse *_p = ::soap_new_ns1__WriteVehPassInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteVehPassInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__WriteVehPassInfoResponse(struct soap *soap, ns1__WriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__WriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__WriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__WriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteVehPassInfoResponse * SOAP_FMAC4 soap_get_ns1__WriteVehPassInfoResponse(struct soap*, ns1__WriteVehPassInfoResponse *, const char*, const char*);

inline int soap_read_ns1__WriteVehPassInfoResponse(struct soap *soap, ns1__WriteVehPassInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteVehPassInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__WriteVehPassInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteVehPassInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteVehPassInfoResponse(struct soap *soap, ns1__WriteVehPassInfoResponse *p)
{
	if (::soap_read_ns1__WriteVehPassInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteVehPassInfo_DEFINED
#define SOAP_TYPE_ns1__WriteVehPassInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteVehPassInfo(struct soap*, const char*, int, const ns1__WriteVehPassInfo *, const char*);
SOAP_FMAC3 ns1__WriteVehPassInfo * SOAP_FMAC4 soap_in_ns1__WriteVehPassInfo(struct soap*, const char*, ns1__WriteVehPassInfo *, const char*);
SOAP_FMAC1 ns1__WriteVehPassInfo * SOAP_FMAC2 soap_instantiate_ns1__WriteVehPassInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteVehPassInfo * soap_new_ns1__WriteVehPassInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteVehPassInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteVehPassInfo * soap_new_req_ns1__WriteVehPassInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam)
{
	ns1__WriteVehPassInfo *_p = ::soap_new_ns1__WriteVehPassInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteVehPassInfo::sid = sid;
		_p->ns1__WriteVehPassInfo::xmlParam = xmlParam;
	}
	return _p;
}

inline ns1__WriteVehPassInfo * soap_new_set_ns1__WriteVehPassInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam)
{
	ns1__WriteVehPassInfo *_p = ::soap_new_ns1__WriteVehPassInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteVehPassInfo::sid = sid;
		_p->ns1__WriteVehPassInfo::xmlParam = xmlParam;
	}
	return _p;
}

inline int soap_write_ns1__WriteVehPassInfo(struct soap *soap, ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteVehPassInfo(struct soap *soap, const char *URL, ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteVehPassInfo(struct soap *soap, const char *URL, ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteVehPassInfo(struct soap *soap, const char *URL, ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__WriteVehPassInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteVehPassInfo * SOAP_FMAC4 soap_get_ns1__WriteVehPassInfo(struct soap*, ns1__WriteVehPassInfo *, const char*, const char*);

inline int soap_read_ns1__WriteVehPassInfo(struct soap *soap, ns1__WriteVehPassInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteVehPassInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteVehPassInfo(struct soap *soap, const char *URL, ns1__WriteVehPassInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteVehPassInfo(struct soap *soap, ns1__WriteVehPassInfo *p)
{
	if (::soap_read_ns1__WriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse_DEFINED
#define SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SyncWriteVehPassInfoResponse(struct soap*, const char*, int, const ns1__SyncWriteVehPassInfoResponse *, const char*);
SOAP_FMAC3 ns1__SyncWriteVehPassInfoResponse * SOAP_FMAC4 soap_in_ns1__SyncWriteVehPassInfoResponse(struct soap*, const char*, ns1__SyncWriteVehPassInfoResponse *, const char*);
SOAP_FMAC1 ns1__SyncWriteVehPassInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__SyncWriteVehPassInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SyncWriteVehPassInfoResponse * soap_new_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SyncWriteVehPassInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SyncWriteVehPassInfoResponse * soap_new_req_ns1__SyncWriteVehPassInfoResponse(
	struct soap *soap)
{
	ns1__SyncWriteVehPassInfoResponse *_p = ::soap_new_ns1__SyncWriteVehPassInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SyncWriteVehPassInfoResponse * soap_new_set_ns1__SyncWriteVehPassInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__SyncWriteVehPassInfoResponse *_p = ::soap_new_ns1__SyncWriteVehPassInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteVehPassInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, ns1__SyncWriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfoResponse", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SyncWriteVehPassInfoResponse * SOAP_FMAC4 soap_get_ns1__SyncWriteVehPassInfoResponse(struct soap*, ns1__SyncWriteVehPassInfoResponse *, const char*, const char*);

inline int soap_read_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, ns1__SyncWriteVehPassInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SyncWriteVehPassInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SyncWriteVehPassInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SyncWriteVehPassInfoResponse(struct soap *soap, ns1__SyncWriteVehPassInfoResponse *p)
{
	if (::soap_read_ns1__SyncWriteVehPassInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SyncWriteVehPassInfo_DEFINED
#define SOAP_TYPE_ns1__SyncWriteVehPassInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SyncWriteVehPassInfo(struct soap*, const char*, int, const ns1__SyncWriteVehPassInfo *, const char*);
SOAP_FMAC3 ns1__SyncWriteVehPassInfo * SOAP_FMAC4 soap_in_ns1__SyncWriteVehPassInfo(struct soap*, const char*, ns1__SyncWriteVehPassInfo *, const char*);
SOAP_FMAC1 ns1__SyncWriteVehPassInfo * SOAP_FMAC2 soap_instantiate_ns1__SyncWriteVehPassInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SyncWriteVehPassInfo * soap_new_ns1__SyncWriteVehPassInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SyncWriteVehPassInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__SyncWriteVehPassInfo * soap_new_req_ns1__SyncWriteVehPassInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam,
	const xsd__base64Binary& pic1,
	const xsd__base64Binary& pic2,
	const xsd__base64Binary& pic3,
	const xsd__base64Binary& pic4,
	const xsd__base64Binary& pic5,
	const xsd__base64Binary& pic6,
	const xsd__base64Binary& video)
{
	ns1__SyncWriteVehPassInfo *_p = ::soap_new_ns1__SyncWriteVehPassInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteVehPassInfo::sid = sid;
		_p->ns1__SyncWriteVehPassInfo::xmlParam = xmlParam;
		_p->ns1__SyncWriteVehPassInfo::pic1 = pic1;
		_p->ns1__SyncWriteVehPassInfo::pic2 = pic2;
		_p->ns1__SyncWriteVehPassInfo::pic3 = pic3;
		_p->ns1__SyncWriteVehPassInfo::pic4 = pic4;
		_p->ns1__SyncWriteVehPassInfo::pic5 = pic5;
		_p->ns1__SyncWriteVehPassInfo::pic6 = pic6;
		_p->ns1__SyncWriteVehPassInfo::video = video;
	}
	return _p;
}

inline ns1__SyncWriteVehPassInfo * soap_new_set_ns1__SyncWriteVehPassInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& xmlParam,
	const xsd__base64Binary& pic1,
	const xsd__base64Binary& pic2,
	const xsd__base64Binary& pic3,
	const xsd__base64Binary& pic4,
	const xsd__base64Binary& pic5,
	const xsd__base64Binary& pic6,
	const xsd__base64Binary& video)
{
	ns1__SyncWriteVehPassInfo *_p = ::soap_new_ns1__SyncWriteVehPassInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SyncWriteVehPassInfo::sid = sid;
		_p->ns1__SyncWriteVehPassInfo::xmlParam = xmlParam;
		_p->ns1__SyncWriteVehPassInfo::pic1 = pic1;
		_p->ns1__SyncWriteVehPassInfo::pic2 = pic2;
		_p->ns1__SyncWriteVehPassInfo::pic3 = pic3;
		_p->ns1__SyncWriteVehPassInfo::pic4 = pic4;
		_p->ns1__SyncWriteVehPassInfo::pic5 = pic5;
		_p->ns1__SyncWriteVehPassInfo::pic6 = pic6;
		_p->ns1__SyncWriteVehPassInfo::video = video;
	}
	return _p;
}

inline int soap_write_ns1__SyncWriteVehPassInfo(struct soap *soap, ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SyncWriteVehPassInfo", p->soap_type() == SOAP_TYPE_ns1__SyncWriteVehPassInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SyncWriteVehPassInfo * SOAP_FMAC4 soap_get_ns1__SyncWriteVehPassInfo(struct soap*, ns1__SyncWriteVehPassInfo *, const char*, const char*);

inline int soap_read_ns1__SyncWriteVehPassInfo(struct soap *soap, ns1__SyncWriteVehPassInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SyncWriteVehPassInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, ns1__SyncWriteVehPassInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SyncWriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SyncWriteVehPassInfo(struct soap *soap, ns1__SyncWriteVehPassInfo *p)
{
	if (::soap_read_ns1__SyncWriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWritePassStatResponse_DEFINED
#define SOAP_TYPE_ns1__NWritePassStatResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWritePassStatResponse(struct soap*, const char*, int, const ns1__NWritePassStatResponse *, const char*);
SOAP_FMAC3 ns1__NWritePassStatResponse * SOAP_FMAC4 soap_in_ns1__NWritePassStatResponse(struct soap*, const char*, ns1__NWritePassStatResponse *, const char*);
SOAP_FMAC1 ns1__NWritePassStatResponse * SOAP_FMAC2 soap_instantiate_ns1__NWritePassStatResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWritePassStatResponse * soap_new_ns1__NWritePassStatResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWritePassStatResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NWritePassStatResponse * soap_new_req_ns1__NWritePassStatResponse(
	struct soap *soap)
{
	ns1__NWritePassStatResponse *_p = ::soap_new_ns1__NWritePassStatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NWritePassStatResponse * soap_new_set_ns1__NWritePassStatResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NWritePassStatResponse *_p = ::soap_new_ns1__NWritePassStatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWritePassStatResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NWritePassStatResponse(struct soap *soap, ns1__NWritePassStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStatResponse", p->soap_type() == SOAP_TYPE_ns1__NWritePassStatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWritePassStatResponse(struct soap *soap, const char *URL, ns1__NWritePassStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStatResponse", p->soap_type() == SOAP_TYPE_ns1__NWritePassStatResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWritePassStatResponse(struct soap *soap, const char *URL, ns1__NWritePassStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStatResponse", p->soap_type() == SOAP_TYPE_ns1__NWritePassStatResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWritePassStatResponse(struct soap *soap, const char *URL, ns1__NWritePassStatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStatResponse", p->soap_type() == SOAP_TYPE_ns1__NWritePassStatResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWritePassStatResponse * SOAP_FMAC4 soap_get_ns1__NWritePassStatResponse(struct soap*, ns1__NWritePassStatResponse *, const char*, const char*);

inline int soap_read_ns1__NWritePassStatResponse(struct soap *soap, ns1__NWritePassStatResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWritePassStatResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWritePassStatResponse(struct soap *soap, const char *URL, ns1__NWritePassStatResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWritePassStatResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWritePassStatResponse(struct soap *soap, ns1__NWritePassStatResponse *p)
{
	if (::soap_read_ns1__NWritePassStatResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWritePassStat_DEFINED
#define SOAP_TYPE_ns1__NWritePassStat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWritePassStat(struct soap*, const char*, int, const ns1__NWritePassStat *, const char*);
SOAP_FMAC3 ns1__NWritePassStat * SOAP_FMAC4 soap_in_ns1__NWritePassStat(struct soap*, const char*, ns1__NWritePassStat *, const char*);
SOAP_FMAC1 ns1__NWritePassStat * SOAP_FMAC2 soap_instantiate_ns1__NWritePassStat(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWritePassStat * soap_new_ns1__NWritePassStat(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWritePassStat(soap, n, NULL, NULL, NULL);
}

inline ns1__NWritePassStat * soap_new_req_ns1__NWritePassStat(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strPassStatTime,
	LONG64 lPassCount,
	LONG64 lSuccessCount,
	LONG64 lTimelyCount,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWritePassStat *_p = ::soap_new_ns1__NWritePassStat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWritePassStat::sid = sid;
		_p->ns1__NWritePassStat::strDeviceId = strDeviceId;
		_p->ns1__NWritePassStat::strDeviceType = strDeviceType;
		_p->ns1__NWritePassStat::strDirectionId = strDirectionId;
		_p->ns1__NWritePassStat::strDriveWayId = strDriveWayId;
		_p->ns1__NWritePassStat::strPassStatTime = strPassStatTime;
		_p->ns1__NWritePassStat::lPassCount = lPassCount;
		_p->ns1__NWritePassStat::lSuccessCount = lSuccessCount;
		_p->ns1__NWritePassStat::lTimelyCount = lTimelyCount;
		_p->ns1__NWritePassStat::strReserve1 = strReserve1;
		_p->ns1__NWritePassStat::strReserve2 = strReserve2;
		_p->ns1__NWritePassStat::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NWritePassStat * soap_new_set_ns1__NWritePassStat(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strPassStatTime,
	LONG64 lPassCount,
	LONG64 lSuccessCount,
	LONG64 lTimelyCount,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWritePassStat *_p = ::soap_new_ns1__NWritePassStat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWritePassStat::sid = sid;
		_p->ns1__NWritePassStat::strDeviceId = strDeviceId;
		_p->ns1__NWritePassStat::strDeviceType = strDeviceType;
		_p->ns1__NWritePassStat::strDirectionId = strDirectionId;
		_p->ns1__NWritePassStat::strDriveWayId = strDriveWayId;
		_p->ns1__NWritePassStat::strPassStatTime = strPassStatTime;
		_p->ns1__NWritePassStat::lPassCount = lPassCount;
		_p->ns1__NWritePassStat::lSuccessCount = lSuccessCount;
		_p->ns1__NWritePassStat::lTimelyCount = lTimelyCount;
		_p->ns1__NWritePassStat::strReserve1 = strReserve1;
		_p->ns1__NWritePassStat::strReserve2 = strReserve2;
		_p->ns1__NWritePassStat::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NWritePassStat(struct soap *soap, ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStat", p->soap_type() == SOAP_TYPE_ns1__NWritePassStat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWritePassStat(struct soap *soap, const char *URL, ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStat", p->soap_type() == SOAP_TYPE_ns1__NWritePassStat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWritePassStat(struct soap *soap, const char *URL, ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStat", p->soap_type() == SOAP_TYPE_ns1__NWritePassStat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWritePassStat(struct soap *soap, const char *URL, ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWritePassStat", p->soap_type() == SOAP_TYPE_ns1__NWritePassStat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWritePassStat * SOAP_FMAC4 soap_get_ns1__NWritePassStat(struct soap*, ns1__NWritePassStat *, const char*, const char*);

inline int soap_read_ns1__NWritePassStat(struct soap *soap, ns1__NWritePassStat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWritePassStat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWritePassStat(struct soap *soap, const char *URL, ns1__NWritePassStat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWritePassStat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWritePassStat(struct soap *soap, ns1__NWritePassStat *p)
{
	if (::soap_read_ns1__NWritePassStat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteVioInfoResponse_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteVioInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteVioInfoResponse(struct soap*, const char*, int, const ns1__NSyncWriteVioInfoResponse *, const char*);
SOAP_FMAC3 ns1__NSyncWriteVioInfoResponse * SOAP_FMAC4 soap_in_ns1__NSyncWriteVioInfoResponse(struct soap*, const char*, ns1__NSyncWriteVioInfoResponse *, const char*);
SOAP_FMAC1 ns1__NSyncWriteVioInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteVioInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteVioInfoResponse * soap_new_ns1__NSyncWriteVioInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteVioInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteVioInfoResponse * soap_new_req_ns1__NSyncWriteVioInfoResponse(
	struct soap *soap)
{
	ns1__NSyncWriteVioInfoResponse *_p = ::soap_new_ns1__NSyncWriteVioInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NSyncWriteVioInfoResponse * soap_new_set_ns1__NSyncWriteVioInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NSyncWriteVioInfoResponse *_p = ::soap_new_ns1__NSyncWriteVioInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVioInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteVioInfoResponse(struct soap *soap, ns1__NSyncWriteVioInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteVioInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteVioInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteVioInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteVioInfoResponse * SOAP_FMAC4 soap_get_ns1__NSyncWriteVioInfoResponse(struct soap*, ns1__NSyncWriteVioInfoResponse *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteVioInfoResponse(struct soap *soap, ns1__NSyncWriteVioInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteVioInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteVioInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteVioInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteVioInfoResponse(struct soap *soap, ns1__NSyncWriteVioInfoResponse *p)
{
	if (::soap_read_ns1__NSyncWriteVioInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteVioInfo_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteVioInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteVioInfo(struct soap*, const char*, int, const ns1__NSyncWriteVioInfo *, const char*);
SOAP_FMAC3 ns1__NSyncWriteVioInfo * SOAP_FMAC4 soap_in_ns1__NSyncWriteVioInfo(struct soap*, const char*, ns1__NSyncWriteVioInfo *, const char*);
SOAP_FMAC1 ns1__NSyncWriteVioInfo * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteVioInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteVioInfo * soap_new_ns1__NSyncWriteVioInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteVioInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteVioInfo * soap_new_req_ns1__NSyncWriteVioInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strVioPlaceId,
	const std::string& strVioPlaceName,
	const std::string& strCollectDept,
	const std::string& strDataSrc,
	LONG64 lRoadKLMS,
	LONG64 lRoadMs,
	const std::string& strCarColor,
	const std::string& strPassDateTime2,
	const std::string& strVioPlaceId2,
	const std::string& strVioPlaceName2,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteVioInfo *_p = ::soap_new_ns1__NSyncWriteVioInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVioInfo::sid = sid;
		_p->ns1__NSyncWriteVioInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteVioInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteVioInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteVioInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteVioInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteVioInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteVioInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteVioInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteVioInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteVioInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteVioInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteVioInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteVioInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteVioInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteVioInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteVioInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteVioInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteVioInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteVioInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteVioInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteVioInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceId = strVioPlaceId;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceName = strVioPlaceName;
		_p->ns1__NSyncWriteVioInfo::strCollectDept = strCollectDept;
		_p->ns1__NSyncWriteVioInfo::strDataSrc = strDataSrc;
		_p->ns1__NSyncWriteVioInfo::lRoadKLMS = lRoadKLMS;
		_p->ns1__NSyncWriteVioInfo::lRoadMs = lRoadMs;
		_p->ns1__NSyncWriteVioInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteVioInfo::strPassDateTime2 = strPassDateTime2;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceId2 = strVioPlaceId2;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceName2 = strVioPlaceName2;
		_p->ns1__NSyncWriteVioInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteVioInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteVioInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NSyncWriteVioInfo * soap_new_set_ns1__NSyncWriteVioInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strVioPlaceId,
	const std::string& strVioPlaceName,
	const std::string& strCollectDept,
	const std::string& strDataSrc,
	LONG64 lRoadKLMS,
	LONG64 lRoadMs,
	const std::string& strCarColor,
	const std::string& strPassDateTime2,
	const std::string& strVioPlaceId2,
	const std::string& strVioPlaceName2,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteVioInfo *_p = ::soap_new_ns1__NSyncWriteVioInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVioInfo::sid = sid;
		_p->ns1__NSyncWriteVioInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteVioInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteVioInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteVioInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteVioInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteVioInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteVioInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteVioInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteVioInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteVioInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteVioInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteVioInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteVioInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteVioInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteVioInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteVioInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteVioInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteVioInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteVioInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteVioInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteVioInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteVioInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceId = strVioPlaceId;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceName = strVioPlaceName;
		_p->ns1__NSyncWriteVioInfo::strCollectDept = strCollectDept;
		_p->ns1__NSyncWriteVioInfo::strDataSrc = strDataSrc;
		_p->ns1__NSyncWriteVioInfo::lRoadKLMS = lRoadKLMS;
		_p->ns1__NSyncWriteVioInfo::lRoadMs = lRoadMs;
		_p->ns1__NSyncWriteVioInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteVioInfo::strPassDateTime2 = strPassDateTime2;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceId2 = strVioPlaceId2;
		_p->ns1__NSyncWriteVioInfo::strVioPlaceName2 = strVioPlaceName2;
		_p->ns1__NSyncWriteVioInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteVioInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteVioInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteVioInfo(struct soap *soap, ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVioInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVioInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteVioInfo * SOAP_FMAC4 soap_get_ns1__NSyncWriteVioInfo(struct soap*, ns1__NSyncWriteVioInfo *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteVioInfo(struct soap *soap, ns1__NSyncWriteVioInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteVioInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVioInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteVioInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteVioInfo(struct soap *soap, ns1__NSyncWriteVioInfo *p)
{
	if (::soap_read_ns1__NSyncWriteVioInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteMobileEPVInfoResponse(struct soap*, const char*, int, const ns1__NSyncWriteMobileEPVInfoResponse *, const char*);
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfoResponse * SOAP_FMAC4 soap_in_ns1__NSyncWriteMobileEPVInfoResponse(struct soap*, const char*, ns1__NSyncWriteMobileEPVInfoResponse *, const char*);
SOAP_FMAC1 ns1__NSyncWriteMobileEPVInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteMobileEPVInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteMobileEPVInfoResponse * soap_new_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteMobileEPVInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteMobileEPVInfoResponse * soap_new_req_ns1__NSyncWriteMobileEPVInfoResponse(
	struct soap *soap)
{
	ns1__NSyncWriteMobileEPVInfoResponse *_p = ::soap_new_ns1__NSyncWriteMobileEPVInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NSyncWriteMobileEPVInfoResponse * soap_new_set_ns1__NSyncWriteMobileEPVInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NSyncWriteMobileEPVInfoResponse *_p = ::soap_new_ns1__NSyncWriteMobileEPVInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteMobileEPVInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, ns1__NSyncWriteMobileEPVInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfoResponse * SOAP_FMAC4 soap_get_ns1__NSyncWriteMobileEPVInfoResponse(struct soap*, ns1__NSyncWriteMobileEPVInfoResponse *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, ns1__NSyncWriteMobileEPVInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteMobileEPVInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteMobileEPVInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteMobileEPVInfoResponse(struct soap *soap, ns1__NSyncWriteMobileEPVInfoResponse *p)
{
	if (::soap_read_ns1__NSyncWriteMobileEPVInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteMobileEPVInfo(struct soap*, const char*, int, const ns1__NSyncWriteMobileEPVInfo *, const char*);
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC4 soap_in_ns1__NSyncWriteMobileEPVInfo(struct soap*, const char*, ns1__NSyncWriteMobileEPVInfo *, const char*);
SOAP_FMAC1 ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteMobileEPVInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteMobileEPVInfo * soap_new_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteMobileEPVInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteMobileEPVInfo * soap_new_req_ns1__NSyncWriteMobileEPVInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strVioPlaceId,
	const std::string& strVioPlaceName,
	const std::string& strCollectDept,
	const std::string& strDataSrc,
	LONG64 lRoadKLMS,
	LONG64 lRoadMs,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteMobileEPVInfo *_p = ::soap_new_ns1__NSyncWriteMobileEPVInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteMobileEPVInfo::sid = sid;
		_p->ns1__NSyncWriteMobileEPVInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteMobileEPVInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteMobileEPVInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteMobileEPVInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteMobileEPVInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteMobileEPVInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteMobileEPVInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteMobileEPVInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteMobileEPVInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteMobileEPVInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteMobileEPVInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteMobileEPVInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteMobileEPVInfo::strVioPlaceId = strVioPlaceId;
		_p->ns1__NSyncWriteMobileEPVInfo::strVioPlaceName = strVioPlaceName;
		_p->ns1__NSyncWriteMobileEPVInfo::strCollectDept = strCollectDept;
		_p->ns1__NSyncWriteMobileEPVInfo::strDataSrc = strDataSrc;
		_p->ns1__NSyncWriteMobileEPVInfo::lRoadKLMS = lRoadKLMS;
		_p->ns1__NSyncWriteMobileEPVInfo::lRoadMs = lRoadMs;
		_p->ns1__NSyncWriteMobileEPVInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NSyncWriteMobileEPVInfo * soap_new_set_ns1__NSyncWriteMobileEPVInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strVioPlaceId,
	const std::string& strVioPlaceName,
	const std::string& strCollectDept,
	const std::string& strDataSrc,
	LONG64 lRoadKLMS,
	LONG64 lRoadMs,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteMobileEPVInfo *_p = ::soap_new_ns1__NSyncWriteMobileEPVInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteMobileEPVInfo::sid = sid;
		_p->ns1__NSyncWriteMobileEPVInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteMobileEPVInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteMobileEPVInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteMobileEPVInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteMobileEPVInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteMobileEPVInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteMobileEPVInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteMobileEPVInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteMobileEPVInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteMobileEPVInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteMobileEPVInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteMobileEPVInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteMobileEPVInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteMobileEPVInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteMobileEPVInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteMobileEPVInfo::strVioPlaceId = strVioPlaceId;
		_p->ns1__NSyncWriteMobileEPVInfo::strVioPlaceName = strVioPlaceName;
		_p->ns1__NSyncWriteMobileEPVInfo::strCollectDept = strCollectDept;
		_p->ns1__NSyncWriteMobileEPVInfo::strDataSrc = strDataSrc;
		_p->ns1__NSyncWriteMobileEPVInfo::lRoadKLMS = lRoadKLMS;
		_p->ns1__NSyncWriteMobileEPVInfo::lRoadMs = lRoadMs;
		_p->ns1__NSyncWriteMobileEPVInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteMobileEPVInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteMobileEPVInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteMobileEPVInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC4 soap_get_ns1__NSyncWriteMobileEPVInfo(struct soap*, ns1__NSyncWriteMobileEPVInfo *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, ns1__NSyncWriteMobileEPVInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteMobileEPVInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, ns1__NSyncWriteMobileEPVInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteMobileEPVInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteMobileEPVInfo(struct soap *soap, ns1__NSyncWriteMobileEPVInfo *p)
{
	if (::soap_read_ns1__NSyncWriteMobileEPVInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteDeviceStatusResponse_DEFINED
#define SOAP_TYPE_ns1__NWriteDeviceStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteDeviceStatusResponse(struct soap*, const char*, int, const ns1__NWriteDeviceStatusResponse *, const char*);
SOAP_FMAC3 ns1__NWriteDeviceStatusResponse * SOAP_FMAC4 soap_in_ns1__NWriteDeviceStatusResponse(struct soap*, const char*, ns1__NWriteDeviceStatusResponse *, const char*);
SOAP_FMAC1 ns1__NWriteDeviceStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__NWriteDeviceStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteDeviceStatusResponse * soap_new_ns1__NWriteDeviceStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteDeviceStatusResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteDeviceStatusResponse * soap_new_req_ns1__NWriteDeviceStatusResponse(
	struct soap *soap)
{
	ns1__NWriteDeviceStatusResponse *_p = ::soap_new_ns1__NWriteDeviceStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NWriteDeviceStatusResponse * soap_new_set_ns1__NWriteDeviceStatusResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NWriteDeviceStatusResponse *_p = ::soap_new_ns1__NWriteDeviceStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteDeviceStatusResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NWriteDeviceStatusResponse(struct soap *soap, ns1__NWriteDeviceStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatusResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteDeviceStatusResponse(struct soap *soap, const char *URL, ns1__NWriteDeviceStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatusResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteDeviceStatusResponse(struct soap *soap, const char *URL, ns1__NWriteDeviceStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatusResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteDeviceStatusResponse(struct soap *soap, const char *URL, ns1__NWriteDeviceStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatusResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteDeviceStatusResponse * SOAP_FMAC4 soap_get_ns1__NWriteDeviceStatusResponse(struct soap*, ns1__NWriteDeviceStatusResponse *, const char*, const char*);

inline int soap_read_ns1__NWriteDeviceStatusResponse(struct soap *soap, ns1__NWriteDeviceStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteDeviceStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteDeviceStatusResponse(struct soap *soap, const char *URL, ns1__NWriteDeviceStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteDeviceStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteDeviceStatusResponse(struct soap *soap, ns1__NWriteDeviceStatusResponse *p)
{
	if (::soap_read_ns1__NWriteDeviceStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteDeviceStatus_DEFINED
#define SOAP_TYPE_ns1__NWriteDeviceStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteDeviceStatus(struct soap*, const char*, int, const ns1__NWriteDeviceStatus *, const char*);
SOAP_FMAC3 ns1__NWriteDeviceStatus * SOAP_FMAC4 soap_in_ns1__NWriteDeviceStatus(struct soap*, const char*, ns1__NWriteDeviceStatus *, const char*);
SOAP_FMAC1 ns1__NWriteDeviceStatus * SOAP_FMAC2 soap_instantiate_ns1__NWriteDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteDeviceStatus * soap_new_ns1__NWriteDeviceStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteDeviceStatus(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteDeviceStatus * soap_new_req_ns1__NWriteDeviceStatus(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehDetectorStatus,
	const std::string& strVideoDeviceStatus,
	const std::string& strGatherCardStatus,
	const std::string& strTemperature,
	const std::string& strReserveOne,
	const std::string& strReserveTwo,
	const std::string& strReserveThree)
{
	ns1__NWriteDeviceStatus *_p = ::soap_new_ns1__NWriteDeviceStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteDeviceStatus::sid = sid;
		_p->ns1__NWriteDeviceStatus::strDeviceId = strDeviceId;
		_p->ns1__NWriteDeviceStatus::strVehDetectorStatus = strVehDetectorStatus;
		_p->ns1__NWriteDeviceStatus::strVideoDeviceStatus = strVideoDeviceStatus;
		_p->ns1__NWriteDeviceStatus::strGatherCardStatus = strGatherCardStatus;
		_p->ns1__NWriteDeviceStatus::strTemperature = strTemperature;
		_p->ns1__NWriteDeviceStatus::strReserveOne = strReserveOne;
		_p->ns1__NWriteDeviceStatus::strReserveTwo = strReserveTwo;
		_p->ns1__NWriteDeviceStatus::strReserveThree = strReserveThree;
	}
	return _p;
}

inline ns1__NWriteDeviceStatus * soap_new_set_ns1__NWriteDeviceStatus(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehDetectorStatus,
	const std::string& strVideoDeviceStatus,
	const std::string& strGatherCardStatus,
	const std::string& strTemperature,
	const std::string& strReserveOne,
	const std::string& strReserveTwo,
	const std::string& strReserveThree)
{
	ns1__NWriteDeviceStatus *_p = ::soap_new_ns1__NWriteDeviceStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteDeviceStatus::sid = sid;
		_p->ns1__NWriteDeviceStatus::strDeviceId = strDeviceId;
		_p->ns1__NWriteDeviceStatus::strVehDetectorStatus = strVehDetectorStatus;
		_p->ns1__NWriteDeviceStatus::strVideoDeviceStatus = strVideoDeviceStatus;
		_p->ns1__NWriteDeviceStatus::strGatherCardStatus = strGatherCardStatus;
		_p->ns1__NWriteDeviceStatus::strTemperature = strTemperature;
		_p->ns1__NWriteDeviceStatus::strReserveOne = strReserveOne;
		_p->ns1__NWriteDeviceStatus::strReserveTwo = strReserveTwo;
		_p->ns1__NWriteDeviceStatus::strReserveThree = strReserveThree;
	}
	return _p;
}

inline int soap_write_ns1__NWriteDeviceStatus(struct soap *soap, ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatus", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatus", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatus", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteDeviceStatus", p->soap_type() == SOAP_TYPE_ns1__NWriteDeviceStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteDeviceStatus * SOAP_FMAC4 soap_get_ns1__NWriteDeviceStatus(struct soap*, ns1__NWriteDeviceStatus *, const char*, const char*);

inline int soap_read_ns1__NWriteDeviceStatus(struct soap *soap, ns1__NWriteDeviceStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteDeviceStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, ns1__NWriteDeviceStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteDeviceStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteDeviceStatus(struct soap *soap, ns1__NWriteDeviceStatus *p)
{
	if (::soap_read_ns1__NWriteDeviceStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteFluxResponse_DEFINED
#define SOAP_TYPE_ns1__WriteFluxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteFluxResponse(struct soap*, const char*, int, const ns1__WriteFluxResponse *, const char*);
SOAP_FMAC3 ns1__WriteFluxResponse * SOAP_FMAC4 soap_in_ns1__WriteFluxResponse(struct soap*, const char*, ns1__WriteFluxResponse *, const char*);
SOAP_FMAC1 ns1__WriteFluxResponse * SOAP_FMAC2 soap_instantiate_ns1__WriteFluxResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteFluxResponse * soap_new_ns1__WriteFluxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteFluxResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteFluxResponse * soap_new_req_ns1__WriteFluxResponse(
	struct soap *soap)
{
	ns1__WriteFluxResponse *_p = ::soap_new_ns1__WriteFluxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__WriteFluxResponse * soap_new_set_ns1__WriteFluxResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__WriteFluxResponse *_p = ::soap_new_ns1__WriteFluxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteFluxResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__WriteFluxResponse(struct soap *soap, ns1__WriteFluxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFluxResponse", p->soap_type() == SOAP_TYPE_ns1__WriteFluxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteFluxResponse(struct soap *soap, const char *URL, ns1__WriteFluxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFluxResponse", p->soap_type() == SOAP_TYPE_ns1__WriteFluxResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteFluxResponse(struct soap *soap, const char *URL, ns1__WriteFluxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFluxResponse", p->soap_type() == SOAP_TYPE_ns1__WriteFluxResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteFluxResponse(struct soap *soap, const char *URL, ns1__WriteFluxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFluxResponse", p->soap_type() == SOAP_TYPE_ns1__WriteFluxResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteFluxResponse * SOAP_FMAC4 soap_get_ns1__WriteFluxResponse(struct soap*, ns1__WriteFluxResponse *, const char*, const char*);

inline int soap_read_ns1__WriteFluxResponse(struct soap *soap, ns1__WriteFluxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteFluxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteFluxResponse(struct soap *soap, const char *URL, ns1__WriteFluxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteFluxResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteFluxResponse(struct soap *soap, ns1__WriteFluxResponse *p)
{
	if (::soap_read_ns1__WriteFluxResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WriteFlux_DEFINED
#define SOAP_TYPE_ns1__WriteFlux_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WriteFlux(struct soap*, const char*, int, const ns1__WriteFlux *, const char*);
SOAP_FMAC3 ns1__WriteFlux * SOAP_FMAC4 soap_in_ns1__WriteFlux(struct soap*, const char*, ns1__WriteFlux *, const char*);
SOAP_FMAC1 ns1__WriteFlux * SOAP_FMAC2 soap_instantiate_ns1__WriteFlux(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WriteFlux * soap_new_ns1__WriteFlux(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WriteFlux(soap, n, NULL, NULL, NULL);
}

inline ns1__WriteFlux * soap_new_req_ns1__WriteFlux(
	struct soap *soap,
	const std::string& sid,
	const std::string& lpszDeviceId,
	const std::string& lpszDiretId,
	const std::string& lpszDriveWay,
	const std::string& lpszPeriodBegin,
	const std::string& lpszPeriodEnd,
	LONG64 lFlux,
	const std::string& lpszReserve1,
	const std::string& lpszReserve2,
	const std::string& lpszReserve3)
{
	ns1__WriteFlux *_p = ::soap_new_ns1__WriteFlux(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteFlux::sid = sid;
		_p->ns1__WriteFlux::lpszDeviceId = lpszDeviceId;
		_p->ns1__WriteFlux::lpszDiretId = lpszDiretId;
		_p->ns1__WriteFlux::lpszDriveWay = lpszDriveWay;
		_p->ns1__WriteFlux::lpszPeriodBegin = lpszPeriodBegin;
		_p->ns1__WriteFlux::lpszPeriodEnd = lpszPeriodEnd;
		_p->ns1__WriteFlux::lFlux = lFlux;
		_p->ns1__WriteFlux::lpszReserve1 = lpszReserve1;
		_p->ns1__WriteFlux::lpszReserve2 = lpszReserve2;
		_p->ns1__WriteFlux::lpszReserve3 = lpszReserve3;
	}
	return _p;
}

inline ns1__WriteFlux * soap_new_set_ns1__WriteFlux(
	struct soap *soap,
	const std::string& sid,
	const std::string& lpszDeviceId,
	const std::string& lpszDiretId,
	const std::string& lpszDriveWay,
	const std::string& lpszPeriodBegin,
	const std::string& lpszPeriodEnd,
	LONG64 lFlux,
	const std::string& lpszReserve1,
	const std::string& lpszReserve2,
	const std::string& lpszReserve3)
{
	ns1__WriteFlux *_p = ::soap_new_ns1__WriteFlux(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WriteFlux::sid = sid;
		_p->ns1__WriteFlux::lpszDeviceId = lpszDeviceId;
		_p->ns1__WriteFlux::lpszDiretId = lpszDiretId;
		_p->ns1__WriteFlux::lpszDriveWay = lpszDriveWay;
		_p->ns1__WriteFlux::lpszPeriodBegin = lpszPeriodBegin;
		_p->ns1__WriteFlux::lpszPeriodEnd = lpszPeriodEnd;
		_p->ns1__WriteFlux::lFlux = lFlux;
		_p->ns1__WriteFlux::lpszReserve1 = lpszReserve1;
		_p->ns1__WriteFlux::lpszReserve2 = lpszReserve2;
		_p->ns1__WriteFlux::lpszReserve3 = lpszReserve3;
	}
	return _p;
}

inline int soap_write_ns1__WriteFlux(struct soap *soap, ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFlux", p->soap_type() == SOAP_TYPE_ns1__WriteFlux ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WriteFlux(struct soap *soap, const char *URL, ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFlux", p->soap_type() == SOAP_TYPE_ns1__WriteFlux ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WriteFlux(struct soap *soap, const char *URL, ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFlux", p->soap_type() == SOAP_TYPE_ns1__WriteFlux ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WriteFlux(struct soap *soap, const char *URL, ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WriteFlux", p->soap_type() == SOAP_TYPE_ns1__WriteFlux ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WriteFlux * SOAP_FMAC4 soap_get_ns1__WriteFlux(struct soap*, ns1__WriteFlux *, const char*, const char*);

inline int soap_read_ns1__WriteFlux(struct soap *soap, ns1__WriteFlux *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WriteFlux(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WriteFlux(struct soap *soap, const char *URL, ns1__WriteFlux *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WriteFlux(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WriteFlux(struct soap *soap, ns1__WriteFlux *p)
{
	if (::soap_read_ns1__WriteFlux(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteVehicleInfoResponse(struct soap*, const char*, int, const ns1__NSyncWriteVehicleInfoResponse *, const char*);
SOAP_FMAC3 ns1__NSyncWriteVehicleInfoResponse * SOAP_FMAC4 soap_in_ns1__NSyncWriteVehicleInfoResponse(struct soap*, const char*, ns1__NSyncWriteVehicleInfoResponse *, const char*);
SOAP_FMAC1 ns1__NSyncWriteVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteVehicleInfoResponse * soap_new_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteVehicleInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteVehicleInfoResponse * soap_new_req_ns1__NSyncWriteVehicleInfoResponse(
	struct soap *soap)
{
	ns1__NSyncWriteVehicleInfoResponse *_p = ::soap_new_ns1__NSyncWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NSyncWriteVehicleInfoResponse * soap_new_set_ns1__NSyncWriteVehicleInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NSyncWriteVehicleInfoResponse *_p = ::soap_new_ns1__NSyncWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVehicleInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, ns1__NSyncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteVehicleInfoResponse * SOAP_FMAC4 soap_get_ns1__NSyncWriteVehicleInfoResponse(struct soap*, ns1__NSyncWriteVehicleInfoResponse *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, ns1__NSyncWriteVehicleInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteVehicleInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteVehicleInfoResponse(struct soap *soap, ns1__NSyncWriteVehicleInfoResponse *p)
{
	if (::soap_read_ns1__NSyncWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NSyncWriteVehicleInfo_DEFINED
#define SOAP_TYPE_ns1__NSyncWriteVehicleInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NSyncWriteVehicleInfo(struct soap*, const char*, int, const ns1__NSyncWriteVehicleInfo *, const char*);
SOAP_FMAC3 ns1__NSyncWriteVehicleInfo * SOAP_FMAC4 soap_in_ns1__NSyncWriteVehicleInfo(struct soap*, const char*, ns1__NSyncWriteVehicleInfo *, const char*);
SOAP_FMAC1 ns1__NSyncWriteVehicleInfo * SOAP_FMAC2 soap_instantiate_ns1__NSyncWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NSyncWriteVehicleInfo * soap_new_ns1__NSyncWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NSyncWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__NSyncWriteVehicleInfo * soap_new_req_ns1__NSyncWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteVehicleInfo *_p = ::soap_new_ns1__NSyncWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVehicleInfo::sid = sid;
		_p->ns1__NSyncWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteVehicleInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteVehicleInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteVehicleInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteVehicleInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteVehicleInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NSyncWriteVehicleInfo * soap_new_set_ns1__NSyncWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NSyncWriteVehicleInfo *_p = ::soap_new_ns1__NSyncWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NSyncWriteVehicleInfo::sid = sid;
		_p->ns1__NSyncWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__NSyncWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__NSyncWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__NSyncWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__NSyncWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NSyncWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__NSyncWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__NSyncWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NSyncWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NSyncWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NSyncWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__NSyncWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NSyncWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NSyncWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__NSyncWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__NSyncWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__NSyncWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NSyncWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NSyncWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NSyncWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NSyncWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__NSyncWriteVehicleInfo::strSendType = strSendType;
		_p->ns1__NSyncWriteVehicleInfo::strCarColor = strCarColor;
		_p->ns1__NSyncWriteVehicleInfo::strReserve1 = strReserve1;
		_p->ns1__NSyncWriteVehicleInfo::strReserve2 = strReserve2;
		_p->ns1__NSyncWriteVehicleInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NSyncWriteVehicleInfo(struct soap *soap, ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NSyncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NSyncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NSyncWriteVehicleInfo * SOAP_FMAC4 soap_get_ns1__NSyncWriteVehicleInfo(struct soap*, ns1__NSyncWriteVehicleInfo *, const char*, const char*);

inline int soap_read_ns1__NSyncWriteVehicleInfo(struct soap *soap, ns1__NSyncWriteVehicleInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NSyncWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NSyncWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NSyncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NSyncWriteVehicleInfo(struct soap *soap, ns1__NSyncWriteVehicleInfo *p)
{
	if (::soap_read_ns1__NSyncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteVehicleInfoExResponse_DEFINED
#define SOAP_TYPE_ns1__NWriteVehicleInfoExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteVehicleInfoExResponse(struct soap*, const char*, int, const ns1__NWriteVehicleInfoExResponse *, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfoExResponse * SOAP_FMAC4 soap_in_ns1__NWriteVehicleInfoExResponse(struct soap*, const char*, ns1__NWriteVehicleInfoExResponse *, const char*);
SOAP_FMAC1 ns1__NWriteVehicleInfoExResponse * SOAP_FMAC2 soap_instantiate_ns1__NWriteVehicleInfoExResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteVehicleInfoExResponse * soap_new_ns1__NWriteVehicleInfoExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteVehicleInfoExResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteVehicleInfoExResponse * soap_new_req_ns1__NWriteVehicleInfoExResponse(
	struct soap *soap)
{
	ns1__NWriteVehicleInfoExResponse *_p = ::soap_new_ns1__NWriteVehicleInfoExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NWriteVehicleInfoExResponse * soap_new_set_ns1__NWriteVehicleInfoExResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NWriteVehicleInfoExResponse *_p = ::soap_new_ns1__NWriteVehicleInfoExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfoExResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NWriteVehicleInfoExResponse(struct soap *soap, ns1__NWriteVehicleInfoExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoExResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteVehicleInfoExResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoExResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoExResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteVehicleInfoExResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoExResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoExResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteVehicleInfoExResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoExResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoExResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteVehicleInfoExResponse * SOAP_FMAC4 soap_get_ns1__NWriteVehicleInfoExResponse(struct soap*, ns1__NWriteVehicleInfoExResponse *, const char*, const char*);

inline int soap_read_ns1__NWriteVehicleInfoExResponse(struct soap *soap, ns1__NWriteVehicleInfoExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteVehicleInfoExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteVehicleInfoExResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteVehicleInfoExResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteVehicleInfoExResponse(struct soap *soap, ns1__NWriteVehicleInfoExResponse *p)
{
	if (::soap_read_ns1__NWriteVehicleInfoExResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteVehicleInfoEx_DEFINED
#define SOAP_TYPE_ns1__NWriteVehicleInfoEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteVehicleInfoEx(struct soap*, const char*, int, const ns1__NWriteVehicleInfoEx *, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfoEx * SOAP_FMAC4 soap_in_ns1__NWriteVehicleInfoEx(struct soap*, const char*, ns1__NWriteVehicleInfoEx *, const char*);
SOAP_FMAC1 ns1__NWriteVehicleInfoEx * SOAP_FMAC2 soap_instantiate_ns1__NWriteVehicleInfoEx(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteVehicleInfoEx * soap_new_ns1__NWriteVehicleInfoEx(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteVehicleInfoEx(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteVehicleInfoEx * soap_new_req_ns1__NWriteVehicleInfoEx(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWriteVehicleInfoEx *_p = ::soap_new_ns1__NWriteVehicleInfoEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfoEx::sid = sid;
		_p->ns1__NWriteVehicleInfoEx::strDeviceId = strDeviceId;
		_p->ns1__NWriteVehicleInfoEx::strVehicleId = strVehicleId;
		_p->ns1__NWriteVehicleInfoEx::strDeviceType = strDeviceType;
		_p->ns1__NWriteVehicleInfoEx::strDirectionId = strDirectionId;
		_p->ns1__NWriteVehicleInfoEx::strDriveWayId = strDriveWayId;
		_p->ns1__NWriteVehicleInfoEx::strLicense = strLicense;
		_p->ns1__NWriteVehicleInfoEx::strLicenseType = strLicenseType;
		_p->ns1__NWriteVehicleInfoEx::strPassDateTime = strPassDateTime;
		_p->ns1__NWriteVehicleInfoEx::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NWriteVehicleInfoEx::strRedLightLast = strRedLightLast;
		_p->ns1__NWriteVehicleInfoEx::lSpeed = lSpeed;
		_p->ns1__NWriteVehicleInfoEx::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NWriteVehicleInfoEx::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NWriteVehicleInfoEx::strViolationType = strViolationType;
		_p->ns1__NWriteVehicleInfoEx::strViolationType2 = strViolationType2;
		_p->ns1__NWriteVehicleInfoEx::lCarLength = lCarLength;
		_p->ns1__NWriteVehicleInfoEx::strLicenseColor = strLicenseColor;
		_p->ns1__NWriteVehicleInfoEx::strCarType = strCarType;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NWriteVehicleInfoEx::strPicRemotePath = strPicRemotePath;
		_p->ns1__NWriteVehicleInfoEx::strViolate = strViolate;
		_p->ns1__NWriteVehicleInfoEx::strSendType = strSendType;
		_p->ns1__NWriteVehicleInfoEx::strCarColor = strCarColor;
		_p->ns1__NWriteVehicleInfoEx::strReserve1 = strReserve1;
		_p->ns1__NWriteVehicleInfoEx::strReserve2 = strReserve2;
		_p->ns1__NWriteVehicleInfoEx::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NWriteVehicleInfoEx * soap_new_set_ns1__NWriteVehicleInfoEx(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWriteVehicleInfoEx *_p = ::soap_new_ns1__NWriteVehicleInfoEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfoEx::sid = sid;
		_p->ns1__NWriteVehicleInfoEx::strDeviceId = strDeviceId;
		_p->ns1__NWriteVehicleInfoEx::strVehicleId = strVehicleId;
		_p->ns1__NWriteVehicleInfoEx::strDeviceType = strDeviceType;
		_p->ns1__NWriteVehicleInfoEx::strDirectionId = strDirectionId;
		_p->ns1__NWriteVehicleInfoEx::strDriveWayId = strDriveWayId;
		_p->ns1__NWriteVehicleInfoEx::strLicense = strLicense;
		_p->ns1__NWriteVehicleInfoEx::strLicenseType = strLicenseType;
		_p->ns1__NWriteVehicleInfoEx::strPassDateTime = strPassDateTime;
		_p->ns1__NWriteVehicleInfoEx::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NWriteVehicleInfoEx::strRedLightLast = strRedLightLast;
		_p->ns1__NWriteVehicleInfoEx::lSpeed = lSpeed;
		_p->ns1__NWriteVehicleInfoEx::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NWriteVehicleInfoEx::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NWriteVehicleInfoEx::strViolationType = strViolationType;
		_p->ns1__NWriteVehicleInfoEx::strViolationType2 = strViolationType2;
		_p->ns1__NWriteVehicleInfoEx::lCarLength = lCarLength;
		_p->ns1__NWriteVehicleInfoEx::strLicenseColor = strLicenseColor;
		_p->ns1__NWriteVehicleInfoEx::strCarType = strCarType;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NWriteVehicleInfoEx::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NWriteVehicleInfoEx::strPicRemotePath = strPicRemotePath;
		_p->ns1__NWriteVehicleInfoEx::strViolate = strViolate;
		_p->ns1__NWriteVehicleInfoEx::strSendType = strSendType;
		_p->ns1__NWriteVehicleInfoEx::strCarColor = strCarColor;
		_p->ns1__NWriteVehicleInfoEx::strReserve1 = strReserve1;
		_p->ns1__NWriteVehicleInfoEx::strReserve2 = strReserve2;
		_p->ns1__NWriteVehicleInfoEx::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NWriteVehicleInfoEx(struct soap *soap, ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoEx", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoEx", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoEx ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoEx", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoEx ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoEx", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoEx ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteVehicleInfoEx * SOAP_FMAC4 soap_get_ns1__NWriteVehicleInfoEx(struct soap*, ns1__NWriteVehicleInfoEx *, const char*, const char*);

inline int soap_read_ns1__NWriteVehicleInfoEx(struct soap *soap, ns1__NWriteVehicleInfoEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteVehicleInfoEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoEx *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteVehicleInfoEx(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteVehicleInfoEx(struct soap *soap, ns1__NWriteVehicleInfoEx *p)
{
	if (::soap_read_ns1__NWriteVehicleInfoEx(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteVehicleInfoResponse_DEFINED
#define SOAP_TYPE_ns1__NWriteVehicleInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteVehicleInfoResponse(struct soap*, const char*, int, const ns1__NWriteVehicleInfoResponse *, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfoResponse * SOAP_FMAC4 soap_in_ns1__NWriteVehicleInfoResponse(struct soap*, const char*, ns1__NWriteVehicleInfoResponse *, const char*);
SOAP_FMAC1 ns1__NWriteVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__NWriteVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteVehicleInfoResponse * soap_new_ns1__NWriteVehicleInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteVehicleInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteVehicleInfoResponse * soap_new_req_ns1__NWriteVehicleInfoResponse(
	struct soap *soap)
{
	ns1__NWriteVehicleInfoResponse *_p = ::soap_new_ns1__NWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NWriteVehicleInfoResponse * soap_new_set_ns1__NWriteVehicleInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__NWriteVehicleInfoResponse *_p = ::soap_new_ns1__NWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__NWriteVehicleInfoResponse(struct soap *soap, ns1__NWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteVehicleInfoResponse * SOAP_FMAC4 soap_get_ns1__NWriteVehicleInfoResponse(struct soap*, ns1__NWriteVehicleInfoResponse *, const char*, const char*);

inline int soap_read_ns1__NWriteVehicleInfoResponse(struct soap *soap, ns1__NWriteVehicleInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteVehicleInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__NWriteVehicleInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteVehicleInfoResponse(struct soap *soap, ns1__NWriteVehicleInfoResponse *p)
{
	if (::soap_read_ns1__NWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NWriteVehicleInfo_DEFINED
#define SOAP_TYPE_ns1__NWriteVehicleInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NWriteVehicleInfo(struct soap*, const char*, int, const ns1__NWriteVehicleInfo *, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfo * SOAP_FMAC4 soap_in_ns1__NWriteVehicleInfo(struct soap*, const char*, ns1__NWriteVehicleInfo *, const char*);
SOAP_FMAC1 ns1__NWriteVehicleInfo * SOAP_FMAC2 soap_instantiate_ns1__NWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NWriteVehicleInfo * soap_new_ns1__NWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__NWriteVehicleInfo * soap_new_req_ns1__NWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWriteVehicleInfo *_p = ::soap_new_ns1__NWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfo::sid = sid;
		_p->ns1__NWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__NWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__NWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__NWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__NWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__NWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__NWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__NWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__NWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__NWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__NWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__NWriteVehicleInfo::strSendType = strSendType;
		_p->ns1__NWriteVehicleInfo::strCarColor = strCarColor;
		_p->ns1__NWriteVehicleInfo::strReserve1 = strReserve1;
		_p->ns1__NWriteVehicleInfo::strReserve2 = strReserve2;
		_p->ns1__NWriteVehicleInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__NWriteVehicleInfo * soap_new_set_ns1__NWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType,
	const std::string& strCarColor,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__NWriteVehicleInfo *_p = ::soap_new_ns1__NWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NWriteVehicleInfo::sid = sid;
		_p->ns1__NWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__NWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__NWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__NWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__NWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__NWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__NWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__NWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__NWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__NWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__NWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__NWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__NWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__NWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__NWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__NWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__NWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__NWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__NWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__NWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__NWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__NWriteVehicleInfo::strSendType = strSendType;
		_p->ns1__NWriteVehicleInfo::strCarColor = strCarColor;
		_p->ns1__NWriteVehicleInfo::strReserve1 = strReserve1;
		_p->ns1__NWriteVehicleInfo::strReserve2 = strReserve2;
		_p->ns1__NWriteVehicleInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__NWriteVehicleInfo(struct soap *soap, ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__NWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NWriteVehicleInfo * SOAP_FMAC4 soap_get_ns1__NWriteVehicleInfo(struct soap*, ns1__NWriteVehicleInfo *, const char*, const char*);

inline int soap_read_ns1__NWriteVehicleInfo(struct soap *soap, ns1__NWriteVehicleInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, ns1__NWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NWriteVehicleInfo(struct soap *soap, ns1__NWriteVehicleInfo *p)
{
	if (::soap_read_ns1__NWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__writeAlarmInfoResponse_DEFINED
#define SOAP_TYPE_ns1__writeAlarmInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__writeAlarmInfoResponse(struct soap*, const char*, int, const ns1__writeAlarmInfoResponse *, const char*);
SOAP_FMAC3 ns1__writeAlarmInfoResponse * SOAP_FMAC4 soap_in_ns1__writeAlarmInfoResponse(struct soap*, const char*, ns1__writeAlarmInfoResponse *, const char*);
SOAP_FMAC1 ns1__writeAlarmInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__writeAlarmInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__writeAlarmInfoResponse * soap_new_ns1__writeAlarmInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__writeAlarmInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__writeAlarmInfoResponse * soap_new_req_ns1__writeAlarmInfoResponse(
	struct soap *soap)
{
	ns1__writeAlarmInfoResponse *_p = ::soap_new_ns1__writeAlarmInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__writeAlarmInfoResponse * soap_new_set_ns1__writeAlarmInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__writeAlarmInfoResponse *_p = ::soap_new_ns1__writeAlarmInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeAlarmInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__writeAlarmInfoResponse(struct soap *soap, ns1__writeAlarmInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__writeAlarmInfoResponse(struct soap *soap, const char *URL, ns1__writeAlarmInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__writeAlarmInfoResponse(struct soap *soap, const char *URL, ns1__writeAlarmInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__writeAlarmInfoResponse(struct soap *soap, const char *URL, ns1__writeAlarmInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__writeAlarmInfoResponse * SOAP_FMAC4 soap_get_ns1__writeAlarmInfoResponse(struct soap*, ns1__writeAlarmInfoResponse *, const char*, const char*);

inline int soap_read_ns1__writeAlarmInfoResponse(struct soap *soap, ns1__writeAlarmInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__writeAlarmInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__writeAlarmInfoResponse(struct soap *soap, const char *URL, ns1__writeAlarmInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__writeAlarmInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__writeAlarmInfoResponse(struct soap *soap, ns1__writeAlarmInfoResponse *p)
{
	if (::soap_read_ns1__writeAlarmInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__writeAlarmInfo_DEFINED
#define SOAP_TYPE_ns1__writeAlarmInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__writeAlarmInfo(struct soap*, const char*, int, const ns1__writeAlarmInfo *, const char*);
SOAP_FMAC3 ns1__writeAlarmInfo * SOAP_FMAC4 soap_in_ns1__writeAlarmInfo(struct soap*, const char*, ns1__writeAlarmInfo *, const char*);
SOAP_FMAC1 ns1__writeAlarmInfo * SOAP_FMAC2 soap_instantiate_ns1__writeAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__writeAlarmInfo * soap_new_ns1__writeAlarmInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__writeAlarmInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__writeAlarmInfo * soap_new_req_ns1__writeAlarmInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectionId,
	const std::string& strDircName,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strAlarmDateTime,
	const std::string& strBriefCaseDescript,
	const std::string& strSuspType,
	const std::string& strSuspNo,
	const std::string& strAlarmLevel,
	const std::string& strPlaceId,
	const std::string& strPlaceName,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__writeAlarmInfo *_p = ::soap_new_ns1__writeAlarmInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeAlarmInfo::sid = sid;
		_p->ns1__writeAlarmInfo::strDeviceId = strDeviceId;
		_p->ns1__writeAlarmInfo::strDirectionId = strDirectionId;
		_p->ns1__writeAlarmInfo::strDircName = strDircName;
		_p->ns1__writeAlarmInfo::strLicense = strLicense;
		_p->ns1__writeAlarmInfo::strLicenseType = strLicenseType;
		_p->ns1__writeAlarmInfo::strPassDateTime = strPassDateTime;
		_p->ns1__writeAlarmInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__writeAlarmInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__writeAlarmInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__writeAlarmInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__writeAlarmInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__writeAlarmInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__writeAlarmInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__writeAlarmInfo::strAlarmDateTime = strAlarmDateTime;
		_p->ns1__writeAlarmInfo::strBriefCaseDescript = strBriefCaseDescript;
		_p->ns1__writeAlarmInfo::strSuspType = strSuspType;
		_p->ns1__writeAlarmInfo::strSuspNo = strSuspNo;
		_p->ns1__writeAlarmInfo::strAlarmLevel = strAlarmLevel;
		_p->ns1__writeAlarmInfo::strPlaceId = strPlaceId;
		_p->ns1__writeAlarmInfo::strPlaceName = strPlaceName;
		_p->ns1__writeAlarmInfo::strReserve1 = strReserve1;
		_p->ns1__writeAlarmInfo::strReserve2 = strReserve2;
		_p->ns1__writeAlarmInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline ns1__writeAlarmInfo * soap_new_set_ns1__writeAlarmInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectionId,
	const std::string& strDircName,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strAlarmDateTime,
	const std::string& strBriefCaseDescript,
	const std::string& strSuspType,
	const std::string& strSuspNo,
	const std::string& strAlarmLevel,
	const std::string& strPlaceId,
	const std::string& strPlaceName,
	const std::string& strReserve1,
	const std::string& strReserve2,
	const std::string& strReserve3)
{
	ns1__writeAlarmInfo *_p = ::soap_new_ns1__writeAlarmInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeAlarmInfo::sid = sid;
		_p->ns1__writeAlarmInfo::strDeviceId = strDeviceId;
		_p->ns1__writeAlarmInfo::strDirectionId = strDirectionId;
		_p->ns1__writeAlarmInfo::strDircName = strDircName;
		_p->ns1__writeAlarmInfo::strLicense = strLicense;
		_p->ns1__writeAlarmInfo::strLicenseType = strLicenseType;
		_p->ns1__writeAlarmInfo::strPassDateTime = strPassDateTime;
		_p->ns1__writeAlarmInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__writeAlarmInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__writeAlarmInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__writeAlarmInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__writeAlarmInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__writeAlarmInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__writeAlarmInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__writeAlarmInfo::strAlarmDateTime = strAlarmDateTime;
		_p->ns1__writeAlarmInfo::strBriefCaseDescript = strBriefCaseDescript;
		_p->ns1__writeAlarmInfo::strSuspType = strSuspType;
		_p->ns1__writeAlarmInfo::strSuspNo = strSuspNo;
		_p->ns1__writeAlarmInfo::strAlarmLevel = strAlarmLevel;
		_p->ns1__writeAlarmInfo::strPlaceId = strPlaceId;
		_p->ns1__writeAlarmInfo::strPlaceName = strPlaceName;
		_p->ns1__writeAlarmInfo::strReserve1 = strReserve1;
		_p->ns1__writeAlarmInfo::strReserve2 = strReserve2;
		_p->ns1__writeAlarmInfo::strReserve3 = strReserve3;
	}
	return _p;
}

inline int soap_write_ns1__writeAlarmInfo(struct soap *soap, ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfo", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__writeAlarmInfo(struct soap *soap, const char *URL, ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfo", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__writeAlarmInfo(struct soap *soap, const char *URL, ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfo", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__writeAlarmInfo(struct soap *soap, const char *URL, ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeAlarmInfo", p->soap_type() == SOAP_TYPE_ns1__writeAlarmInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__writeAlarmInfo * SOAP_FMAC4 soap_get_ns1__writeAlarmInfo(struct soap*, ns1__writeAlarmInfo *, const char*, const char*);

inline int soap_read_ns1__writeAlarmInfo(struct soap *soap, ns1__writeAlarmInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__writeAlarmInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__writeAlarmInfo(struct soap *soap, const char *URL, ns1__writeAlarmInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__writeAlarmInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__writeAlarmInfo(struct soap *soap, ns1__writeAlarmInfo *p)
{
	if (::soap_read_ns1__writeAlarmInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__querySyncTimeResponse_DEFINED
#define SOAP_TYPE_ns1__querySyncTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__querySyncTimeResponse(struct soap*, const char*, int, const ns1__querySyncTimeResponse *, const char*);
SOAP_FMAC3 ns1__querySyncTimeResponse * SOAP_FMAC4 soap_in_ns1__querySyncTimeResponse(struct soap*, const char*, ns1__querySyncTimeResponse *, const char*);
SOAP_FMAC1 ns1__querySyncTimeResponse * SOAP_FMAC2 soap_instantiate_ns1__querySyncTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__querySyncTimeResponse * soap_new_ns1__querySyncTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__querySyncTimeResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__querySyncTimeResponse * soap_new_req_ns1__querySyncTimeResponse(
	struct soap *soap)
{
	ns1__querySyncTimeResponse *_p = ::soap_new_ns1__querySyncTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__querySyncTimeResponse * soap_new_set_ns1__querySyncTimeResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__querySyncTimeResponse *_p = ::soap_new_ns1__querySyncTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__querySyncTimeResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__querySyncTimeResponse(struct soap *soap, ns1__querySyncTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTimeResponse", p->soap_type() == SOAP_TYPE_ns1__querySyncTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__querySyncTimeResponse(struct soap *soap, const char *URL, ns1__querySyncTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTimeResponse", p->soap_type() == SOAP_TYPE_ns1__querySyncTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__querySyncTimeResponse(struct soap *soap, const char *URL, ns1__querySyncTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTimeResponse", p->soap_type() == SOAP_TYPE_ns1__querySyncTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__querySyncTimeResponse(struct soap *soap, const char *URL, ns1__querySyncTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTimeResponse", p->soap_type() == SOAP_TYPE_ns1__querySyncTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__querySyncTimeResponse * SOAP_FMAC4 soap_get_ns1__querySyncTimeResponse(struct soap*, ns1__querySyncTimeResponse *, const char*, const char*);

inline int soap_read_ns1__querySyncTimeResponse(struct soap *soap, ns1__querySyncTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__querySyncTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__querySyncTimeResponse(struct soap *soap, const char *URL, ns1__querySyncTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__querySyncTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__querySyncTimeResponse(struct soap *soap, ns1__querySyncTimeResponse *p)
{
	if (::soap_read_ns1__querySyncTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__querySyncTime_DEFINED
#define SOAP_TYPE_ns1__querySyncTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__querySyncTime(struct soap*, const char*, int, const ns1__querySyncTime *, const char*);
SOAP_FMAC3 ns1__querySyncTime * SOAP_FMAC4 soap_in_ns1__querySyncTime(struct soap*, const char*, ns1__querySyncTime *, const char*);
SOAP_FMAC1 ns1__querySyncTime * SOAP_FMAC2 soap_instantiate_ns1__querySyncTime(struct soap*, int, const char*, const char*, size_t*);

inline ns1__querySyncTime * soap_new_ns1__querySyncTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__querySyncTime(soap, n, NULL, NULL, NULL);
}

inline ns1__querySyncTime * soap_new_req_ns1__querySyncTime(
	struct soap *soap,
	const std::string& sid)
{
	ns1__querySyncTime *_p = ::soap_new_ns1__querySyncTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__querySyncTime::sid = sid;
	}
	return _p;
}

inline ns1__querySyncTime * soap_new_set_ns1__querySyncTime(
	struct soap *soap,
	const std::string& sid)
{
	ns1__querySyncTime *_p = ::soap_new_ns1__querySyncTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__querySyncTime::sid = sid;
	}
	return _p;
}

inline int soap_write_ns1__querySyncTime(struct soap *soap, ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTime", p->soap_type() == SOAP_TYPE_ns1__querySyncTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__querySyncTime(struct soap *soap, const char *URL, ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTime", p->soap_type() == SOAP_TYPE_ns1__querySyncTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__querySyncTime(struct soap *soap, const char *URL, ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTime", p->soap_type() == SOAP_TYPE_ns1__querySyncTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__querySyncTime(struct soap *soap, const char *URL, ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:querySyncTime", p->soap_type() == SOAP_TYPE_ns1__querySyncTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__querySyncTime * SOAP_FMAC4 soap_get_ns1__querySyncTime(struct soap*, ns1__querySyncTime *, const char*, const char*);

inline int soap_read_ns1__querySyncTime(struct soap *soap, ns1__querySyncTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__querySyncTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__querySyncTime(struct soap *soap, const char *URL, ns1__querySyncTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__querySyncTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__querySyncTime(struct soap *soap, ns1__querySyncTime *p)
{
	if (::soap_read_ns1__querySyncTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__logoutResponse_DEFINED
#define SOAP_TYPE_ns1__logoutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logoutResponse(struct soap*, const char*, int, const ns1__logoutResponse *, const char*);
SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_in_ns1__logoutResponse(struct soap*, const char*, ns1__logoutResponse *, const char*);
SOAP_FMAC1 ns1__logoutResponse * SOAP_FMAC2 soap_instantiate_ns1__logoutResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__logoutResponse * soap_new_ns1__logoutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__logoutResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__logoutResponse * soap_new_req_ns1__logoutResponse(
	struct soap *soap)
{
	ns1__logoutResponse *_p = ::soap_new_ns1__logoutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__logoutResponse * soap_new_set_ns1__logoutResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__logoutResponse *_p = ::soap_new_ns1__logoutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__logoutResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__logoutResponse(struct soap *soap, ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE_ns1__logoutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__logoutResponse(struct soap *soap, const char *URL, ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE_ns1__logoutResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__logoutResponse(struct soap *soap, const char *URL, ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE_ns1__logoutResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__logoutResponse(struct soap *soap, const char *URL, ns1__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logoutResponse", p->soap_type() == SOAP_TYPE_ns1__logoutResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__logoutResponse * SOAP_FMAC4 soap_get_ns1__logoutResponse(struct soap*, ns1__logoutResponse *, const char*, const char*);

inline int soap_read_ns1__logoutResponse(struct soap *soap, ns1__logoutResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__logoutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__logoutResponse(struct soap *soap, const char *URL, ns1__logoutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__logoutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__logoutResponse(struct soap *soap, ns1__logoutResponse *p)
{
	if (::soap_read_ns1__logoutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__logout_DEFINED
#define SOAP_TYPE_ns1__logout_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__logout(struct soap*, const char*, int, const ns1__logout *, const char*);
SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_in_ns1__logout(struct soap*, const char*, ns1__logout *, const char*);
SOAP_FMAC1 ns1__logout * SOAP_FMAC2 soap_instantiate_ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline ns1__logout * soap_new_ns1__logout(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__logout(soap, n, NULL, NULL, NULL);
}

inline ns1__logout * soap_new_req_ns1__logout(
	struct soap *soap,
	const std::string& sid)
{
	ns1__logout *_p = ::soap_new_ns1__logout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__logout::sid = sid;
	}
	return _p;
}

inline ns1__logout * soap_new_set_ns1__logout(
	struct soap *soap,
	const std::string& sid)
{
	ns1__logout *_p = ::soap_new_ns1__logout(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__logout::sid = sid;
	}
	return _p;
}

inline int soap_write_ns1__logout(struct soap *soap, ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE_ns1__logout ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__logout(struct soap *soap, const char *URL, ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE_ns1__logout ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__logout(struct soap *soap, const char *URL, ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE_ns1__logout ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__logout(struct soap *soap, const char *URL, ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:logout", p->soap_type() == SOAP_TYPE_ns1__logout ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__logout * SOAP_FMAC4 soap_get_ns1__logout(struct soap*, ns1__logout *, const char*, const char*);

inline int soap_read_ns1__logout(struct soap *soap, ns1__logout *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__logout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__logout(struct soap *soap, const char *URL, ns1__logout *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__logout(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__logout(struct soap *soap, ns1__logout *p)
{
	if (::soap_read_ns1__logout(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__queryViolateSpeedResponse_DEFINED
#define SOAP_TYPE_ns1__queryViolateSpeedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryViolateSpeedResponse(struct soap*, const char*, int, const ns1__queryViolateSpeedResponse *, const char*);
SOAP_FMAC3 ns1__queryViolateSpeedResponse * SOAP_FMAC4 soap_in_ns1__queryViolateSpeedResponse(struct soap*, const char*, ns1__queryViolateSpeedResponse *, const char*);
SOAP_FMAC1 ns1__queryViolateSpeedResponse * SOAP_FMAC2 soap_instantiate_ns1__queryViolateSpeedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__queryViolateSpeedResponse * soap_new_ns1__queryViolateSpeedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__queryViolateSpeedResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__queryViolateSpeedResponse * soap_new_req_ns1__queryViolateSpeedResponse(
	struct soap *soap)
{
	ns1__queryViolateSpeedResponse *_p = ::soap_new_ns1__queryViolateSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__queryViolateSpeedResponse * soap_new_set_ns1__queryViolateSpeedResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__queryViolateSpeedResponse *_p = ::soap_new_ns1__queryViolateSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryViolateSpeedResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__queryViolateSpeedResponse(struct soap *soap, ns1__queryViolateSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__queryViolateSpeedResponse(struct soap *soap, const char *URL, ns1__queryViolateSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__queryViolateSpeedResponse(struct soap *soap, const char *URL, ns1__queryViolateSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__queryViolateSpeedResponse(struct soap *soap, const char *URL, ns1__queryViolateSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__queryViolateSpeedResponse * SOAP_FMAC4 soap_get_ns1__queryViolateSpeedResponse(struct soap*, ns1__queryViolateSpeedResponse *, const char*, const char*);

inline int soap_read_ns1__queryViolateSpeedResponse(struct soap *soap, ns1__queryViolateSpeedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__queryViolateSpeedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__queryViolateSpeedResponse(struct soap *soap, const char *URL, ns1__queryViolateSpeedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__queryViolateSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__queryViolateSpeedResponse(struct soap *soap, ns1__queryViolateSpeedResponse *p)
{
	if (::soap_read_ns1__queryViolateSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__queryViolateSpeed_DEFINED
#define SOAP_TYPE_ns1__queryViolateSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryViolateSpeed(struct soap*, const char*, int, const ns1__queryViolateSpeed *, const char*);
SOAP_FMAC3 ns1__queryViolateSpeed * SOAP_FMAC4 soap_in_ns1__queryViolateSpeed(struct soap*, const char*, ns1__queryViolateSpeed *, const char*);
SOAP_FMAC1 ns1__queryViolateSpeed * SOAP_FMAC2 soap_instantiate_ns1__queryViolateSpeed(struct soap*, int, const char*, const char*, size_t*);

inline ns1__queryViolateSpeed * soap_new_ns1__queryViolateSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__queryViolateSpeed(soap, n, NULL, NULL, NULL);
}

inline ns1__queryViolateSpeed * soap_new_req_ns1__queryViolateSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectId,
	const std::string& strCarType)
{
	ns1__queryViolateSpeed *_p = ::soap_new_ns1__queryViolateSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryViolateSpeed::sid = sid;
		_p->ns1__queryViolateSpeed::strDeviceId = strDeviceId;
		_p->ns1__queryViolateSpeed::strDirectId = strDirectId;
		_p->ns1__queryViolateSpeed::strCarType = strCarType;
	}
	return _p;
}

inline ns1__queryViolateSpeed * soap_new_set_ns1__queryViolateSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectId,
	const std::string& strCarType)
{
	ns1__queryViolateSpeed *_p = ::soap_new_ns1__queryViolateSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryViolateSpeed::sid = sid;
		_p->ns1__queryViolateSpeed::strDeviceId = strDeviceId;
		_p->ns1__queryViolateSpeed::strDirectId = strDirectId;
		_p->ns1__queryViolateSpeed::strCarType = strCarType;
	}
	return _p;
}

inline int soap_write_ns1__queryViolateSpeed(struct soap *soap, ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeed", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__queryViolateSpeed(struct soap *soap, const char *URL, ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeed", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__queryViolateSpeed(struct soap *soap, const char *URL, ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeed", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__queryViolateSpeed(struct soap *soap, const char *URL, ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryViolateSpeed", p->soap_type() == SOAP_TYPE_ns1__queryViolateSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__queryViolateSpeed * SOAP_FMAC4 soap_get_ns1__queryViolateSpeed(struct soap*, ns1__queryViolateSpeed *, const char*, const char*);

inline int soap_read_ns1__queryViolateSpeed(struct soap *soap, ns1__queryViolateSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__queryViolateSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__queryViolateSpeed(struct soap *soap, const char *URL, ns1__queryViolateSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__queryViolateSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__queryViolateSpeed(struct soap *soap, ns1__queryViolateSpeed *p)
{
	if (::soap_read_ns1__queryViolateSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__queryLimitSpeedResponse_DEFINED
#define SOAP_TYPE_ns1__queryLimitSpeedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryLimitSpeedResponse(struct soap*, const char*, int, const ns1__queryLimitSpeedResponse *, const char*);
SOAP_FMAC3 ns1__queryLimitSpeedResponse * SOAP_FMAC4 soap_in_ns1__queryLimitSpeedResponse(struct soap*, const char*, ns1__queryLimitSpeedResponse *, const char*);
SOAP_FMAC1 ns1__queryLimitSpeedResponse * SOAP_FMAC2 soap_instantiate_ns1__queryLimitSpeedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__queryLimitSpeedResponse * soap_new_ns1__queryLimitSpeedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__queryLimitSpeedResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__queryLimitSpeedResponse * soap_new_req_ns1__queryLimitSpeedResponse(
	struct soap *soap)
{
	ns1__queryLimitSpeedResponse *_p = ::soap_new_ns1__queryLimitSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__queryLimitSpeedResponse * soap_new_set_ns1__queryLimitSpeedResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__queryLimitSpeedResponse *_p = ::soap_new_ns1__queryLimitSpeedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryLimitSpeedResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__queryLimitSpeedResponse(struct soap *soap, ns1__queryLimitSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__queryLimitSpeedResponse(struct soap *soap, const char *URL, ns1__queryLimitSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__queryLimitSpeedResponse(struct soap *soap, const char *URL, ns1__queryLimitSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__queryLimitSpeedResponse(struct soap *soap, const char *URL, ns1__queryLimitSpeedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeedResponse", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__queryLimitSpeedResponse * SOAP_FMAC4 soap_get_ns1__queryLimitSpeedResponse(struct soap*, ns1__queryLimitSpeedResponse *, const char*, const char*);

inline int soap_read_ns1__queryLimitSpeedResponse(struct soap *soap, ns1__queryLimitSpeedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__queryLimitSpeedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__queryLimitSpeedResponse(struct soap *soap, const char *URL, ns1__queryLimitSpeedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__queryLimitSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__queryLimitSpeedResponse(struct soap *soap, ns1__queryLimitSpeedResponse *p)
{
	if (::soap_read_ns1__queryLimitSpeedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__queryLimitSpeed_DEFINED
#define SOAP_TYPE_ns1__queryLimitSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryLimitSpeed(struct soap*, const char*, int, const ns1__queryLimitSpeed *, const char*);
SOAP_FMAC3 ns1__queryLimitSpeed * SOAP_FMAC4 soap_in_ns1__queryLimitSpeed(struct soap*, const char*, ns1__queryLimitSpeed *, const char*);
SOAP_FMAC1 ns1__queryLimitSpeed * SOAP_FMAC2 soap_instantiate_ns1__queryLimitSpeed(struct soap*, int, const char*, const char*, size_t*);

inline ns1__queryLimitSpeed * soap_new_ns1__queryLimitSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__queryLimitSpeed(soap, n, NULL, NULL, NULL);
}

inline ns1__queryLimitSpeed * soap_new_req_ns1__queryLimitSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectId,
	const std::string& strCarType)
{
	ns1__queryLimitSpeed *_p = ::soap_new_ns1__queryLimitSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryLimitSpeed::sid = sid;
		_p->ns1__queryLimitSpeed::strDeviceId = strDeviceId;
		_p->ns1__queryLimitSpeed::strDirectId = strDirectId;
		_p->ns1__queryLimitSpeed::strCarType = strCarType;
	}
	return _p;
}

inline ns1__queryLimitSpeed * soap_new_set_ns1__queryLimitSpeed(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strDirectId,
	const std::string& strCarType)
{
	ns1__queryLimitSpeed *_p = ::soap_new_ns1__queryLimitSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__queryLimitSpeed::sid = sid;
		_p->ns1__queryLimitSpeed::strDeviceId = strDeviceId;
		_p->ns1__queryLimitSpeed::strDirectId = strDirectId;
		_p->ns1__queryLimitSpeed::strCarType = strCarType;
	}
	return _p;
}

inline int soap_write_ns1__queryLimitSpeed(struct soap *soap, ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeed", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__queryLimitSpeed(struct soap *soap, const char *URL, ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeed", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__queryLimitSpeed(struct soap *soap, const char *URL, ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeed", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__queryLimitSpeed(struct soap *soap, const char *URL, ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:queryLimitSpeed", p->soap_type() == SOAP_TYPE_ns1__queryLimitSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__queryLimitSpeed * SOAP_FMAC4 soap_get_ns1__queryLimitSpeed(struct soap*, ns1__queryLimitSpeed *, const char*, const char*);

inline int soap_read_ns1__queryLimitSpeed(struct soap *soap, ns1__queryLimitSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__queryLimitSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__queryLimitSpeed(struct soap *soap, const char *URL, ns1__queryLimitSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__queryLimitSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__queryLimitSpeed(struct soap *soap, ns1__queryLimitSpeed *p)
{
	if (::soap_read_ns1__queryLimitSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__loginResponse_DEFINED
#define SOAP_TYPE_ns1__loginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loginResponse(struct soap*, const char*, int, const ns1__loginResponse *, const char*);
SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_in_ns1__loginResponse(struct soap*, const char*, ns1__loginResponse *, const char*);
SOAP_FMAC1 ns1__loginResponse * SOAP_FMAC2 soap_instantiate_ns1__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__loginResponse * soap_new_ns1__loginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__loginResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__loginResponse * soap_new_req_ns1__loginResponse(
	struct soap *soap)
{
	ns1__loginResponse *_p = ::soap_new_ns1__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__loginResponse * soap_new_set_ns1__loginResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__loginResponse *_p = ::soap_new_ns1__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__loginResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__loginResponse(struct soap *soap, ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE_ns1__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__loginResponse(struct soap *soap, const char *URL, ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE_ns1__loginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__loginResponse(struct soap *soap, const char *URL, ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE_ns1__loginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__loginResponse(struct soap *soap, const char *URL, ns1__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginResponse", p->soap_type() == SOAP_TYPE_ns1__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_get_ns1__loginResponse(struct soap*, ns1__loginResponse *, const char*, const char*);

inline int soap_read_ns1__loginResponse(struct soap *soap, ns1__loginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__loginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__loginResponse(struct soap *soap, const char *URL, ns1__loginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__loginResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__loginResponse(struct soap *soap, ns1__loginResponse *p)
{
	if (::soap_read_ns1__loginResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__login_DEFINED
#define SOAP_TYPE_ns1__login_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__login(struct soap*, const char*, int, const ns1__login *, const char*);
SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_in_ns1__login(struct soap*, const char*, ns1__login *, const char*);
SOAP_FMAC1 ns1__login * SOAP_FMAC2 soap_instantiate_ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline ns1__login * soap_new_ns1__login(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__login(soap, n, NULL, NULL, NULL);
}

inline ns1__login * soap_new_req_ns1__login(
	struct soap *soap,
	const std::string& strDeviceId,
	const std::string& strDeviceKey)
{
	ns1__login *_p = ::soap_new_ns1__login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__login::strDeviceId = strDeviceId;
		_p->ns1__login::strDeviceKey = strDeviceKey;
	}
	return _p;
}

inline ns1__login * soap_new_set_ns1__login(
	struct soap *soap,
	const std::string& strDeviceId,
	const std::string& strDeviceKey)
{
	ns1__login *_p = ::soap_new_ns1__login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__login::strDeviceId = strDeviceId;
		_p->ns1__login::strDeviceKey = strDeviceKey;
	}
	return _p;
}

inline int soap_write_ns1__login(struct soap *soap, ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE_ns1__login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__login(struct soap *soap, const char *URL, ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE_ns1__login ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__login(struct soap *soap, const char *URL, ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE_ns1__login ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__login(struct soap *soap, const char *URL, ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:login", p->soap_type() == SOAP_TYPE_ns1__login ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_get_ns1__login(struct soap*, ns1__login *, const char*, const char*);

inline int soap_read_ns1__login(struct soap *soap, ns1__login *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__login(struct soap *soap, const char *URL, ns1__login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__login(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__login(struct soap *soap, ns1__login *p)
{
	if (::soap_read_ns1__login(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__writeVehicleInfoResponse_DEFINED
#define SOAP_TYPE_ns1__writeVehicleInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__writeVehicleInfoResponse(struct soap*, const char*, int, const ns1__writeVehicleInfoResponse *, const char*);
SOAP_FMAC3 ns1__writeVehicleInfoResponse * SOAP_FMAC4 soap_in_ns1__writeVehicleInfoResponse(struct soap*, const char*, ns1__writeVehicleInfoResponse *, const char*);
SOAP_FMAC1 ns1__writeVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__writeVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__writeVehicleInfoResponse * soap_new_ns1__writeVehicleInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__writeVehicleInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__writeVehicleInfoResponse * soap_new_req_ns1__writeVehicleInfoResponse(
	struct soap *soap)
{
	ns1__writeVehicleInfoResponse *_p = ::soap_new_ns1__writeVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__writeVehicleInfoResponse * soap_new_set_ns1__writeVehicleInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__writeVehicleInfoResponse *_p = ::soap_new_ns1__writeVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeVehicleInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__writeVehicleInfoResponse(struct soap *soap, ns1__writeVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__writeVehicleInfoResponse(struct soap *soap, const char *URL, ns1__writeVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__writeVehicleInfoResponse(struct soap *soap, const char *URL, ns1__writeVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__writeVehicleInfoResponse(struct soap *soap, const char *URL, ns1__writeVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__writeVehicleInfoResponse * SOAP_FMAC4 soap_get_ns1__writeVehicleInfoResponse(struct soap*, ns1__writeVehicleInfoResponse *, const char*, const char*);

inline int soap_read_ns1__writeVehicleInfoResponse(struct soap *soap, ns1__writeVehicleInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__writeVehicleInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__writeVehicleInfoResponse(struct soap *soap, const char *URL, ns1__writeVehicleInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__writeVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__writeVehicleInfoResponse(struct soap *soap, ns1__writeVehicleInfoResponse *p)
{
	if (::soap_read_ns1__writeVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__writeVehicleInfo_DEFINED
#define SOAP_TYPE_ns1__writeVehicleInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__writeVehicleInfo(struct soap*, const char*, int, const ns1__writeVehicleInfo *, const char*);
SOAP_FMAC3 ns1__writeVehicleInfo * SOAP_FMAC4 soap_in_ns1__writeVehicleInfo(struct soap*, const char*, ns1__writeVehicleInfo *, const char*);
SOAP_FMAC1 ns1__writeVehicleInfo * SOAP_FMAC2 soap_instantiate_ns1__writeVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__writeVehicleInfo * soap_new_ns1__writeVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__writeVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__writeVehicleInfo * soap_new_req_ns1__writeVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType)
{
	ns1__writeVehicleInfo *_p = ::soap_new_ns1__writeVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeVehicleInfo::sid = sid;
		_p->ns1__writeVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__writeVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__writeVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__writeVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__writeVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__writeVehicleInfo::strLicense = strLicense;
		_p->ns1__writeVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__writeVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__writeVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__writeVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__writeVehicleInfo::lSpeed = lSpeed;
		_p->ns1__writeVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__writeVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__writeVehicleInfo::strViolationType = strViolationType;
		_p->ns1__writeVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__writeVehicleInfo::lCarLength = lCarLength;
		_p->ns1__writeVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__writeVehicleInfo::strCarType = strCarType;
		_p->ns1__writeVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__writeVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__writeVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__writeVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__writeVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__writeVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__writeVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__writeVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__writeVehicleInfo::strViolate = strViolate;
		_p->ns1__writeVehicleInfo::strSendType = strSendType;
	}
	return _p;
}

inline ns1__writeVehicleInfo * soap_new_set_ns1__writeVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const std::string& strPicLocalPath1,
	const std::string& strPicLocalPath2,
	const std::string& strPicLocalPath3,
	const std::string& strPicLocalPath4,
	const std::string& strPicLocalPath5,
	const std::string& strPicLocalPath6,
	const std::string& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType)
{
	ns1__writeVehicleInfo *_p = ::soap_new_ns1__writeVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__writeVehicleInfo::sid = sid;
		_p->ns1__writeVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__writeVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__writeVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__writeVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__writeVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__writeVehicleInfo::strLicense = strLicense;
		_p->ns1__writeVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__writeVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__writeVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__writeVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__writeVehicleInfo::lSpeed = lSpeed;
		_p->ns1__writeVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__writeVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__writeVehicleInfo::strViolationType = strViolationType;
		_p->ns1__writeVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__writeVehicleInfo::lCarLength = lCarLength;
		_p->ns1__writeVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__writeVehicleInfo::strCarType = strCarType;
		_p->ns1__writeVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__writeVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__writeVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__writeVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__writeVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__writeVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__writeVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__writeVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__writeVehicleInfo::strViolate = strViolate;
		_p->ns1__writeVehicleInfo::strSendType = strSendType;
	}
	return _p;
}

inline int soap_write_ns1__writeVehicleInfo(struct soap *soap, ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__writeVehicleInfo(struct soap *soap, const char *URL, ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__writeVehicleInfo(struct soap *soap, const char *URL, ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__writeVehicleInfo(struct soap *soap, const char *URL, ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:writeVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__writeVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__writeVehicleInfo * SOAP_FMAC4 soap_get_ns1__writeVehicleInfo(struct soap*, ns1__writeVehicleInfo *, const char*, const char*);

inline int soap_read_ns1__writeVehicleInfo(struct soap *soap, ns1__writeVehicleInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__writeVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__writeVehicleInfo(struct soap *soap, const char *URL, ns1__writeVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__writeVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__writeVehicleInfo(struct soap *soap, ns1__writeVehicleInfo *p)
{
	if (::soap_read_ns1__writeVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__syncWriteVehicleInfoResponse_DEFINED
#define SOAP_TYPE_ns1__syncWriteVehicleInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__syncWriteVehicleInfoResponse(struct soap*, const char*, int, const ns1__syncWriteVehicleInfoResponse *, const char*);
SOAP_FMAC3 ns1__syncWriteVehicleInfoResponse * SOAP_FMAC4 soap_in_ns1__syncWriteVehicleInfoResponse(struct soap*, const char*, ns1__syncWriteVehicleInfoResponse *, const char*);
SOAP_FMAC1 ns1__syncWriteVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__syncWriteVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__syncWriteVehicleInfoResponse * soap_new_ns1__syncWriteVehicleInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__syncWriteVehicleInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__syncWriteVehicleInfoResponse * soap_new_req_ns1__syncWriteVehicleInfoResponse(
	struct soap *soap)
{
	ns1__syncWriteVehicleInfoResponse *_p = ::soap_new_ns1__syncWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__syncWriteVehicleInfoResponse * soap_new_set_ns1__syncWriteVehicleInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__syncWriteVehicleInfoResponse *_p = ::soap_new_ns1__syncWriteVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__syncWriteVehicleInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__syncWriteVehicleInfoResponse(struct soap *soap, ns1__syncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__syncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__syncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__syncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfoResponse", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__syncWriteVehicleInfoResponse * SOAP_FMAC4 soap_get_ns1__syncWriteVehicleInfoResponse(struct soap*, ns1__syncWriteVehicleInfoResponse *, const char*, const char*);

inline int soap_read_ns1__syncWriteVehicleInfoResponse(struct soap *soap, ns1__syncWriteVehicleInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__syncWriteVehicleInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__syncWriteVehicleInfoResponse(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__syncWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__syncWriteVehicleInfoResponse(struct soap *soap, ns1__syncWriteVehicleInfoResponse *p)
{
	if (::soap_read_ns1__syncWriteVehicleInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__syncWriteVehicleInfo_DEFINED
#define SOAP_TYPE_ns1__syncWriteVehicleInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__syncWriteVehicleInfo(struct soap*, const char*, int, const ns1__syncWriteVehicleInfo *, const char*);
SOAP_FMAC3 ns1__syncWriteVehicleInfo * SOAP_FMAC4 soap_in_ns1__syncWriteVehicleInfo(struct soap*, const char*, ns1__syncWriteVehicleInfo *, const char*);
SOAP_FMAC1 ns1__syncWriteVehicleInfo * SOAP_FMAC2 soap_instantiate_ns1__syncWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__syncWriteVehicleInfo * soap_new_ns1__syncWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__syncWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__syncWriteVehicleInfo * soap_new_req_ns1__syncWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType)
{
	ns1__syncWriteVehicleInfo *_p = ::soap_new_ns1__syncWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__syncWriteVehicleInfo::sid = sid;
		_p->ns1__syncWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__syncWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__syncWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__syncWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__syncWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__syncWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__syncWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__syncWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__syncWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__syncWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__syncWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__syncWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__syncWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__syncWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__syncWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__syncWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__syncWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__syncWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__syncWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__syncWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__syncWriteVehicleInfo::strSendType = strSendType;
	}
	return _p;
}

inline ns1__syncWriteVehicleInfo * soap_new_set_ns1__syncWriteVehicleInfo(
	struct soap *soap,
	const std::string& sid,
	const std::string& strDeviceId,
	const std::string& strVehicleId,
	const std::string& strDeviceType,
	const std::string& strDirectionId,
	const std::string& strDriveWayId,
	const std::string& strLicense,
	const std::string& strLicenseType,
	const std::string& strPassDateTime,
	const std::string& strRedLightBeginTime,
	const std::string& strRedLightLast,
	LONG64 lSpeed,
	LONG64 lLargeLimitSpeed,
	LONG64 lMiniLimitSpeed,
	const std::string& strViolationType,
	const std::string& strViolationType2,
	LONG64 lCarLength,
	const std::string& strLicenseColor,
	const std::string& strCarType,
	const xsd__base64Binary& strPicLocalPath1,
	const xsd__base64Binary& strPicLocalPath2,
	const xsd__base64Binary& strPicLocalPath3,
	const xsd__base64Binary& strPicLocalPath4,
	const xsd__base64Binary& strPicLocalPath5,
	const xsd__base64Binary& strPicLocalPath6,
	const xsd__base64Binary& strPicLocalPath7,
	const std::string& strPicRemotePath,
	const std::string& strViolate,
	const std::string& strSendType)
{
	ns1__syncWriteVehicleInfo *_p = ::soap_new_ns1__syncWriteVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__syncWriteVehicleInfo::sid = sid;
		_p->ns1__syncWriteVehicleInfo::strDeviceId = strDeviceId;
		_p->ns1__syncWriteVehicleInfo::strVehicleId = strVehicleId;
		_p->ns1__syncWriteVehicleInfo::strDeviceType = strDeviceType;
		_p->ns1__syncWriteVehicleInfo::strDirectionId = strDirectionId;
		_p->ns1__syncWriteVehicleInfo::strDriveWayId = strDriveWayId;
		_p->ns1__syncWriteVehicleInfo::strLicense = strLicense;
		_p->ns1__syncWriteVehicleInfo::strLicenseType = strLicenseType;
		_p->ns1__syncWriteVehicleInfo::strPassDateTime = strPassDateTime;
		_p->ns1__syncWriteVehicleInfo::strRedLightBeginTime = strRedLightBeginTime;
		_p->ns1__syncWriteVehicleInfo::strRedLightLast = strRedLightLast;
		_p->ns1__syncWriteVehicleInfo::lSpeed = lSpeed;
		_p->ns1__syncWriteVehicleInfo::lLargeLimitSpeed = lLargeLimitSpeed;
		_p->ns1__syncWriteVehicleInfo::lMiniLimitSpeed = lMiniLimitSpeed;
		_p->ns1__syncWriteVehicleInfo::strViolationType = strViolationType;
		_p->ns1__syncWriteVehicleInfo::strViolationType2 = strViolationType2;
		_p->ns1__syncWriteVehicleInfo::lCarLength = lCarLength;
		_p->ns1__syncWriteVehicleInfo::strLicenseColor = strLicenseColor;
		_p->ns1__syncWriteVehicleInfo::strCarType = strCarType;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath1 = strPicLocalPath1;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath2 = strPicLocalPath2;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath3 = strPicLocalPath3;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath4 = strPicLocalPath4;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath5 = strPicLocalPath5;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath6 = strPicLocalPath6;
		_p->ns1__syncWriteVehicleInfo::strPicLocalPath7 = strPicLocalPath7;
		_p->ns1__syncWriteVehicleInfo::strPicRemotePath = strPicRemotePath;
		_p->ns1__syncWriteVehicleInfo::strViolate = strViolate;
		_p->ns1__syncWriteVehicleInfo::strSendType = strSendType;
	}
	return _p;
}

inline int soap_write_ns1__syncWriteVehicleInfo(struct soap *soap, ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:syncWriteVehicleInfo", p->soap_type() == SOAP_TYPE_ns1__syncWriteVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__syncWriteVehicleInfo * SOAP_FMAC4 soap_get_ns1__syncWriteVehicleInfo(struct soap*, ns1__syncWriteVehicleInfo *, const char*, const char*);

inline int soap_read_ns1__syncWriteVehicleInfo(struct soap *soap, ns1__syncWriteVehicleInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__syncWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, ns1__syncWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__syncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__syncWriteVehicleInfo(struct soap *soap, ns1__syncWriteVehicleInfo *p)
{
	if (::soap_read_ns1__syncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Exception_DEFINED
#define SOAP_TYPE_ns1__Exception_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Exception(struct soap*, const char*, int, const ns1__Exception *, const char*);
SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_in_ns1__Exception(struct soap*, const char*, ns1__Exception *, const char*);
SOAP_FMAC1 ns1__Exception * SOAP_FMAC2 soap_instantiate_ns1__Exception(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Exception * soap_new_ns1__Exception(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Exception(soap, n, NULL, NULL, NULL);
}

inline ns1__Exception * soap_new_req_ns1__Exception(
	struct soap *soap)
{
	ns1__Exception *_p = ::soap_new_ns1__Exception(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Exception * soap_new_set_ns1__Exception(
	struct soap *soap,
	std::string *message)
{
	ns1__Exception *_p = ::soap_new_ns1__Exception(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Exception::message = message;
	}
	return _p;
}

inline int soap_write_ns1__Exception(struct soap *soap, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Exception", p->soap_type() == SOAP_TYPE_ns1__Exception ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Exception * SOAP_FMAC4 soap_get_ns1__Exception(struct soap*, ns1__Exception *, const char*, const char*);

inline int soap_read_ns1__Exception(struct soap *soap, ns1__Exception *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Exception(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Exception(struct soap *soap, const char *URL, ns1__Exception *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Exception(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Exception(struct soap *soap, ns1__Exception *p)
{
	if (::soap_read_ns1__Exception(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__WriteAreaSpeed_DEFINED
#define SOAP_TYPE___ns1__WriteAreaSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WriteAreaSpeed(struct soap*, struct __ns1__WriteAreaSpeed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WriteAreaSpeed(struct soap*, const struct __ns1__WriteAreaSpeed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WriteAreaSpeed(struct soap*, const char*, int, const struct __ns1__WriteAreaSpeed *, const char*);
SOAP_FMAC3 struct __ns1__WriteAreaSpeed * SOAP_FMAC4 soap_in___ns1__WriteAreaSpeed(struct soap*, const char*, struct __ns1__WriteAreaSpeed *, const char*);
SOAP_FMAC1 struct __ns1__WriteAreaSpeed * SOAP_FMAC2 soap_instantiate___ns1__WriteAreaSpeed(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WriteAreaSpeed * soap_new___ns1__WriteAreaSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__WriteAreaSpeed(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__WriteAreaSpeed * soap_new_req___ns1__WriteAreaSpeed(
	struct soap *soap)
{
	struct __ns1__WriteAreaSpeed *_p = ::soap_new___ns1__WriteAreaSpeed(soap);
	if (_p)
	{	::soap_default___ns1__WriteAreaSpeed(soap, _p);
	}
	return _p;
}

inline struct __ns1__WriteAreaSpeed * soap_new_set___ns1__WriteAreaSpeed(
	struct soap *soap,
	ns1__WriteAreaSpeed *ns1__WriteAreaSpeed_)
{
	struct __ns1__WriteAreaSpeed *_p = ::soap_new___ns1__WriteAreaSpeed(soap);
	if (_p)
	{	::soap_default___ns1__WriteAreaSpeed(soap, _p);
		_p->ns1__WriteAreaSpeed_ = ns1__WriteAreaSpeed_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WriteAreaSpeed(struct soap*, const struct __ns1__WriteAreaSpeed *, const char*, const char*);

inline int soap_write___ns1__WriteAreaSpeed(struct soap *soap, struct __ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__WriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__WriteAreaSpeed(soap, p, "-ns1:WriteAreaSpeed", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__WriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__WriteAreaSpeed(soap, p, "-ns1:WriteAreaSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__WriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__WriteAreaSpeed(soap, p, "-ns1:WriteAreaSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__WriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__WriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__WriteAreaSpeed(soap, p, "-ns1:WriteAreaSpeed", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__WriteAreaSpeed * SOAP_FMAC4 soap_get___ns1__WriteAreaSpeed(struct soap*, struct __ns1__WriteAreaSpeed *, const char*, const char*);

inline int soap_read___ns1__WriteAreaSpeed(struct soap *soap, struct __ns1__WriteAreaSpeed *p)
{
	if (p)
	{	::soap_default___ns1__WriteAreaSpeed(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__WriteAreaSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__WriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__WriteAreaSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__WriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__WriteAreaSpeed(struct soap *soap, struct __ns1__WriteAreaSpeed *p)
{
	if (::soap_read___ns1__WriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__SyncWriteAreaSpeed_DEFINED
#define SOAP_TYPE___ns1__SyncWriteAreaSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SyncWriteAreaSpeed(struct soap*, struct __ns1__SyncWriteAreaSpeed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SyncWriteAreaSpeed(struct soap*, const struct __ns1__SyncWriteAreaSpeed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SyncWriteAreaSpeed(struct soap*, const char*, int, const struct __ns1__SyncWriteAreaSpeed *, const char*);
SOAP_FMAC3 struct __ns1__SyncWriteAreaSpeed * SOAP_FMAC4 soap_in___ns1__SyncWriteAreaSpeed(struct soap*, const char*, struct __ns1__SyncWriteAreaSpeed *, const char*);
SOAP_FMAC1 struct __ns1__SyncWriteAreaSpeed * SOAP_FMAC2 soap_instantiate___ns1__SyncWriteAreaSpeed(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SyncWriteAreaSpeed * soap_new___ns1__SyncWriteAreaSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SyncWriteAreaSpeed(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SyncWriteAreaSpeed * soap_new_req___ns1__SyncWriteAreaSpeed(
	struct soap *soap)
{
	struct __ns1__SyncWriteAreaSpeed *_p = ::soap_new___ns1__SyncWriteAreaSpeed(soap);
	if (_p)
	{	::soap_default___ns1__SyncWriteAreaSpeed(soap, _p);
	}
	return _p;
}

inline struct __ns1__SyncWriteAreaSpeed * soap_new_set___ns1__SyncWriteAreaSpeed(
	struct soap *soap,
	ns1__SyncWriteAreaSpeed *ns1__SyncWriteAreaSpeed_)
{
	struct __ns1__SyncWriteAreaSpeed *_p = ::soap_new___ns1__SyncWriteAreaSpeed(soap);
	if (_p)
	{	::soap_default___ns1__SyncWriteAreaSpeed(soap, _p);
		_p->ns1__SyncWriteAreaSpeed_ = ns1__SyncWriteAreaSpeed_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SyncWriteAreaSpeed(struct soap*, const struct __ns1__SyncWriteAreaSpeed *, const char*, const char*);

inline int soap_write___ns1__SyncWriteAreaSpeed(struct soap *soap, struct __ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SyncWriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__SyncWriteAreaSpeed(soap, p, "-ns1:SyncWriteAreaSpeed", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__SyncWriteAreaSpeed(soap, p, "-ns1:SyncWriteAreaSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__SyncWriteAreaSpeed(soap, p, "-ns1:SyncWriteAreaSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__SyncWriteAreaSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteAreaSpeed(soap, p), 0) || ::soap_put___ns1__SyncWriteAreaSpeed(soap, p, "-ns1:SyncWriteAreaSpeed", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SyncWriteAreaSpeed * SOAP_FMAC4 soap_get___ns1__SyncWriteAreaSpeed(struct soap*, struct __ns1__SyncWriteAreaSpeed *, const char*, const char*);

inline int soap_read___ns1__SyncWriteAreaSpeed(struct soap *soap, struct __ns1__SyncWriteAreaSpeed *p)
{
	if (p)
	{	::soap_default___ns1__SyncWriteAreaSpeed(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SyncWriteAreaSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SyncWriteAreaSpeed(struct soap *soap, const char *URL, struct __ns1__SyncWriteAreaSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SyncWriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__SyncWriteAreaSpeed(struct soap *soap, struct __ns1__SyncWriteAreaSpeed *p)
{
	if (::soap_read___ns1__SyncWriteAreaSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__WriteVehPassInfo_DEFINED
#define SOAP_TYPE___ns1__WriteVehPassInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WriteVehPassInfo(struct soap*, struct __ns1__WriteVehPassInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WriteVehPassInfo(struct soap*, const struct __ns1__WriteVehPassInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WriteVehPassInfo(struct soap*, const char*, int, const struct __ns1__WriteVehPassInfo *, const char*);
SOAP_FMAC3 struct __ns1__WriteVehPassInfo * SOAP_FMAC4 soap_in___ns1__WriteVehPassInfo(struct soap*, const char*, struct __ns1__WriteVehPassInfo *, const char*);
SOAP_FMAC1 struct __ns1__WriteVehPassInfo * SOAP_FMAC2 soap_instantiate___ns1__WriteVehPassInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WriteVehPassInfo * soap_new___ns1__WriteVehPassInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__WriteVehPassInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__WriteVehPassInfo * soap_new_req___ns1__WriteVehPassInfo(
	struct soap *soap)
{
	struct __ns1__WriteVehPassInfo *_p = ::soap_new___ns1__WriteVehPassInfo(soap);
	if (_p)
	{	::soap_default___ns1__WriteVehPassInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__WriteVehPassInfo * soap_new_set___ns1__WriteVehPassInfo(
	struct soap *soap,
	ns1__WriteVehPassInfo *ns1__WriteVehPassInfo_)
{
	struct __ns1__WriteVehPassInfo *_p = ::soap_new___ns1__WriteVehPassInfo(soap);
	if (_p)
	{	::soap_default___ns1__WriteVehPassInfo(soap, _p);
		_p->ns1__WriteVehPassInfo_ = ns1__WriteVehPassInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WriteVehPassInfo(struct soap*, const struct __ns1__WriteVehPassInfo *, const char*, const char*);

inline int soap_write___ns1__WriteVehPassInfo(struct soap *soap, struct __ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__WriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__WriteVehPassInfo(soap, p, "-ns1:WriteVehPassInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__WriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__WriteVehPassInfo(soap, p, "-ns1:WriteVehPassInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__WriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__WriteVehPassInfo(soap, p, "-ns1:WriteVehPassInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__WriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__WriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__WriteVehPassInfo(soap, p, "-ns1:WriteVehPassInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__WriteVehPassInfo * SOAP_FMAC4 soap_get___ns1__WriteVehPassInfo(struct soap*, struct __ns1__WriteVehPassInfo *, const char*, const char*);

inline int soap_read___ns1__WriteVehPassInfo(struct soap *soap, struct __ns1__WriteVehPassInfo *p)
{
	if (p)
	{	::soap_default___ns1__WriteVehPassInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__WriteVehPassInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__WriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__WriteVehPassInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__WriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__WriteVehPassInfo(struct soap *soap, struct __ns1__WriteVehPassInfo *p)
{
	if (::soap_read___ns1__WriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__SyncWriteVehPassInfo_DEFINED
#define SOAP_TYPE___ns1__SyncWriteVehPassInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SyncWriteVehPassInfo(struct soap*, struct __ns1__SyncWriteVehPassInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SyncWriteVehPassInfo(struct soap*, const struct __ns1__SyncWriteVehPassInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SyncWriteVehPassInfo(struct soap*, const char*, int, const struct __ns1__SyncWriteVehPassInfo *, const char*);
SOAP_FMAC3 struct __ns1__SyncWriteVehPassInfo * SOAP_FMAC4 soap_in___ns1__SyncWriteVehPassInfo(struct soap*, const char*, struct __ns1__SyncWriteVehPassInfo *, const char*);
SOAP_FMAC1 struct __ns1__SyncWriteVehPassInfo * SOAP_FMAC2 soap_instantiate___ns1__SyncWriteVehPassInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SyncWriteVehPassInfo * soap_new___ns1__SyncWriteVehPassInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SyncWriteVehPassInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SyncWriteVehPassInfo * soap_new_req___ns1__SyncWriteVehPassInfo(
	struct soap *soap)
{
	struct __ns1__SyncWriteVehPassInfo *_p = ::soap_new___ns1__SyncWriteVehPassInfo(soap);
	if (_p)
	{	::soap_default___ns1__SyncWriteVehPassInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__SyncWriteVehPassInfo * soap_new_set___ns1__SyncWriteVehPassInfo(
	struct soap *soap,
	ns1__SyncWriteVehPassInfo *ns1__SyncWriteVehPassInfo_)
{
	struct __ns1__SyncWriteVehPassInfo *_p = ::soap_new___ns1__SyncWriteVehPassInfo(soap);
	if (_p)
	{	::soap_default___ns1__SyncWriteVehPassInfo(soap, _p);
		_p->ns1__SyncWriteVehPassInfo_ = ns1__SyncWriteVehPassInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SyncWriteVehPassInfo(struct soap*, const struct __ns1__SyncWriteVehPassInfo *, const char*, const char*);

inline int soap_write___ns1__SyncWriteVehPassInfo(struct soap *soap, struct __ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SyncWriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__SyncWriteVehPassInfo(soap, p, "-ns1:SyncWriteVehPassInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__SyncWriteVehPassInfo(soap, p, "-ns1:SyncWriteVehPassInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__SyncWriteVehPassInfo(soap, p, "-ns1:SyncWriteVehPassInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__SyncWriteVehPassInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SyncWriteVehPassInfo(soap, p), 0) || ::soap_put___ns1__SyncWriteVehPassInfo(soap, p, "-ns1:SyncWriteVehPassInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SyncWriteVehPassInfo * SOAP_FMAC4 soap_get___ns1__SyncWriteVehPassInfo(struct soap*, struct __ns1__SyncWriteVehPassInfo *, const char*, const char*);

inline int soap_read___ns1__SyncWriteVehPassInfo(struct soap *soap, struct __ns1__SyncWriteVehPassInfo *p)
{
	if (p)
	{	::soap_default___ns1__SyncWriteVehPassInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SyncWriteVehPassInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SyncWriteVehPassInfo(struct soap *soap, const char *URL, struct __ns1__SyncWriteVehPassInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SyncWriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__SyncWriteVehPassInfo(struct soap *soap, struct __ns1__SyncWriteVehPassInfo *p)
{
	if (::soap_read___ns1__SyncWriteVehPassInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NWritePassStat_DEFINED
#define SOAP_TYPE___ns1__NWritePassStat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NWritePassStat(struct soap*, struct __ns1__NWritePassStat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NWritePassStat(struct soap*, const struct __ns1__NWritePassStat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NWritePassStat(struct soap*, const char*, int, const struct __ns1__NWritePassStat *, const char*);
SOAP_FMAC3 struct __ns1__NWritePassStat * SOAP_FMAC4 soap_in___ns1__NWritePassStat(struct soap*, const char*, struct __ns1__NWritePassStat *, const char*);
SOAP_FMAC1 struct __ns1__NWritePassStat * SOAP_FMAC2 soap_instantiate___ns1__NWritePassStat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NWritePassStat * soap_new___ns1__NWritePassStat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NWritePassStat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NWritePassStat * soap_new_req___ns1__NWritePassStat(
	struct soap *soap)
{
	struct __ns1__NWritePassStat *_p = ::soap_new___ns1__NWritePassStat(soap);
	if (_p)
	{	::soap_default___ns1__NWritePassStat(soap, _p);
	}
	return _p;
}

inline struct __ns1__NWritePassStat * soap_new_set___ns1__NWritePassStat(
	struct soap *soap,
	ns1__NWritePassStat *ns1__NWritePassStat_)
{
	struct __ns1__NWritePassStat *_p = ::soap_new___ns1__NWritePassStat(soap);
	if (_p)
	{	::soap_default___ns1__NWritePassStat(soap, _p);
		_p->ns1__NWritePassStat_ = ns1__NWritePassStat_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NWritePassStat(struct soap*, const struct __ns1__NWritePassStat *, const char*, const char*);

inline int soap_write___ns1__NWritePassStat(struct soap *soap, struct __ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NWritePassStat(soap, p), 0) || ::soap_put___ns1__NWritePassStat(soap, p, "-ns1:NWritePassStat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NWritePassStat(struct soap *soap, const char *URL, struct __ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWritePassStat(soap, p), 0) || ::soap_put___ns1__NWritePassStat(soap, p, "-ns1:NWritePassStat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NWritePassStat(struct soap *soap, const char *URL, struct __ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWritePassStat(soap, p), 0) || ::soap_put___ns1__NWritePassStat(soap, p, "-ns1:NWritePassStat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NWritePassStat(struct soap *soap, const char *URL, struct __ns1__NWritePassStat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWritePassStat(soap, p), 0) || ::soap_put___ns1__NWritePassStat(soap, p, "-ns1:NWritePassStat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NWritePassStat * SOAP_FMAC4 soap_get___ns1__NWritePassStat(struct soap*, struct __ns1__NWritePassStat *, const char*, const char*);

inline int soap_read___ns1__NWritePassStat(struct soap *soap, struct __ns1__NWritePassStat *p)
{
	if (p)
	{	::soap_default___ns1__NWritePassStat(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NWritePassStat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NWritePassStat(struct soap *soap, const char *URL, struct __ns1__NWritePassStat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NWritePassStat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NWritePassStat(struct soap *soap, struct __ns1__NWritePassStat *p)
{
	if (::soap_read___ns1__NWritePassStat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NSyncWriteVioInfo_DEFINED
#define SOAP_TYPE___ns1__NSyncWriteVioInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NSyncWriteVioInfo(struct soap*, struct __ns1__NSyncWriteVioInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NSyncWriteVioInfo(struct soap*, const struct __ns1__NSyncWriteVioInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NSyncWriteVioInfo(struct soap*, const char*, int, const struct __ns1__NSyncWriteVioInfo *, const char*);
SOAP_FMAC3 struct __ns1__NSyncWriteVioInfo * SOAP_FMAC4 soap_in___ns1__NSyncWriteVioInfo(struct soap*, const char*, struct __ns1__NSyncWriteVioInfo *, const char*);
SOAP_FMAC1 struct __ns1__NSyncWriteVioInfo * SOAP_FMAC2 soap_instantiate___ns1__NSyncWriteVioInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NSyncWriteVioInfo * soap_new___ns1__NSyncWriteVioInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NSyncWriteVioInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NSyncWriteVioInfo * soap_new_req___ns1__NSyncWriteVioInfo(
	struct soap *soap)
{
	struct __ns1__NSyncWriteVioInfo *_p = ::soap_new___ns1__NSyncWriteVioInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteVioInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__NSyncWriteVioInfo * soap_new_set___ns1__NSyncWriteVioInfo(
	struct soap *soap,
	ns1__NSyncWriteVioInfo *ns1__NSyncWriteVioInfo_)
{
	struct __ns1__NSyncWriteVioInfo *_p = ::soap_new___ns1__NSyncWriteVioInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteVioInfo(soap, _p);
		_p->ns1__NSyncWriteVioInfo_ = ns1__NSyncWriteVioInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NSyncWriteVioInfo(struct soap*, const struct __ns1__NSyncWriteVioInfo *, const char*, const char*);

inline int soap_write___ns1__NSyncWriteVioInfo(struct soap *soap, struct __ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NSyncWriteVioInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVioInfo(soap, p, "-ns1:NSyncWriteVioInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVioInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVioInfo(soap, p, "-ns1:NSyncWriteVioInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVioInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVioInfo(soap, p, "-ns1:NSyncWriteVioInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVioInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVioInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVioInfo(soap, p, "-ns1:NSyncWriteVioInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NSyncWriteVioInfo * SOAP_FMAC4 soap_get___ns1__NSyncWriteVioInfo(struct soap*, struct __ns1__NSyncWriteVioInfo *, const char*, const char*);

inline int soap_read___ns1__NSyncWriteVioInfo(struct soap *soap, struct __ns1__NSyncWriteVioInfo *p)
{
	if (p)
	{	::soap_default___ns1__NSyncWriteVioInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NSyncWriteVioInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NSyncWriteVioInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVioInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NSyncWriteVioInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NSyncWriteVioInfo(struct soap *soap, struct __ns1__NSyncWriteVioInfo *p)
{
	if (::soap_read___ns1__NSyncWriteVioInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NSyncWriteMobileEPVInfo_DEFINED
#define SOAP_TYPE___ns1__NSyncWriteMobileEPVInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NSyncWriteMobileEPVInfo(struct soap*, struct __ns1__NSyncWriteMobileEPVInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NSyncWriteMobileEPVInfo(struct soap*, const struct __ns1__NSyncWriteMobileEPVInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NSyncWriteMobileEPVInfo(struct soap*, const char*, int, const struct __ns1__NSyncWriteMobileEPVInfo *, const char*);
SOAP_FMAC3 struct __ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC4 soap_in___ns1__NSyncWriteMobileEPVInfo(struct soap*, const char*, struct __ns1__NSyncWriteMobileEPVInfo *, const char*);
SOAP_FMAC1 struct __ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC2 soap_instantiate___ns1__NSyncWriteMobileEPVInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NSyncWriteMobileEPVInfo * soap_new___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NSyncWriteMobileEPVInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NSyncWriteMobileEPVInfo * soap_new_req___ns1__NSyncWriteMobileEPVInfo(
	struct soap *soap)
{
	struct __ns1__NSyncWriteMobileEPVInfo *_p = ::soap_new___ns1__NSyncWriteMobileEPVInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteMobileEPVInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__NSyncWriteMobileEPVInfo * soap_new_set___ns1__NSyncWriteMobileEPVInfo(
	struct soap *soap,
	ns1__NSyncWriteMobileEPVInfo *ns1__NSyncWriteMobileEPVInfo_)
{
	struct __ns1__NSyncWriteMobileEPVInfo *_p = ::soap_new___ns1__NSyncWriteMobileEPVInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteMobileEPVInfo(soap, _p);
		_p->ns1__NSyncWriteMobileEPVInfo_ = ns1__NSyncWriteMobileEPVInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NSyncWriteMobileEPVInfo(struct soap*, const struct __ns1__NSyncWriteMobileEPVInfo *, const char*, const char*);

inline int soap_write___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, struct __ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NSyncWriteMobileEPVInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteMobileEPVInfo(soap, p, "-ns1:NSyncWriteMobileEPVInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteMobileEPVInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteMobileEPVInfo(soap, p, "-ns1:NSyncWriteMobileEPVInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteMobileEPVInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteMobileEPVInfo(soap, p, "-ns1:NSyncWriteMobileEPVInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteMobileEPVInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteMobileEPVInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteMobileEPVInfo(soap, p, "-ns1:NSyncWriteMobileEPVInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NSyncWriteMobileEPVInfo * SOAP_FMAC4 soap_get___ns1__NSyncWriteMobileEPVInfo(struct soap*, struct __ns1__NSyncWriteMobileEPVInfo *, const char*, const char*);

inline int soap_read___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, struct __ns1__NSyncWriteMobileEPVInfo *p)
{
	if (p)
	{	::soap_default___ns1__NSyncWriteMobileEPVInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NSyncWriteMobileEPVInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteMobileEPVInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NSyncWriteMobileEPVInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NSyncWriteMobileEPVInfo(struct soap *soap, struct __ns1__NSyncWriteMobileEPVInfo *p)
{
	if (::soap_read___ns1__NSyncWriteMobileEPVInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NWriteDeviceStatus_DEFINED
#define SOAP_TYPE___ns1__NWriteDeviceStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NWriteDeviceStatus(struct soap*, struct __ns1__NWriteDeviceStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NWriteDeviceStatus(struct soap*, const struct __ns1__NWriteDeviceStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NWriteDeviceStatus(struct soap*, const char*, int, const struct __ns1__NWriteDeviceStatus *, const char*);
SOAP_FMAC3 struct __ns1__NWriteDeviceStatus * SOAP_FMAC4 soap_in___ns1__NWriteDeviceStatus(struct soap*, const char*, struct __ns1__NWriteDeviceStatus *, const char*);
SOAP_FMAC1 struct __ns1__NWriteDeviceStatus * SOAP_FMAC2 soap_instantiate___ns1__NWriteDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NWriteDeviceStatus * soap_new___ns1__NWriteDeviceStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NWriteDeviceStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NWriteDeviceStatus * soap_new_req___ns1__NWriteDeviceStatus(
	struct soap *soap)
{
	struct __ns1__NWriteDeviceStatus *_p = ::soap_new___ns1__NWriteDeviceStatus(soap);
	if (_p)
	{	::soap_default___ns1__NWriteDeviceStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__NWriteDeviceStatus * soap_new_set___ns1__NWriteDeviceStatus(
	struct soap *soap,
	ns1__NWriteDeviceStatus *ns1__NWriteDeviceStatus_)
{
	struct __ns1__NWriteDeviceStatus *_p = ::soap_new___ns1__NWriteDeviceStatus(soap);
	if (_p)
	{	::soap_default___ns1__NWriteDeviceStatus(soap, _p);
		_p->ns1__NWriteDeviceStatus_ = ns1__NWriteDeviceStatus_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NWriteDeviceStatus(struct soap*, const struct __ns1__NWriteDeviceStatus *, const char*, const char*);

inline int soap_write___ns1__NWriteDeviceStatus(struct soap *soap, struct __ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NWriteDeviceStatus(soap, p), 0) || ::soap_put___ns1__NWriteDeviceStatus(soap, p, "-ns1:NWriteDeviceStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, struct __ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteDeviceStatus(soap, p), 0) || ::soap_put___ns1__NWriteDeviceStatus(soap, p, "-ns1:NWriteDeviceStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, struct __ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteDeviceStatus(soap, p), 0) || ::soap_put___ns1__NWriteDeviceStatus(soap, p, "-ns1:NWriteDeviceStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, struct __ns1__NWriteDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteDeviceStatus(soap, p), 0) || ::soap_put___ns1__NWriteDeviceStatus(soap, p, "-ns1:NWriteDeviceStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NWriteDeviceStatus * SOAP_FMAC4 soap_get___ns1__NWriteDeviceStatus(struct soap*, struct __ns1__NWriteDeviceStatus *, const char*, const char*);

inline int soap_read___ns1__NWriteDeviceStatus(struct soap *soap, struct __ns1__NWriteDeviceStatus *p)
{
	if (p)
	{	::soap_default___ns1__NWriteDeviceStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NWriteDeviceStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NWriteDeviceStatus(struct soap *soap, const char *URL, struct __ns1__NWriteDeviceStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NWriteDeviceStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NWriteDeviceStatus(struct soap *soap, struct __ns1__NWriteDeviceStatus *p)
{
	if (::soap_read___ns1__NWriteDeviceStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__WriteFlux_DEFINED
#define SOAP_TYPE___ns1__WriteFlux_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WriteFlux(struct soap*, struct __ns1__WriteFlux *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WriteFlux(struct soap*, const struct __ns1__WriteFlux *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WriteFlux(struct soap*, const char*, int, const struct __ns1__WriteFlux *, const char*);
SOAP_FMAC3 struct __ns1__WriteFlux * SOAP_FMAC4 soap_in___ns1__WriteFlux(struct soap*, const char*, struct __ns1__WriteFlux *, const char*);
SOAP_FMAC1 struct __ns1__WriteFlux * SOAP_FMAC2 soap_instantiate___ns1__WriteFlux(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WriteFlux * soap_new___ns1__WriteFlux(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__WriteFlux(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__WriteFlux * soap_new_req___ns1__WriteFlux(
	struct soap *soap)
{
	struct __ns1__WriteFlux *_p = ::soap_new___ns1__WriteFlux(soap);
	if (_p)
	{	::soap_default___ns1__WriteFlux(soap, _p);
	}
	return _p;
}

inline struct __ns1__WriteFlux * soap_new_set___ns1__WriteFlux(
	struct soap *soap,
	ns1__WriteFlux *ns1__WriteFlux_)
{
	struct __ns1__WriteFlux *_p = ::soap_new___ns1__WriteFlux(soap);
	if (_p)
	{	::soap_default___ns1__WriteFlux(soap, _p);
		_p->ns1__WriteFlux_ = ns1__WriteFlux_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WriteFlux(struct soap*, const struct __ns1__WriteFlux *, const char*, const char*);

inline int soap_write___ns1__WriteFlux(struct soap *soap, struct __ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__WriteFlux(soap, p), 0) || ::soap_put___ns1__WriteFlux(soap, p, "-ns1:WriteFlux", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__WriteFlux(struct soap *soap, const char *URL, struct __ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteFlux(soap, p), 0) || ::soap_put___ns1__WriteFlux(soap, p, "-ns1:WriteFlux", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__WriteFlux(struct soap *soap, const char *URL, struct __ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteFlux(soap, p), 0) || ::soap_put___ns1__WriteFlux(soap, p, "-ns1:WriteFlux", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__WriteFlux(struct soap *soap, const char *URL, struct __ns1__WriteFlux const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__WriteFlux(soap, p), 0) || ::soap_put___ns1__WriteFlux(soap, p, "-ns1:WriteFlux", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__WriteFlux * SOAP_FMAC4 soap_get___ns1__WriteFlux(struct soap*, struct __ns1__WriteFlux *, const char*, const char*);

inline int soap_read___ns1__WriteFlux(struct soap *soap, struct __ns1__WriteFlux *p)
{
	if (p)
	{	::soap_default___ns1__WriteFlux(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__WriteFlux(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__WriteFlux(struct soap *soap, const char *URL, struct __ns1__WriteFlux *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__WriteFlux(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__WriteFlux(struct soap *soap, struct __ns1__WriteFlux *p)
{
	if (::soap_read___ns1__WriteFlux(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NSyncWriteVehicleInfo_DEFINED
#define SOAP_TYPE___ns1__NSyncWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NSyncWriteVehicleInfo(struct soap*, struct __ns1__NSyncWriteVehicleInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NSyncWriteVehicleInfo(struct soap*, const struct __ns1__NSyncWriteVehicleInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NSyncWriteVehicleInfo(struct soap*, const char*, int, const struct __ns1__NSyncWriteVehicleInfo *, const char*);
SOAP_FMAC3 struct __ns1__NSyncWriteVehicleInfo * SOAP_FMAC4 soap_in___ns1__NSyncWriteVehicleInfo(struct soap*, const char*, struct __ns1__NSyncWriteVehicleInfo *, const char*);
SOAP_FMAC1 struct __ns1__NSyncWriteVehicleInfo * SOAP_FMAC2 soap_instantiate___ns1__NSyncWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NSyncWriteVehicleInfo * soap_new___ns1__NSyncWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NSyncWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NSyncWriteVehicleInfo * soap_new_req___ns1__NSyncWriteVehicleInfo(
	struct soap *soap)
{
	struct __ns1__NSyncWriteVehicleInfo *_p = ::soap_new___ns1__NSyncWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteVehicleInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__NSyncWriteVehicleInfo * soap_new_set___ns1__NSyncWriteVehicleInfo(
	struct soap *soap,
	ns1__NSyncWriteVehicleInfo *ns1__NSyncWriteVehicleInfo_)
{
	struct __ns1__NSyncWriteVehicleInfo *_p = ::soap_new___ns1__NSyncWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__NSyncWriteVehicleInfo(soap, _p);
		_p->ns1__NSyncWriteVehicleInfo_ = ns1__NSyncWriteVehicleInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NSyncWriteVehicleInfo(struct soap*, const struct __ns1__NSyncWriteVehicleInfo *, const char*, const char*);

inline int soap_write___ns1__NSyncWriteVehicleInfo(struct soap *soap, struct __ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NSyncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVehicleInfo(soap, p, "-ns1:NSyncWriteVehicleInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVehicleInfo(soap, p, "-ns1:NSyncWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVehicleInfo(soap, p, "-ns1:NSyncWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NSyncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NSyncWriteVehicleInfo(soap, p, "-ns1:NSyncWriteVehicleInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NSyncWriteVehicleInfo * SOAP_FMAC4 soap_get___ns1__NSyncWriteVehicleInfo(struct soap*, struct __ns1__NSyncWriteVehicleInfo *, const char*, const char*);

inline int soap_read___ns1__NSyncWriteVehicleInfo(struct soap *soap, struct __ns1__NSyncWriteVehicleInfo *p)
{
	if (p)
	{	::soap_default___ns1__NSyncWriteVehicleInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NSyncWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NSyncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NSyncWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NSyncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NSyncWriteVehicleInfo(struct soap *soap, struct __ns1__NSyncWriteVehicleInfo *p)
{
	if (::soap_read___ns1__NSyncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NWriteVehicleInfoEx_DEFINED
#define SOAP_TYPE___ns1__NWriteVehicleInfoEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NWriteVehicleInfoEx(struct soap*, struct __ns1__NWriteVehicleInfoEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NWriteVehicleInfoEx(struct soap*, const struct __ns1__NWriteVehicleInfoEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NWriteVehicleInfoEx(struct soap*, const char*, int, const struct __ns1__NWriteVehicleInfoEx *, const char*);
SOAP_FMAC3 struct __ns1__NWriteVehicleInfoEx * SOAP_FMAC4 soap_in___ns1__NWriteVehicleInfoEx(struct soap*, const char*, struct __ns1__NWriteVehicleInfoEx *, const char*);
SOAP_FMAC1 struct __ns1__NWriteVehicleInfoEx * SOAP_FMAC2 soap_instantiate___ns1__NWriteVehicleInfoEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NWriteVehicleInfoEx * soap_new___ns1__NWriteVehicleInfoEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NWriteVehicleInfoEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NWriteVehicleInfoEx * soap_new_req___ns1__NWriteVehicleInfoEx(
	struct soap *soap)
{
	struct __ns1__NWriteVehicleInfoEx *_p = ::soap_new___ns1__NWriteVehicleInfoEx(soap);
	if (_p)
	{	::soap_default___ns1__NWriteVehicleInfoEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__NWriteVehicleInfoEx * soap_new_set___ns1__NWriteVehicleInfoEx(
	struct soap *soap,
	ns1__NWriteVehicleInfoEx *ns1__NWriteVehicleInfoEx_)
{
	struct __ns1__NWriteVehicleInfoEx *_p = ::soap_new___ns1__NWriteVehicleInfoEx(soap);
	if (_p)
	{	::soap_default___ns1__NWriteVehicleInfoEx(soap, _p);
		_p->ns1__NWriteVehicleInfoEx_ = ns1__NWriteVehicleInfoEx_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NWriteVehicleInfoEx(struct soap*, const struct __ns1__NWriteVehicleInfoEx *, const char*, const char*);

inline int soap_write___ns1__NWriteVehicleInfoEx(struct soap *soap, struct __ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NWriteVehicleInfoEx(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfoEx(soap, p, "-ns1:NWriteVehicleInfoEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfoEx(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfoEx(soap, p, "-ns1:NWriteVehicleInfoEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfoEx(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfoEx(soap, p, "-ns1:NWriteVehicleInfoEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfoEx const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfoEx(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfoEx(soap, p, "-ns1:NWriteVehicleInfoEx", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NWriteVehicleInfoEx * SOAP_FMAC4 soap_get___ns1__NWriteVehicleInfoEx(struct soap*, struct __ns1__NWriteVehicleInfoEx *, const char*, const char*);

inline int soap_read___ns1__NWriteVehicleInfoEx(struct soap *soap, struct __ns1__NWriteVehicleInfoEx *p)
{
	if (p)
	{	::soap_default___ns1__NWriteVehicleInfoEx(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NWriteVehicleInfoEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NWriteVehicleInfoEx(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfoEx *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NWriteVehicleInfoEx(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NWriteVehicleInfoEx(struct soap *soap, struct __ns1__NWriteVehicleInfoEx *p)
{
	if (::soap_read___ns1__NWriteVehicleInfoEx(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__NWriteVehicleInfo_DEFINED
#define SOAP_TYPE___ns1__NWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NWriteVehicleInfo(struct soap*, struct __ns1__NWriteVehicleInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NWriteVehicleInfo(struct soap*, const struct __ns1__NWriteVehicleInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NWriteVehicleInfo(struct soap*, const char*, int, const struct __ns1__NWriteVehicleInfo *, const char*);
SOAP_FMAC3 struct __ns1__NWriteVehicleInfo * SOAP_FMAC4 soap_in___ns1__NWriteVehicleInfo(struct soap*, const char*, struct __ns1__NWriteVehicleInfo *, const char*);
SOAP_FMAC1 struct __ns1__NWriteVehicleInfo * SOAP_FMAC2 soap_instantiate___ns1__NWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NWriteVehicleInfo * soap_new___ns1__NWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__NWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__NWriteVehicleInfo * soap_new_req___ns1__NWriteVehicleInfo(
	struct soap *soap)
{
	struct __ns1__NWriteVehicleInfo *_p = ::soap_new___ns1__NWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__NWriteVehicleInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__NWriteVehicleInfo * soap_new_set___ns1__NWriteVehicleInfo(
	struct soap *soap,
	ns1__NWriteVehicleInfo *ns1__NWriteVehicleInfo_)
{
	struct __ns1__NWriteVehicleInfo *_p = ::soap_new___ns1__NWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__NWriteVehicleInfo(soap, _p);
		_p->ns1__NWriteVehicleInfo_ = ns1__NWriteVehicleInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NWriteVehicleInfo(struct soap*, const struct __ns1__NWriteVehicleInfo *, const char*, const char*);

inline int soap_write___ns1__NWriteVehicleInfo(struct soap *soap, struct __ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__NWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfo(soap, p, "-ns1:NWriteVehicleInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfo(soap, p, "-ns1:NWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfo(soap, p, "-ns1:NWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__NWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__NWriteVehicleInfo(soap, p, "-ns1:NWriteVehicleInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__NWriteVehicleInfo * SOAP_FMAC4 soap_get___ns1__NWriteVehicleInfo(struct soap*, struct __ns1__NWriteVehicleInfo *, const char*, const char*);

inline int soap_read___ns1__NWriteVehicleInfo(struct soap *soap, struct __ns1__NWriteVehicleInfo *p)
{
	if (p)
	{	::soap_default___ns1__NWriteVehicleInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__NWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__NWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__NWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__NWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__NWriteVehicleInfo(struct soap *soap, struct __ns1__NWriteVehicleInfo *p)
{
	if (::soap_read___ns1__NWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__writeAlarmInfo_DEFINED
#define SOAP_TYPE___ns1__writeAlarmInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__writeAlarmInfo(struct soap*, struct __ns1__writeAlarmInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__writeAlarmInfo(struct soap*, const struct __ns1__writeAlarmInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__writeAlarmInfo(struct soap*, const char*, int, const struct __ns1__writeAlarmInfo *, const char*);
SOAP_FMAC3 struct __ns1__writeAlarmInfo * SOAP_FMAC4 soap_in___ns1__writeAlarmInfo(struct soap*, const char*, struct __ns1__writeAlarmInfo *, const char*);
SOAP_FMAC1 struct __ns1__writeAlarmInfo * SOAP_FMAC2 soap_instantiate___ns1__writeAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__writeAlarmInfo * soap_new___ns1__writeAlarmInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__writeAlarmInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__writeAlarmInfo * soap_new_req___ns1__writeAlarmInfo(
	struct soap *soap)
{
	struct __ns1__writeAlarmInfo *_p = ::soap_new___ns1__writeAlarmInfo(soap);
	if (_p)
	{	::soap_default___ns1__writeAlarmInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__writeAlarmInfo * soap_new_set___ns1__writeAlarmInfo(
	struct soap *soap,
	ns1__writeAlarmInfo *ns1__writeAlarmInfo_)
{
	struct __ns1__writeAlarmInfo *_p = ::soap_new___ns1__writeAlarmInfo(soap);
	if (_p)
	{	::soap_default___ns1__writeAlarmInfo(soap, _p);
		_p->ns1__writeAlarmInfo_ = ns1__writeAlarmInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__writeAlarmInfo(struct soap*, const struct __ns1__writeAlarmInfo *, const char*, const char*);

inline int soap_write___ns1__writeAlarmInfo(struct soap *soap, struct __ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__writeAlarmInfo(soap, p), 0) || ::soap_put___ns1__writeAlarmInfo(soap, p, "-ns1:writeAlarmInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__writeAlarmInfo(struct soap *soap, const char *URL, struct __ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeAlarmInfo(soap, p), 0) || ::soap_put___ns1__writeAlarmInfo(soap, p, "-ns1:writeAlarmInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__writeAlarmInfo(struct soap *soap, const char *URL, struct __ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeAlarmInfo(soap, p), 0) || ::soap_put___ns1__writeAlarmInfo(soap, p, "-ns1:writeAlarmInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__writeAlarmInfo(struct soap *soap, const char *URL, struct __ns1__writeAlarmInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeAlarmInfo(soap, p), 0) || ::soap_put___ns1__writeAlarmInfo(soap, p, "-ns1:writeAlarmInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__writeAlarmInfo * SOAP_FMAC4 soap_get___ns1__writeAlarmInfo(struct soap*, struct __ns1__writeAlarmInfo *, const char*, const char*);

inline int soap_read___ns1__writeAlarmInfo(struct soap *soap, struct __ns1__writeAlarmInfo *p)
{
	if (p)
	{	::soap_default___ns1__writeAlarmInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__writeAlarmInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__writeAlarmInfo(struct soap *soap, const char *URL, struct __ns1__writeAlarmInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__writeAlarmInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__writeAlarmInfo(struct soap *soap, struct __ns1__writeAlarmInfo *p)
{
	if (::soap_read___ns1__writeAlarmInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__querySyncTime_DEFINED
#define SOAP_TYPE___ns1__querySyncTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__querySyncTime(struct soap*, struct __ns1__querySyncTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__querySyncTime(struct soap*, const struct __ns1__querySyncTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__querySyncTime(struct soap*, const char*, int, const struct __ns1__querySyncTime *, const char*);
SOAP_FMAC3 struct __ns1__querySyncTime * SOAP_FMAC4 soap_in___ns1__querySyncTime(struct soap*, const char*, struct __ns1__querySyncTime *, const char*);
SOAP_FMAC1 struct __ns1__querySyncTime * SOAP_FMAC2 soap_instantiate___ns1__querySyncTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__querySyncTime * soap_new___ns1__querySyncTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__querySyncTime(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__querySyncTime * soap_new_req___ns1__querySyncTime(
	struct soap *soap)
{
	struct __ns1__querySyncTime *_p = ::soap_new___ns1__querySyncTime(soap);
	if (_p)
	{	::soap_default___ns1__querySyncTime(soap, _p);
	}
	return _p;
}

inline struct __ns1__querySyncTime * soap_new_set___ns1__querySyncTime(
	struct soap *soap,
	ns1__querySyncTime *ns1__querySyncTime_)
{
	struct __ns1__querySyncTime *_p = ::soap_new___ns1__querySyncTime(soap);
	if (_p)
	{	::soap_default___ns1__querySyncTime(soap, _p);
		_p->ns1__querySyncTime_ = ns1__querySyncTime_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__querySyncTime(struct soap*, const struct __ns1__querySyncTime *, const char*, const char*);

inline int soap_write___ns1__querySyncTime(struct soap *soap, struct __ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__querySyncTime(soap, p), 0) || ::soap_put___ns1__querySyncTime(soap, p, "-ns1:querySyncTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__querySyncTime(struct soap *soap, const char *URL, struct __ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__querySyncTime(soap, p), 0) || ::soap_put___ns1__querySyncTime(soap, p, "-ns1:querySyncTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__querySyncTime(struct soap *soap, const char *URL, struct __ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__querySyncTime(soap, p), 0) || ::soap_put___ns1__querySyncTime(soap, p, "-ns1:querySyncTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__querySyncTime(struct soap *soap, const char *URL, struct __ns1__querySyncTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__querySyncTime(soap, p), 0) || ::soap_put___ns1__querySyncTime(soap, p, "-ns1:querySyncTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__querySyncTime * SOAP_FMAC4 soap_get___ns1__querySyncTime(struct soap*, struct __ns1__querySyncTime *, const char*, const char*);

inline int soap_read___ns1__querySyncTime(struct soap *soap, struct __ns1__querySyncTime *p)
{
	if (p)
	{	::soap_default___ns1__querySyncTime(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__querySyncTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__querySyncTime(struct soap *soap, const char *URL, struct __ns1__querySyncTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__querySyncTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__querySyncTime(struct soap *soap, struct __ns1__querySyncTime *p)
{
	if (::soap_read___ns1__querySyncTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__logout_DEFINED
#define SOAP_TYPE___ns1__logout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__logout(struct soap*, struct __ns1__logout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__logout(struct soap*, const struct __ns1__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__logout(struct soap*, const char*, int, const struct __ns1__logout *, const char*);
SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_in___ns1__logout(struct soap*, const char*, struct __ns1__logout *, const char*);
SOAP_FMAC1 struct __ns1__logout * SOAP_FMAC2 soap_instantiate___ns1__logout(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__logout * soap_new___ns1__logout(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__logout(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__logout * soap_new_req___ns1__logout(
	struct soap *soap)
{
	struct __ns1__logout *_p = ::soap_new___ns1__logout(soap);
	if (_p)
	{	::soap_default___ns1__logout(soap, _p);
	}
	return _p;
}

inline struct __ns1__logout * soap_new_set___ns1__logout(
	struct soap *soap,
	ns1__logout *ns1__logout_)
{
	struct __ns1__logout *_p = ::soap_new___ns1__logout(soap);
	if (_p)
	{	::soap_default___ns1__logout(soap, _p);
		_p->ns1__logout_ = ns1__logout_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__logout(struct soap*, const struct __ns1__logout *, const char*, const char*);

inline int soap_write___ns1__logout(struct soap *soap, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__logout(soap, p), 0) || ::soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__logout(soap, p), 0) || ::soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__logout(soap, p), 0) || ::soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__logout(soap, p), 0) || ::soap_put___ns1__logout(soap, p, "-ns1:logout", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__logout * SOAP_FMAC4 soap_get___ns1__logout(struct soap*, struct __ns1__logout *, const char*, const char*);

inline int soap_read___ns1__logout(struct soap *soap, struct __ns1__logout *p)
{
	if (p)
	{	::soap_default___ns1__logout(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__logout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__logout(struct soap *soap, const char *URL, struct __ns1__logout *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__logout(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__logout(struct soap *soap, struct __ns1__logout *p)
{
	if (::soap_read___ns1__logout(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__queryViolateSpeed_DEFINED
#define SOAP_TYPE___ns1__queryViolateSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryViolateSpeed(struct soap*, struct __ns1__queryViolateSpeed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryViolateSpeed(struct soap*, const struct __ns1__queryViolateSpeed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryViolateSpeed(struct soap*, const char*, int, const struct __ns1__queryViolateSpeed *, const char*);
SOAP_FMAC3 struct __ns1__queryViolateSpeed * SOAP_FMAC4 soap_in___ns1__queryViolateSpeed(struct soap*, const char*, struct __ns1__queryViolateSpeed *, const char*);
SOAP_FMAC1 struct __ns1__queryViolateSpeed * SOAP_FMAC2 soap_instantiate___ns1__queryViolateSpeed(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__queryViolateSpeed * soap_new___ns1__queryViolateSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__queryViolateSpeed(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__queryViolateSpeed * soap_new_req___ns1__queryViolateSpeed(
	struct soap *soap)
{
	struct __ns1__queryViolateSpeed *_p = ::soap_new___ns1__queryViolateSpeed(soap);
	if (_p)
	{	::soap_default___ns1__queryViolateSpeed(soap, _p);
	}
	return _p;
}

inline struct __ns1__queryViolateSpeed * soap_new_set___ns1__queryViolateSpeed(
	struct soap *soap,
	ns1__queryViolateSpeed *ns1__queryViolateSpeed_)
{
	struct __ns1__queryViolateSpeed *_p = ::soap_new___ns1__queryViolateSpeed(soap);
	if (_p)
	{	::soap_default___ns1__queryViolateSpeed(soap, _p);
		_p->ns1__queryViolateSpeed_ = ns1__queryViolateSpeed_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryViolateSpeed(struct soap*, const struct __ns1__queryViolateSpeed *, const char*, const char*);

inline int soap_write___ns1__queryViolateSpeed(struct soap *soap, struct __ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__queryViolateSpeed(soap, p), 0) || ::soap_put___ns1__queryViolateSpeed(soap, p, "-ns1:queryViolateSpeed", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__queryViolateSpeed(struct soap *soap, const char *URL, struct __ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryViolateSpeed(soap, p), 0) || ::soap_put___ns1__queryViolateSpeed(soap, p, "-ns1:queryViolateSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__queryViolateSpeed(struct soap *soap, const char *URL, struct __ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryViolateSpeed(soap, p), 0) || ::soap_put___ns1__queryViolateSpeed(soap, p, "-ns1:queryViolateSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__queryViolateSpeed(struct soap *soap, const char *URL, struct __ns1__queryViolateSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryViolateSpeed(soap, p), 0) || ::soap_put___ns1__queryViolateSpeed(soap, p, "-ns1:queryViolateSpeed", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__queryViolateSpeed * SOAP_FMAC4 soap_get___ns1__queryViolateSpeed(struct soap*, struct __ns1__queryViolateSpeed *, const char*, const char*);

inline int soap_read___ns1__queryViolateSpeed(struct soap *soap, struct __ns1__queryViolateSpeed *p)
{
	if (p)
	{	::soap_default___ns1__queryViolateSpeed(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__queryViolateSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__queryViolateSpeed(struct soap *soap, const char *URL, struct __ns1__queryViolateSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__queryViolateSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__queryViolateSpeed(struct soap *soap, struct __ns1__queryViolateSpeed *p)
{
	if (::soap_read___ns1__queryViolateSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__queryLimitSpeed_DEFINED
#define SOAP_TYPE___ns1__queryLimitSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryLimitSpeed(struct soap*, struct __ns1__queryLimitSpeed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryLimitSpeed(struct soap*, const struct __ns1__queryLimitSpeed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryLimitSpeed(struct soap*, const char*, int, const struct __ns1__queryLimitSpeed *, const char*);
SOAP_FMAC3 struct __ns1__queryLimitSpeed * SOAP_FMAC4 soap_in___ns1__queryLimitSpeed(struct soap*, const char*, struct __ns1__queryLimitSpeed *, const char*);
SOAP_FMAC1 struct __ns1__queryLimitSpeed * SOAP_FMAC2 soap_instantiate___ns1__queryLimitSpeed(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__queryLimitSpeed * soap_new___ns1__queryLimitSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__queryLimitSpeed(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__queryLimitSpeed * soap_new_req___ns1__queryLimitSpeed(
	struct soap *soap)
{
	struct __ns1__queryLimitSpeed *_p = ::soap_new___ns1__queryLimitSpeed(soap);
	if (_p)
	{	::soap_default___ns1__queryLimitSpeed(soap, _p);
	}
	return _p;
}

inline struct __ns1__queryLimitSpeed * soap_new_set___ns1__queryLimitSpeed(
	struct soap *soap,
	ns1__queryLimitSpeed *ns1__queryLimitSpeed_)
{
	struct __ns1__queryLimitSpeed *_p = ::soap_new___ns1__queryLimitSpeed(soap);
	if (_p)
	{	::soap_default___ns1__queryLimitSpeed(soap, _p);
		_p->ns1__queryLimitSpeed_ = ns1__queryLimitSpeed_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryLimitSpeed(struct soap*, const struct __ns1__queryLimitSpeed *, const char*, const char*);

inline int soap_write___ns1__queryLimitSpeed(struct soap *soap, struct __ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__queryLimitSpeed(soap, p), 0) || ::soap_put___ns1__queryLimitSpeed(soap, p, "-ns1:queryLimitSpeed", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__queryLimitSpeed(struct soap *soap, const char *URL, struct __ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryLimitSpeed(soap, p), 0) || ::soap_put___ns1__queryLimitSpeed(soap, p, "-ns1:queryLimitSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__queryLimitSpeed(struct soap *soap, const char *URL, struct __ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryLimitSpeed(soap, p), 0) || ::soap_put___ns1__queryLimitSpeed(soap, p, "-ns1:queryLimitSpeed", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__queryLimitSpeed(struct soap *soap, const char *URL, struct __ns1__queryLimitSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__queryLimitSpeed(soap, p), 0) || ::soap_put___ns1__queryLimitSpeed(soap, p, "-ns1:queryLimitSpeed", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__queryLimitSpeed * SOAP_FMAC4 soap_get___ns1__queryLimitSpeed(struct soap*, struct __ns1__queryLimitSpeed *, const char*, const char*);

inline int soap_read___ns1__queryLimitSpeed(struct soap *soap, struct __ns1__queryLimitSpeed *p)
{
	if (p)
	{	::soap_default___ns1__queryLimitSpeed(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__queryLimitSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__queryLimitSpeed(struct soap *soap, const char *URL, struct __ns1__queryLimitSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__queryLimitSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__queryLimitSpeed(struct soap *soap, struct __ns1__queryLimitSpeed *p)
{
	if (::soap_read___ns1__queryLimitSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__login_DEFINED
#define SOAP_TYPE___ns1__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap*, struct __ns1__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__login(struct soap*, const struct __ns1__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap*, const char*, int, const struct __ns1__login *, const char*);
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_in___ns1__login(struct soap*, const char*, struct __ns1__login *, const char*);
SOAP_FMAC1 struct __ns1__login * SOAP_FMAC2 soap_instantiate___ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__login * soap_new___ns1__login(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__login(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__login * soap_new_req___ns1__login(
	struct soap *soap)
{
	struct __ns1__login *_p = ::soap_new___ns1__login(soap);
	if (_p)
	{	::soap_default___ns1__login(soap, _p);
	}
	return _p;
}

inline struct __ns1__login * soap_new_set___ns1__login(
	struct soap *soap,
	ns1__login *ns1__login_)
{
	struct __ns1__login *_p = ::soap_new___ns1__login(soap);
	if (_p)
	{	::soap_default___ns1__login(soap, _p);
		_p->ns1__login_ = ns1__login_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap*, const struct __ns1__login *, const char*, const char*);

inline int soap_write___ns1__login(struct soap *soap, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__login(soap, p), 0) || ::soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__login(struct soap *soap, const char *URL, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__login(soap, p), 0) || ::soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__login(struct soap *soap, const char *URL, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__login(soap, p), 0) || ::soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__login(struct soap *soap, const char *URL, struct __ns1__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__login(soap, p), 0) || ::soap_put___ns1__login(soap, p, "-ns1:login", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_get___ns1__login(struct soap*, struct __ns1__login *, const char*, const char*);

inline int soap_read___ns1__login(struct soap *soap, struct __ns1__login *p)
{
	if (p)
	{	::soap_default___ns1__login(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__login(struct soap *soap, const char *URL, struct __ns1__login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__login(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__login(struct soap *soap, struct __ns1__login *p)
{
	if (::soap_read___ns1__login(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__writeVehicleInfo_DEFINED
#define SOAP_TYPE___ns1__writeVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__writeVehicleInfo(struct soap*, struct __ns1__writeVehicleInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__writeVehicleInfo(struct soap*, const struct __ns1__writeVehicleInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__writeVehicleInfo(struct soap*, const char*, int, const struct __ns1__writeVehicleInfo *, const char*);
SOAP_FMAC3 struct __ns1__writeVehicleInfo * SOAP_FMAC4 soap_in___ns1__writeVehicleInfo(struct soap*, const char*, struct __ns1__writeVehicleInfo *, const char*);
SOAP_FMAC1 struct __ns1__writeVehicleInfo * SOAP_FMAC2 soap_instantiate___ns1__writeVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__writeVehicleInfo * soap_new___ns1__writeVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__writeVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__writeVehicleInfo * soap_new_req___ns1__writeVehicleInfo(
	struct soap *soap)
{
	struct __ns1__writeVehicleInfo *_p = ::soap_new___ns1__writeVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__writeVehicleInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__writeVehicleInfo * soap_new_set___ns1__writeVehicleInfo(
	struct soap *soap,
	ns1__writeVehicleInfo *ns1__writeVehicleInfo_)
{
	struct __ns1__writeVehicleInfo *_p = ::soap_new___ns1__writeVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__writeVehicleInfo(soap, _p);
		_p->ns1__writeVehicleInfo_ = ns1__writeVehicleInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__writeVehicleInfo(struct soap*, const struct __ns1__writeVehicleInfo *, const char*, const char*);

inline int soap_write___ns1__writeVehicleInfo(struct soap *soap, struct __ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__writeVehicleInfo(soap, p), 0) || ::soap_put___ns1__writeVehicleInfo(soap, p, "-ns1:writeVehicleInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__writeVehicleInfo(struct soap *soap, const char *URL, struct __ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeVehicleInfo(soap, p), 0) || ::soap_put___ns1__writeVehicleInfo(soap, p, "-ns1:writeVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__writeVehicleInfo(struct soap *soap, const char *URL, struct __ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeVehicleInfo(soap, p), 0) || ::soap_put___ns1__writeVehicleInfo(soap, p, "-ns1:writeVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__writeVehicleInfo(struct soap *soap, const char *URL, struct __ns1__writeVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__writeVehicleInfo(soap, p), 0) || ::soap_put___ns1__writeVehicleInfo(soap, p, "-ns1:writeVehicleInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__writeVehicleInfo * SOAP_FMAC4 soap_get___ns1__writeVehicleInfo(struct soap*, struct __ns1__writeVehicleInfo *, const char*, const char*);

inline int soap_read___ns1__writeVehicleInfo(struct soap *soap, struct __ns1__writeVehicleInfo *p)
{
	if (p)
	{	::soap_default___ns1__writeVehicleInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__writeVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__writeVehicleInfo(struct soap *soap, const char *URL, struct __ns1__writeVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__writeVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__writeVehicleInfo(struct soap *soap, struct __ns1__writeVehicleInfo *p)
{
	if (::soap_read___ns1__writeVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__syncWriteVehicleInfo_DEFINED
#define SOAP_TYPE___ns1__syncWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__syncWriteVehicleInfo(struct soap*, struct __ns1__syncWriteVehicleInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__syncWriteVehicleInfo(struct soap*, const struct __ns1__syncWriteVehicleInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__syncWriteVehicleInfo(struct soap*, const char*, int, const struct __ns1__syncWriteVehicleInfo *, const char*);
SOAP_FMAC3 struct __ns1__syncWriteVehicleInfo * SOAP_FMAC4 soap_in___ns1__syncWriteVehicleInfo(struct soap*, const char*, struct __ns1__syncWriteVehicleInfo *, const char*);
SOAP_FMAC1 struct __ns1__syncWriteVehicleInfo * SOAP_FMAC2 soap_instantiate___ns1__syncWriteVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__syncWriteVehicleInfo * soap_new___ns1__syncWriteVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__syncWriteVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__syncWriteVehicleInfo * soap_new_req___ns1__syncWriteVehicleInfo(
	struct soap *soap)
{
	struct __ns1__syncWriteVehicleInfo *_p = ::soap_new___ns1__syncWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__syncWriteVehicleInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__syncWriteVehicleInfo * soap_new_set___ns1__syncWriteVehicleInfo(
	struct soap *soap,
	ns1__syncWriteVehicleInfo *ns1__syncWriteVehicleInfo_)
{
	struct __ns1__syncWriteVehicleInfo *_p = ::soap_new___ns1__syncWriteVehicleInfo(soap);
	if (_p)
	{	::soap_default___ns1__syncWriteVehicleInfo(soap, _p);
		_p->ns1__syncWriteVehicleInfo_ = ns1__syncWriteVehicleInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__syncWriteVehicleInfo(struct soap*, const struct __ns1__syncWriteVehicleInfo *, const char*, const char*);

inline int soap_write___ns1__syncWriteVehicleInfo(struct soap *soap, struct __ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__syncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__syncWriteVehicleInfo(soap, p, "-ns1:syncWriteVehicleInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__syncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__syncWriteVehicleInfo(soap, p, "-ns1:syncWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__syncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__syncWriteVehicleInfo(soap, p, "-ns1:syncWriteVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__syncWriteVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__syncWriteVehicleInfo(soap, p), 0) || ::soap_put___ns1__syncWriteVehicleInfo(soap, p, "-ns1:syncWriteVehicleInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__syncWriteVehicleInfo * SOAP_FMAC4 soap_get___ns1__syncWriteVehicleInfo(struct soap*, struct __ns1__syncWriteVehicleInfo *, const char*, const char*);

inline int soap_read___ns1__syncWriteVehicleInfo(struct soap *soap, struct __ns1__syncWriteVehicleInfo *p)
{
	if (p)
	{	::soap_default___ns1__syncWriteVehicleInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__syncWriteVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__syncWriteVehicleInfo(struct soap *soap, const char *URL, struct __ns1__syncWriteVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__syncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__syncWriteVehicleInfo(struct soap *soap, struct __ns1__syncWriteVehicleInfo *p)
{
	if (::soap_read___ns1__syncWriteVehicleInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__WriteAreaSpeed_DEFINED
#define SOAP_TYPE_PointerTons1__WriteAreaSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WriteAreaSpeed(struct soap*, ns1__WriteAreaSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WriteAreaSpeed(struct soap*, const char *, int, ns1__WriteAreaSpeed *const*, const char *);
SOAP_FMAC3 ns1__WriteAreaSpeed ** SOAP_FMAC4 soap_in_PointerTons1__WriteAreaSpeed(struct soap*, const char*, ns1__WriteAreaSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WriteAreaSpeed(struct soap*, ns1__WriteAreaSpeed *const*, const char*, const char*);
SOAP_FMAC3 ns1__WriteAreaSpeed ** SOAP_FMAC4 soap_get_PointerTons1__WriteAreaSpeed(struct soap*, ns1__WriteAreaSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SyncWriteAreaSpeed_DEFINED
#define SOAP_TYPE_PointerTons1__SyncWriteAreaSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SyncWriteAreaSpeed(struct soap*, ns1__SyncWriteAreaSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SyncWriteAreaSpeed(struct soap*, const char *, int, ns1__SyncWriteAreaSpeed *const*, const char *);
SOAP_FMAC3 ns1__SyncWriteAreaSpeed ** SOAP_FMAC4 soap_in_PointerTons1__SyncWriteAreaSpeed(struct soap*, const char*, ns1__SyncWriteAreaSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SyncWriteAreaSpeed(struct soap*, ns1__SyncWriteAreaSpeed *const*, const char*, const char*);
SOAP_FMAC3 ns1__SyncWriteAreaSpeed ** SOAP_FMAC4 soap_get_PointerTons1__SyncWriteAreaSpeed(struct soap*, ns1__SyncWriteAreaSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__WriteVehPassInfo_DEFINED
#define SOAP_TYPE_PointerTons1__WriteVehPassInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WriteVehPassInfo(struct soap*, ns1__WriteVehPassInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WriteVehPassInfo(struct soap*, const char *, int, ns1__WriteVehPassInfo *const*, const char *);
SOAP_FMAC3 ns1__WriteVehPassInfo ** SOAP_FMAC4 soap_in_PointerTons1__WriteVehPassInfo(struct soap*, const char*, ns1__WriteVehPassInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WriteVehPassInfo(struct soap*, ns1__WriteVehPassInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__WriteVehPassInfo ** SOAP_FMAC4 soap_get_PointerTons1__WriteVehPassInfo(struct soap*, ns1__WriteVehPassInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SyncWriteVehPassInfo_DEFINED
#define SOAP_TYPE_PointerTons1__SyncWriteVehPassInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SyncWriteVehPassInfo(struct soap*, ns1__SyncWriteVehPassInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SyncWriteVehPassInfo(struct soap*, const char *, int, ns1__SyncWriteVehPassInfo *const*, const char *);
SOAP_FMAC3 ns1__SyncWriteVehPassInfo ** SOAP_FMAC4 soap_in_PointerTons1__SyncWriteVehPassInfo(struct soap*, const char*, ns1__SyncWriteVehPassInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SyncWriteVehPassInfo(struct soap*, ns1__SyncWriteVehPassInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__SyncWriteVehPassInfo ** SOAP_FMAC4 soap_get_PointerTons1__SyncWriteVehPassInfo(struct soap*, ns1__SyncWriteVehPassInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NWritePassStat_DEFINED
#define SOAP_TYPE_PointerTons1__NWritePassStat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NWritePassStat(struct soap*, ns1__NWritePassStat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NWritePassStat(struct soap*, const char *, int, ns1__NWritePassStat *const*, const char *);
SOAP_FMAC3 ns1__NWritePassStat ** SOAP_FMAC4 soap_in_PointerTons1__NWritePassStat(struct soap*, const char*, ns1__NWritePassStat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NWritePassStat(struct soap*, ns1__NWritePassStat *const*, const char*, const char*);
SOAP_FMAC3 ns1__NWritePassStat ** SOAP_FMAC4 soap_get_PointerTons1__NWritePassStat(struct soap*, ns1__NWritePassStat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NSyncWriteVioInfo_DEFINED
#define SOAP_TYPE_PointerTons1__NSyncWriteVioInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NSyncWriteVioInfo(struct soap*, ns1__NSyncWriteVioInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NSyncWriteVioInfo(struct soap*, const char *, int, ns1__NSyncWriteVioInfo *const*, const char *);
SOAP_FMAC3 ns1__NSyncWriteVioInfo ** SOAP_FMAC4 soap_in_PointerTons1__NSyncWriteVioInfo(struct soap*, const char*, ns1__NSyncWriteVioInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NSyncWriteVioInfo(struct soap*, ns1__NSyncWriteVioInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__NSyncWriteVioInfo ** SOAP_FMAC4 soap_get_PointerTons1__NSyncWriteVioInfo(struct soap*, ns1__NSyncWriteVioInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NSyncWriteMobileEPVInfo_DEFINED
#define SOAP_TYPE_PointerTons1__NSyncWriteMobileEPVInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NSyncWriteMobileEPVInfo(struct soap*, ns1__NSyncWriteMobileEPVInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NSyncWriteMobileEPVInfo(struct soap*, const char *, int, ns1__NSyncWriteMobileEPVInfo *const*, const char *);
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfo ** SOAP_FMAC4 soap_in_PointerTons1__NSyncWriteMobileEPVInfo(struct soap*, const char*, ns1__NSyncWriteMobileEPVInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NSyncWriteMobileEPVInfo(struct soap*, ns1__NSyncWriteMobileEPVInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__NSyncWriteMobileEPVInfo ** SOAP_FMAC4 soap_get_PointerTons1__NSyncWriteMobileEPVInfo(struct soap*, ns1__NSyncWriteMobileEPVInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NWriteDeviceStatus_DEFINED
#define SOAP_TYPE_PointerTons1__NWriteDeviceStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NWriteDeviceStatus(struct soap*, ns1__NWriteDeviceStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NWriteDeviceStatus(struct soap*, const char *, int, ns1__NWriteDeviceStatus *const*, const char *);
SOAP_FMAC3 ns1__NWriteDeviceStatus ** SOAP_FMAC4 soap_in_PointerTons1__NWriteDeviceStatus(struct soap*, const char*, ns1__NWriteDeviceStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NWriteDeviceStatus(struct soap*, ns1__NWriteDeviceStatus *const*, const char*, const char*);
SOAP_FMAC3 ns1__NWriteDeviceStatus ** SOAP_FMAC4 soap_get_PointerTons1__NWriteDeviceStatus(struct soap*, ns1__NWriteDeviceStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__WriteFlux_DEFINED
#define SOAP_TYPE_PointerTons1__WriteFlux_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WriteFlux(struct soap*, ns1__WriteFlux *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WriteFlux(struct soap*, const char *, int, ns1__WriteFlux *const*, const char *);
SOAP_FMAC3 ns1__WriteFlux ** SOAP_FMAC4 soap_in_PointerTons1__WriteFlux(struct soap*, const char*, ns1__WriteFlux **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WriteFlux(struct soap*, ns1__WriteFlux *const*, const char*, const char*);
SOAP_FMAC3 ns1__WriteFlux ** SOAP_FMAC4 soap_get_PointerTons1__WriteFlux(struct soap*, ns1__WriteFlux **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NSyncWriteVehicleInfo_DEFINED
#define SOAP_TYPE_PointerTons1__NSyncWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NSyncWriteVehicleInfo(struct soap*, ns1__NSyncWriteVehicleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NSyncWriteVehicleInfo(struct soap*, const char *, int, ns1__NSyncWriteVehicleInfo *const*, const char *);
SOAP_FMAC3 ns1__NSyncWriteVehicleInfo ** SOAP_FMAC4 soap_in_PointerTons1__NSyncWriteVehicleInfo(struct soap*, const char*, ns1__NSyncWriteVehicleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NSyncWriteVehicleInfo(struct soap*, ns1__NSyncWriteVehicleInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__NSyncWriteVehicleInfo ** SOAP_FMAC4 soap_get_PointerTons1__NSyncWriteVehicleInfo(struct soap*, ns1__NSyncWriteVehicleInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NWriteVehicleInfoEx_DEFINED
#define SOAP_TYPE_PointerTons1__NWriteVehicleInfoEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NWriteVehicleInfoEx(struct soap*, ns1__NWriteVehicleInfoEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NWriteVehicleInfoEx(struct soap*, const char *, int, ns1__NWriteVehicleInfoEx *const*, const char *);
SOAP_FMAC3 ns1__NWriteVehicleInfoEx ** SOAP_FMAC4 soap_in_PointerTons1__NWriteVehicleInfoEx(struct soap*, const char*, ns1__NWriteVehicleInfoEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NWriteVehicleInfoEx(struct soap*, ns1__NWriteVehicleInfoEx *const*, const char*, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfoEx ** SOAP_FMAC4 soap_get_PointerTons1__NWriteVehicleInfoEx(struct soap*, ns1__NWriteVehicleInfoEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NWriteVehicleInfo_DEFINED
#define SOAP_TYPE_PointerTons1__NWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NWriteVehicleInfo(struct soap*, ns1__NWriteVehicleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NWriteVehicleInfo(struct soap*, const char *, int, ns1__NWriteVehicleInfo *const*, const char *);
SOAP_FMAC3 ns1__NWriteVehicleInfo ** SOAP_FMAC4 soap_in_PointerTons1__NWriteVehicleInfo(struct soap*, const char*, ns1__NWriteVehicleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NWriteVehicleInfo(struct soap*, ns1__NWriteVehicleInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__NWriteVehicleInfo ** SOAP_FMAC4 soap_get_PointerTons1__NWriteVehicleInfo(struct soap*, ns1__NWriteVehicleInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__writeAlarmInfo_DEFINED
#define SOAP_TYPE_PointerTons1__writeAlarmInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__writeAlarmInfo(struct soap*, ns1__writeAlarmInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__writeAlarmInfo(struct soap*, const char *, int, ns1__writeAlarmInfo *const*, const char *);
SOAP_FMAC3 ns1__writeAlarmInfo ** SOAP_FMAC4 soap_in_PointerTons1__writeAlarmInfo(struct soap*, const char*, ns1__writeAlarmInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__writeAlarmInfo(struct soap*, ns1__writeAlarmInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__writeAlarmInfo ** SOAP_FMAC4 soap_get_PointerTons1__writeAlarmInfo(struct soap*, ns1__writeAlarmInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__querySyncTime_DEFINED
#define SOAP_TYPE_PointerTons1__querySyncTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__querySyncTime(struct soap*, ns1__querySyncTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__querySyncTime(struct soap*, const char *, int, ns1__querySyncTime *const*, const char *);
SOAP_FMAC3 ns1__querySyncTime ** SOAP_FMAC4 soap_in_PointerTons1__querySyncTime(struct soap*, const char*, ns1__querySyncTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__querySyncTime(struct soap*, ns1__querySyncTime *const*, const char*, const char*);
SOAP_FMAC3 ns1__querySyncTime ** SOAP_FMAC4 soap_get_PointerTons1__querySyncTime(struct soap*, ns1__querySyncTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__logout_DEFINED
#define SOAP_TYPE_PointerTons1__logout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__logout(struct soap*, ns1__logout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__logout(struct soap*, const char *, int, ns1__logout *const*, const char *);
SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_in_PointerTons1__logout(struct soap*, const char*, ns1__logout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__logout(struct soap*, ns1__logout *const*, const char*, const char*);
SOAP_FMAC3 ns1__logout ** SOAP_FMAC4 soap_get_PointerTons1__logout(struct soap*, ns1__logout **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__queryViolateSpeed_DEFINED
#define SOAP_TYPE_PointerTons1__queryViolateSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__queryViolateSpeed(struct soap*, ns1__queryViolateSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__queryViolateSpeed(struct soap*, const char *, int, ns1__queryViolateSpeed *const*, const char *);
SOAP_FMAC3 ns1__queryViolateSpeed ** SOAP_FMAC4 soap_in_PointerTons1__queryViolateSpeed(struct soap*, const char*, ns1__queryViolateSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__queryViolateSpeed(struct soap*, ns1__queryViolateSpeed *const*, const char*, const char*);
SOAP_FMAC3 ns1__queryViolateSpeed ** SOAP_FMAC4 soap_get_PointerTons1__queryViolateSpeed(struct soap*, ns1__queryViolateSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__queryLimitSpeed_DEFINED
#define SOAP_TYPE_PointerTons1__queryLimitSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__queryLimitSpeed(struct soap*, ns1__queryLimitSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__queryLimitSpeed(struct soap*, const char *, int, ns1__queryLimitSpeed *const*, const char *);
SOAP_FMAC3 ns1__queryLimitSpeed ** SOAP_FMAC4 soap_in_PointerTons1__queryLimitSpeed(struct soap*, const char*, ns1__queryLimitSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__queryLimitSpeed(struct soap*, ns1__queryLimitSpeed *const*, const char*, const char*);
SOAP_FMAC3 ns1__queryLimitSpeed ** SOAP_FMAC4 soap_get_PointerTons1__queryLimitSpeed(struct soap*, ns1__queryLimitSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__login_DEFINED
#define SOAP_TYPE_PointerTons1__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__login(struct soap*, ns1__login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__login(struct soap*, const char *, int, ns1__login *const*, const char *);
SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_in_PointerTons1__login(struct soap*, const char*, ns1__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__login(struct soap*, ns1__login *const*, const char*, const char*);
SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_get_PointerTons1__login(struct soap*, ns1__login **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__writeVehicleInfo_DEFINED
#define SOAP_TYPE_PointerTons1__writeVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__writeVehicleInfo(struct soap*, ns1__writeVehicleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__writeVehicleInfo(struct soap*, const char *, int, ns1__writeVehicleInfo *const*, const char *);
SOAP_FMAC3 ns1__writeVehicleInfo ** SOAP_FMAC4 soap_in_PointerTons1__writeVehicleInfo(struct soap*, const char*, ns1__writeVehicleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__writeVehicleInfo(struct soap*, ns1__writeVehicleInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__writeVehicleInfo ** SOAP_FMAC4 soap_get_PointerTons1__writeVehicleInfo(struct soap*, ns1__writeVehicleInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__syncWriteVehicleInfo_DEFINED
#define SOAP_TYPE_PointerTons1__syncWriteVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__syncWriteVehicleInfo(struct soap*, ns1__syncWriteVehicleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__syncWriteVehicleInfo(struct soap*, const char *, int, ns1__syncWriteVehicleInfo *const*, const char *);
SOAP_FMAC3 ns1__syncWriteVehicleInfo ** SOAP_FMAC4 soap_in_PointerTons1__syncWriteVehicleInfo(struct soap*, const char*, ns1__syncWriteVehicleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__syncWriteVehicleInfo(struct soap*, ns1__syncWriteVehicleInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__syncWriteVehicleInfo ** SOAP_FMAC4 soap_get_PointerTons1__syncWriteVehicleInfo(struct soap*, ns1__syncWriteVehicleInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
